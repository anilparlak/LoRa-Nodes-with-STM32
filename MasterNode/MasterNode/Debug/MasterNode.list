
MasterNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003324  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a0  080038a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080038a0  080038a0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038a0  080038a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080038a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e88  20000078  08003920  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f00  08003920  00020f00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a721  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002061  00000000  00000000  0002a7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0002c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  0002cfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017792  00000000  00000000  0002d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009474  00000000  00000000  00044dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008240b  00000000  00000000  0004e26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0679  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff0  00000000  00000000  000d06cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003418 	.word	0x08003418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003418 	.word	0x08003418

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8000160:	4b22      	ldr	r3, [pc, #136]	; (80001ec <Ringbuf_init+0x90>)
 8000162:	4a23      	ldr	r2, [pc, #140]	; (80001f0 <Ringbuf_init+0x94>)
 8000164:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8000166:	4b23      	ldr	r3, [pc, #140]	; (80001f4 <Ringbuf_init+0x98>)
 8000168:	4a23      	ldr	r2, [pc, #140]	; (80001f8 <Ringbuf_init+0x9c>)
 800016a:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 800016c:	4b23      	ldr	r3, [pc, #140]	; (80001fc <Ringbuf_init+0xa0>)
 800016e:	4a24      	ldr	r2, [pc, #144]	; (8000200 <Ringbuf_init+0xa4>)
 8000170:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8000172:	4b24      	ldr	r3, [pc, #144]	; (8000204 <Ringbuf_init+0xa8>)
 8000174:	4a24      	ldr	r2, [pc, #144]	; (8000208 <Ringbuf_init+0xac>)
 8000176:	601a      	str	r2, [r3, #0]
  _rx_buffer3 = &rx_buffer3;
 8000178:	4b24      	ldr	r3, [pc, #144]	; (800020c <Ringbuf_init+0xb0>)
 800017a:	4a25      	ldr	r2, [pc, #148]	; (8000210 <Ringbuf_init+0xb4>)
 800017c:	601a      	str	r2, [r3, #0]
  _tx_buffer3 = &tx_buffer3;
 800017e:	4b25      	ldr	r3, [pc, #148]	; (8000214 <Ringbuf_init+0xb8>)
 8000180:	4a25      	ldr	r2, [pc, #148]	; (8000218 <Ringbuf_init+0xbc>)
 8000182:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(wifi_uart, UART_IT_ERR);
 8000184:	4b25      	ldr	r3, [pc, #148]	; (800021c <Ringbuf_init+0xc0>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	695a      	ldr	r2, [r3, #20]
 800018a:	4b24      	ldr	r3, [pc, #144]	; (800021c <Ringbuf_init+0xc0>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	f042 0201 	orr.w	r2, r2, #1
 8000192:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8000194:	4b22      	ldr	r3, [pc, #136]	; (8000220 <Ringbuf_init+0xc4>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	695a      	ldr	r2, [r3, #20]
 800019a:	4b21      	ldr	r3, [pc, #132]	; (8000220 <Ringbuf_init+0xc4>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	f042 0201 	orr.w	r2, r2, #1
 80001a2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(lora_uart, UART_IT_ERR);
 80001a4:	4b1f      	ldr	r3, [pc, #124]	; (8000224 <Ringbuf_init+0xc8>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	695a      	ldr	r2, [r3, #20]
 80001aa:	4b1e      	ldr	r3, [pc, #120]	; (8000224 <Ringbuf_init+0xc8>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f042 0201 	orr.w	r2, r2, #1
 80001b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
 80001b4:	4b19      	ldr	r3, [pc, #100]	; (800021c <Ringbuf_init+0xc0>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	68da      	ldr	r2, [r3, #12]
 80001ba:	4b18      	ldr	r3, [pc, #96]	; (800021c <Ringbuf_init+0xc0>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	f042 0220 	orr.w	r2, r2, #32
 80001c2:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 80001c4:	4b16      	ldr	r3, [pc, #88]	; (8000220 <Ringbuf_init+0xc4>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	68da      	ldr	r2, [r3, #12]
 80001ca:	4b15      	ldr	r3, [pc, #84]	; (8000220 <Ringbuf_init+0xc4>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f042 0220 	orr.w	r2, r2, #32
 80001d2:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(lora_uart, UART_IT_RXNE);
 80001d4:	4b13      	ldr	r3, [pc, #76]	; (8000224 <Ringbuf_init+0xc8>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	68da      	ldr	r2, [r3, #12]
 80001da:	4b12      	ldr	r3, [pc, #72]	; (8000224 <Ringbuf_init+0xc8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f042 0220 	orr.w	r2, r2, #32
 80001e2:	60da      	str	r2, [r3, #12]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	20000d78 	.word	0x20000d78
 80001f0:	20000094 	.word	0x20000094
 80001f4:	20000d7c 	.word	0x20000d7c
 80001f8:	2000029c 	.word	0x2000029c
 80001fc:	20000d88 	.word	0x20000d88
 8000200:	200004a4 	.word	0x200004a4
 8000204:	20000d74 	.word	0x20000d74
 8000208:	200006ac 	.word	0x200006ac
 800020c:	20000d80 	.word	0x20000d80
 8000210:	200008b4 	.word	0x200008b4
 8000214:	20000d84 	.word	0x20000d84
 8000218:	20000abc 	.word	0x20000abc
 800021c:	20000e0c 	.word	0x20000e0c
 8000220:	20000eac 	.word	0x20000eac
 8000224:	20000da4 	.word	0x20000da4

08000228 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	6039      	str	r1, [r7, #0]
 8000232:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800023a:	3301      	adds	r3, #1
 800023c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000240:	60fb      	str	r3, [r7, #12]

  if(i != buffer->tail) {
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	429a      	cmp	r2, r3
 800024c:	d009      	beq.n	8000262 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000254:	683a      	ldr	r2, [r7, #0]
 8000256:	79f9      	ldrb	r1, [r7, #7]
 8000258:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f7ff ff68 	bl	800014c <strlen>
 800027c:	4603      	mov	r3, r0
 800027e:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000280:	6838      	ldr	r0, [r7, #0]
 8000282:	f7ff ff63 	bl	800014c <strlen>
 8000286:	4603      	mov	r3, r0
 8000288:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
	int indx = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000292:	e002      	b.n	800029a <Look_for+0x2e>
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	3301      	adds	r3, #1
 8000298:	613b      	str	r3, [r7, #16]
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	4413      	add	r3, r2
 80002a0:	781a      	ldrb	r2, [r3, #0]
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	6839      	ldr	r1, [r7, #0]
 80002a6:	440b      	add	r3, r1
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d1f2      	bne.n	8000294 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4413      	add	r3, r2
 80002b4:	781a      	ldrb	r2, [r3, #0]
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	6839      	ldr	r1, [r7, #0]
 80002ba:	440b      	add	r3, r1
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d111      	bne.n	80002e6 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 80002c2:	e005      	b.n	80002d0 <Look_for+0x64>
	{
		so_far++;
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	3301      	adds	r3, #1
 80002c8:	617b      	str	r3, [r7, #20]
		indx++;
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	3301      	adds	r3, #1
 80002ce:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	4413      	add	r3, r2
 80002d6:	781a      	ldrb	r2, [r3, #0]
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	6839      	ldr	r1, [r7, #0]
 80002dc:	440b      	add	r3, r1
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d0ef      	beq.n	80002c4 <Look_for+0x58>
 80002e4:	e008      	b.n	80002f8 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 80002ea:	693a      	ldr	r2, [r7, #16]
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	dbcf      	blt.n	8000292 <Look_for+0x26>
 80002f2:	f04f 33ff 	mov.w	r3, #4294967295
 80002f6:	e007      	b.n	8000308 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 80002f8:	697a      	ldr	r2, [r7, #20]
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d101      	bne.n	8000304 <Look_for+0x98>
 8000300:	2301      	movs	r3, #1
 8000302:	e001      	b.n	8000308 <Look_for+0x9c>
	else return -1;
 8000304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000308:	4618      	mov	r0, r3
 800030a:	3718      	adds	r7, #24
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <Uart_flush>:


void Uart_flush (UART_HandleTypeDef *uart)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	if (uart == wifi_uart)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a1b      	ldr	r2, [pc, #108]	; (8000388 <Uart_flush+0x78>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d10c      	bne.n	800033a <Uart_flush+0x2a>
	{
		memset(_rx_buffer1->buffer,'\0', UART_BUFFER_SIZE);
 8000320:	4b1a      	ldr	r3, [pc, #104]	; (800038c <Uart_flush+0x7c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f002 fc40 	bl	8002bb0 <memset>
		_rx_buffer1->head = 0;
 8000330:	4b16      	ldr	r3, [pc, #88]	; (800038c <Uart_flush+0x7c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2200      	movs	r2, #0
 8000336:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	if (uart == pc_uart)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a14      	ldr	r2, [pc, #80]	; (8000390 <Uart_flush+0x80>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d10c      	bne.n	800035c <Uart_flush+0x4c>
	{
		memset(_rx_buffer2->buffer,'\0', UART_BUFFER_SIZE);
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <Uart_flush+0x84>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800034a:	2100      	movs	r1, #0
 800034c:	4618      	mov	r0, r3
 800034e:	f002 fc2f 	bl	8002bb0 <memset>
		_rx_buffer2->head = 0;
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <Uart_flush+0x84>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2200      	movs	r2, #0
 8000358:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	if (uart == lora_uart)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <Uart_flush+0x88>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d10c      	bne.n	800037e <Uart_flush+0x6e>
	{
		memset(_rx_buffer3->buffer,'\0', UART_BUFFER_SIZE);
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <Uart_flush+0x8c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f002 fc1e 	bl	8002bb0 <memset>
		_rx_buffer3->head = 0;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <Uart_flush+0x8c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2200      	movs	r2, #0
 800037a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000e0c 	.word	0x20000e0c
 800038c:	20000d78 	.word	0x20000d78
 8000390:	20000eac 	.word	0x20000eac
 8000394:	20000d88 	.word	0x20000d88
 8000398:	20000da4 	.word	0x20000da4
 800039c:	20000d80 	.word	0x20000d80

080003a0 <Uart_peek>:


int Uart_peek(UART_HandleTypeDef *uart)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	if (uart == wifi_uart)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a28      	ldr	r2, [pc, #160]	; (800044c <Uart_peek+0xac>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d114      	bne.n	80003da <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <Uart_peek+0xb0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80003b8:	4b25      	ldr	r3, [pc, #148]	; (8000450 <Uart_peek+0xb0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d102      	bne.n	80003ca <Uart_peek+0x2a>
		  {
		    return -1;
 80003c4:	f04f 33ff 	mov.w	r3, #4294967295
 80003c8:	e03b      	b.n	8000442 <Uart_peek+0xa2>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 80003ca:	4b21      	ldr	r3, [pc, #132]	; (8000450 <Uart_peek+0xb0>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	4b20      	ldr	r3, [pc, #128]	; (8000450 <Uart_peek+0xb0>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80003d6:	5cd3      	ldrb	r3, [r2, r3]
 80003d8:	e033      	b.n	8000442 <Uart_peek+0xa2>
		  }
	}

	else if (uart == pc_uart)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a1d      	ldr	r2, [pc, #116]	; (8000454 <Uart_peek+0xb4>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d114      	bne.n	800040c <Uart_peek+0x6c>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80003e2:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <Uart_peek+0xb8>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80003ea:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <Uart_peek+0xb8>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d102      	bne.n	80003fc <Uart_peek+0x5c>
		  {
		    return -1;
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295
 80003fa:	e022      	b.n	8000442 <Uart_peek+0xa2>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 80003fc:	4b16      	ldr	r3, [pc, #88]	; (8000458 <Uart_peek+0xb8>)
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <Uart_peek+0xb8>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000408:	5cd3      	ldrb	r3, [r2, r3]
 800040a:	e01a      	b.n	8000442 <Uart_peek+0xa2>
		  }
	}

	else if (uart == lora_uart)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a13      	ldr	r2, [pc, #76]	; (800045c <Uart_peek+0xbc>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d114      	bne.n	800043e <Uart_peek+0x9e>
	{
		  if(_rx_buffer3->head == _rx_buffer3->tail)
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <Uart_peek+0xc0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <Uart_peek+0xc0>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000424:	429a      	cmp	r2, r3
 8000426:	d102      	bne.n	800042e <Uart_peek+0x8e>
		  {
		    return -1;
 8000428:	f04f 33ff 	mov.w	r3, #4294967295
 800042c:	e009      	b.n	8000442 <Uart_peek+0xa2>
		  }
		  else
		  {
		    return _rx_buffer3->buffer[_rx_buffer3->tail];
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <Uart_peek+0xc0>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <Uart_peek+0xc0>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800043a:	5cd3      	ldrb	r3, [r2, r3]
 800043c:	e001      	b.n	8000442 <Uart_peek+0xa2>
		  }
	}

	return -1;
 800043e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	20000e0c 	.word	0x20000e0c
 8000450:	20000d78 	.word	0x20000d78
 8000454:	20000eac 	.word	0x20000eac
 8000458:	20000d88 	.word	0x20000d88
 800045c:	20000da4 	.word	0x20000da4
 8000460:	20000d80 	.word	0x20000d80

08000464 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	if (uart == wifi_uart)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a3c      	ldr	r2, [pc, #240]	; (8000560 <Uart_read+0xfc>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d121      	bne.n	80004b8 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000474:	4b3b      	ldr	r3, [pc, #236]	; (8000564 <Uart_read+0x100>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800047c:	4b39      	ldr	r3, [pc, #228]	; (8000564 <Uart_read+0x100>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000484:	429a      	cmp	r2, r3
 8000486:	d102      	bne.n	800048e <Uart_read+0x2a>
		  {
		    return -1;
 8000488:	f04f 33ff 	mov.w	r3, #4294967295
 800048c:	e062      	b.n	8000554 <Uart_read+0xf0>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 800048e:	4b35      	ldr	r3, [pc, #212]	; (8000564 <Uart_read+0x100>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	4b34      	ldr	r3, [pc, #208]	; (8000564 <Uart_read+0x100>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800049a:	5cd3      	ldrb	r3, [r2, r3]
 800049c:	737b      	strb	r3, [r7, #13]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800049e:	4b31      	ldr	r3, [pc, #196]	; (8000564 <Uart_read+0x100>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	4b2e      	ldr	r3, [pc, #184]	; (8000564 <Uart_read+0x100>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 80004b4:	7b7b      	ldrb	r3, [r7, #13]
 80004b6:	e04d      	b.n	8000554 <Uart_read+0xf0>
		  }
	}

	else if (uart == pc_uart)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a2b      	ldr	r2, [pc, #172]	; (8000568 <Uart_read+0x104>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d121      	bne.n	8000504 <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80004c0:	4b2a      	ldr	r3, [pc, #168]	; (800056c <Uart_read+0x108>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80004c8:	4b28      	ldr	r3, [pc, #160]	; (800056c <Uart_read+0x108>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d102      	bne.n	80004da <Uart_read+0x76>
		  {
		    return -1;
 80004d4:	f04f 33ff 	mov.w	r3, #4294967295
 80004d8:	e03c      	b.n	8000554 <Uart_read+0xf0>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80004da:	4b24      	ldr	r3, [pc, #144]	; (800056c <Uart_read+0x108>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b23      	ldr	r3, [pc, #140]	; (800056c <Uart_read+0x108>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004e6:	5cd3      	ldrb	r3, [r2, r3]
 80004e8:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <Uart_read+0x108>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	4b1d      	ldr	r3, [pc, #116]	; (800056c <Uart_read+0x108>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000500:	7bbb      	ldrb	r3, [r7, #14]
 8000502:	e027      	b.n	8000554 <Uart_read+0xf0>
		  }
	}

	else if (uart == lora_uart)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a1a      	ldr	r2, [pc, #104]	; (8000570 <Uart_read+0x10c>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d121      	bne.n	8000550 <Uart_read+0xec>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer3->head == _rx_buffer3->tail)
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <Uart_read+0x110>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <Uart_read+0x110>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800051c:	429a      	cmp	r2, r3
 800051e:	d102      	bne.n	8000526 <Uart_read+0xc2>
		  {
		    return -1;
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	e016      	b.n	8000554 <Uart_read+0xf0>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer3->buffer[_rx_buffer3->tail];
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <Uart_read+0x110>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b12      	ldr	r3, [pc, #72]	; (8000574 <Uart_read+0x110>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000532:	5cd3      	ldrb	r3, [r2, r3]
 8000534:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer3->tail = (unsigned int)(_rx_buffer3->tail + 1) % UART_BUFFER_SIZE;
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <Uart_read+0x110>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <Uart_read+0x110>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000548:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	e001      	b.n	8000554 <Uart_read+0xf0>
		  }
	}


	else return -1;
 8000550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000554:	4618      	mov	r0, r3
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000e0c 	.word	0x20000e0c
 8000564:	20000d78 	.word	0x20000d78
 8000568:	20000eac 	.word	0x20000eac
 800056c:	20000d88 	.word	0x20000d88
 8000570:	20000da4 	.word	0x20000da4
 8000574:	20000d80 	.word	0x20000d80

08000578 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8000578:	b480      	push	{r7}
 800057a:	b087      	sub	sp, #28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b00      	cmp	r3, #0
 8000586:	db7f      	blt.n	8000688 <Uart_write+0x110>
	{
		if (uart == wifi_uart){
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	4a42      	ldr	r2, [pc, #264]	; (8000694 <Uart_write+0x11c>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d126      	bne.n	80005de <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000590:	4b41      	ldr	r3, [pc, #260]	; (8000698 <Uart_write+0x120>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000598:	3301      	adds	r3, #1
 800059a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800059e:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 80005a0:	bf00      	nop
 80005a2:	4b3d      	ldr	r3, [pc, #244]	; (8000698 <Uart_write+0x120>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d0f8      	beq.n	80005a2 <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80005b0:	4b39      	ldr	r3, [pc, #228]	; (8000698 <Uart_write+0x120>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b38      	ldr	r3, [pc, #224]	; (8000698 <Uart_write+0x120>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	b2c9      	uxtb	r1, r1
 80005c0:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 80005c2:	4b35      	ldr	r3, [pc, #212]	; (8000698 <Uart_write+0x120>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80005cc:	4b31      	ldr	r3, [pc, #196]	; (8000694 <Uart_write+0x11c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	68da      	ldr	r2, [r3, #12]
 80005d2:	4b30      	ldr	r3, [pc, #192]	; (8000694 <Uart_write+0x11c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005da:	60da      	str	r2, [r3, #12]

			__HAL_UART_ENABLE_IT(lora_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}

	}
}
 80005dc:	e054      	b.n	8000688 <Uart_write+0x110>
		else if (uart == pc_uart){
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	4a2e      	ldr	r2, [pc, #184]	; (800069c <Uart_write+0x124>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d126      	bne.n	8000634 <Uart_write+0xbc>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <Uart_write+0x128>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005ee:	3301      	adds	r3, #1
 80005f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005f4:	613b      	str	r3, [r7, #16]
			while (i == _tx_buffer2->tail);
 80005f6:	bf00      	nop
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <Uart_write+0x128>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	429a      	cmp	r2, r3
 8000604:	d0f8      	beq.n	80005f8 <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8000606:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <Uart_write+0x128>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <Uart_write+0x128>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	b2c9      	uxtb	r1, r1
 8000616:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8000618:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <Uart_write+0x128>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	693a      	ldr	r2, [r7, #16]
 800061e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <Uart_write+0x124>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	68da      	ldr	r2, [r3, #12]
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <Uart_write+0x124>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000630:	60da      	str	r2, [r3, #12]
}
 8000632:	e029      	b.n	8000688 <Uart_write+0x110>
		else if (uart == lora_uart){
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <Uart_write+0x12c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d125      	bne.n	8000688 <Uart_write+0x110>
			int i = (_tx_buffer3->head + 1) % UART_BUFFER_SIZE;
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <Uart_write+0x130>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000644:	3301      	adds	r3, #1
 8000646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800064a:	617b      	str	r3, [r7, #20]
			while (i == _tx_buffer3->tail);
 800064c:	bf00      	nop
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <Uart_write+0x130>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	429a      	cmp	r2, r3
 800065a:	d0f8      	beq.n	800064e <Uart_write+0xd6>
			_tx_buffer3->buffer[_tx_buffer3->head] = (uint8_t)c;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <Uart_write+0x130>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <Uart_write+0x130>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	b2c9      	uxtb	r1, r1
 800066c:	54d1      	strb	r1, [r2, r3]
			_tx_buffer3->head = i;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <Uart_write+0x130>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	697a      	ldr	r2, [r7, #20]
 8000674:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(lora_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <Uart_write+0x12c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	68da      	ldr	r2, [r3, #12]
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <Uart_write+0x12c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000686:	60da      	str	r2, [r3, #12]
}
 8000688:	bf00      	nop
 800068a:	371c      	adds	r7, #28
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000e0c 	.word	0x20000e0c
 8000698:	20000d7c 	.word	0x20000d7c
 800069c:	20000eac 	.word	0x20000eac
 80006a0:	20000d74 	.word	0x20000d74
 80006a4:	20000da4 	.word	0x20000da4
 80006a8:	20000d84 	.word	0x20000d84

080006ac <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	if (uart == wifi_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a24      	ldr	r2, [pc, #144]	; (8000748 <IsDataAvailable+0x9c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d111      	bne.n	80006e0 <IsDataAvailable+0x34>
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <IsDataAvailable+0xa0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <IsDataAvailable+0xa0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006d8:	b29b      	uxth	r3, r3
 80006da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006de:	e02d      	b.n	800073c <IsDataAvailable+0x90>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <IsDataAvailable+0xa4>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d111      	bne.n	800070c <IsDataAvailable+0x60>
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <IsDataAvailable+0xa8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <IsDataAvailable+0xa8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	b29b      	uxth	r3, r3
 8000700:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000704:	b29b      	uxth	r3, r3
 8000706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800070a:	e017      	b.n	800073c <IsDataAvailable+0x90>
	else if (uart == lora_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer3->head - _rx_buffer3->tail) % UART_BUFFER_SIZE;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <IsDataAvailable+0xac>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d111      	bne.n	8000738 <IsDataAvailable+0x8c>
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <IsDataAvailable+0xb0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <IsDataAvailable+0xb0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000726:	b29b      	uxth	r3, r3
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	b29b      	uxth	r3, r3
 800072c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000730:	b29b      	uxth	r3, r3
 8000732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000736:	e001      	b.n	800073c <IsDataAvailable+0x90>
	return -1;
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000e0c 	.word	0x20000e0c
 800074c:	20000d78 	.word	0x20000d78
 8000750:	20000eac 	.word	0x20000eac
 8000754:	20000d88 	.word	0x20000d88
 8000758:	20000da4 	.word	0x20000da4
 800075c:	20000d80 	.word	0x20000d80

08000760 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	460b      	mov	r3, r1
 800076e:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8000770:	bf00      	nop
 8000772:	6839      	ldr	r1, [r7, #0]
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f000 f839 	bl	80007ec <Wait_for>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d1f8      	bne.n	8000772 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e012      	b.n	80007ac <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8000786:	bf00      	nop
 8000788:	6838      	ldr	r0, [r7, #0]
 800078a:	f7ff ff8f 	bl	80006ac <IsDataAvailable>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f9      	beq.n	8000788 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8000794:	6838      	ldr	r0, [r7, #0]
 8000796:	f7ff fe65 	bl	8000464 <Uart_read>
 800079a:	4601      	mov	r1, r0
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	b2ca      	uxtb	r2, r1
 80007a4:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	3301      	adds	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	7afb      	ldrb	r3, [r7, #11]
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	dbe8      	blt.n	8000786 <Get_after+0x26>
	}
	return 1;
 80007b4:	2301      	movs	r3, #1
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 80007c8:	e007      	b.n	80007da <Uart_sendstring+0x1c>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	6839      	ldr	r1, [r7, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fecf 	bl	8000578 <Uart_write>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1f3      	bne.n	80007ca <Uart_sendstring+0xc>
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart) // burayı kontrol et
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff fca6 	bl	800014c <strlen>
 8000800:	4603      	mov	r3, r0
 8000802:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8000804:	bf00      	nop
 8000806:	6838      	ldr	r0, [r7, #0]
 8000808:	f7ff ff50 	bl	80006ac <IsDataAvailable>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f9      	beq.n	8000806 <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8000812:	6838      	ldr	r0, [r7, #0]
 8000814:	f7ff fdc4 	bl	80003a0 <Uart_peek>
 8000818:	4601      	mov	r1, r0
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	4413      	add	r3, r2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	4299      	cmp	r1, r3
 8000824:	d01e      	beq.n	8000864 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <Wait_for+0xb4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <Wait_for+0xb4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000838:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 800083c:	e7e2      	b.n	8000804 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3301      	adds	r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8000844:	6838      	ldr	r0, [r7, #0]
 8000846:	f7ff fe0d 	bl	8000464 <Uart_read>
		if (so_far == len) return 1;
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	429a      	cmp	r2, r3
 8000850:	d101      	bne.n	8000856 <Wait_for+0x6a>
 8000852:	2301      	movs	r3, #1
 8000854:	e01f      	b.n	8000896 <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 8000856:	bf00      	nop
 8000858:	6838      	ldr	r0, [r7, #0]
 800085a:	f7ff ff27 	bl	80006ac <IsDataAvailable>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0f9      	beq.n	8000858 <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 8000864:	6838      	ldr	r0, [r7, #0]
 8000866:	f7ff fd9b 	bl	80003a0 <Uart_peek>
 800086a:	4601      	mov	r1, r0
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4299      	cmp	r1, r3
 8000876:	d0e2      	beq.n	800083e <Wait_for+0x52>
	}

	if (so_far != len)
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	429a      	cmp	r2, r3
 800087e:	d002      	beq.n	8000886 <Wait_for+0x9a>
	{
		so_far = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8000884:	e7be      	b.n	8000804 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	429a      	cmp	r2, r3
 800088c:	d101      	bne.n	8000892 <Wait_for+0xa6>
 800088e:	2301      	movs	r3, #1
 8000890:	e001      	b.n	8000896 <Wait_for+0xaa>
	else return -1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000d78 	.word	0x20000d78

080008a4 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d030      	beq.n	8000928 <Uart_isr+0x84>
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d02b      	beq.n	8000928 <Uart_isr+0x84>
    {

		huart->Instance->SR;                       /* Read status register */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	73fb      	strb	r3, [r7, #15]
        if (huart == wifi_uart)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a5c      	ldr	r2, [pc, #368]	; (8000a54 <Uart_isr+0x1b0>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d107      	bne.n	80008f6 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 80008e6:	4b5c      	ldr	r3, [pc, #368]	; (8000a58 <Uart_isr+0x1b4>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc9a 	bl	8000228 <store_char>
           	store_char (c, _rx_buffer3);  // store data in buffer
        }



        return;
 80008f4:	e0a8      	b.n	8000a48 <Uart_isr+0x1a4>
        else if (huart == pc_uart)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a58      	ldr	r2, [pc, #352]	; (8000a5c <Uart_isr+0x1b8>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d107      	bne.n	800090e <Uart_isr+0x6a>
           	store_char (c, _rx_buffer2);  // store data in buffer
 80008fe:	4b58      	ldr	r3, [pc, #352]	; (8000a60 <Uart_isr+0x1bc>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc8e 	bl	8000228 <store_char>
        return;
 800090c:	e09c      	b.n	8000a48 <Uart_isr+0x1a4>
        else if (huart == lora_uart)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a54      	ldr	r2, [pc, #336]	; (8000a64 <Uart_isr+0x1c0>)
 8000912:	4293      	cmp	r3, r2
 8000914:	f040 8098 	bne.w	8000a48 <Uart_isr+0x1a4>
           	store_char (c, _rx_buffer3);  // store data in buffer
 8000918:	4b53      	ldr	r3, [pc, #332]	; (8000a68 <Uart_isr+0x1c4>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fc81 	bl	8000228 <store_char>
        return;
 8000926:	e08f      	b.n	8000a48 <Uart_isr+0x1a4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	2b00      	cmp	r3, #0
 8000930:	f000 808d 	beq.w	8000a4e <Uart_isr+0x1aa>
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093a:	2b00      	cmp	r3, #0
 800093c:	f000 8087 	beq.w	8000a4e <Uart_isr+0x1aa>
    {
    	if (huart == wifi_uart){
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a44      	ldr	r2, [pc, #272]	; (8000a54 <Uart_isr+0x1b0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d127      	bne.n	8000998 <Uart_isr+0xf4>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8000948:	4b48      	ldr	r3, [pc, #288]	; (8000a6c <Uart_isr+0x1c8>)
 800094a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800094e:	4b47      	ldr	r3, [pc, #284]	; (8000a6c <Uart_isr+0x1c8>)
 8000950:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000954:	429a      	cmp	r2, r3
 8000956:	d108      	bne.n	800096a <Uart_isr+0xc6>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	68da      	ldr	r2, [r3, #12]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000966:	60da      	str	r2, [r3, #12]
        	      huart->Instance->DR = c;

        	    }
        	}

    	return;
 8000968:	e070      	b.n	8000a4c <Uart_isr+0x1a8>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 800096a:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <Uart_isr+0x1c8>)
 800096c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000970:	4a3e      	ldr	r2, [pc, #248]	; (8000a6c <Uart_isr+0x1c8>)
 8000972:	5cd3      	ldrb	r3, [r2, r3]
 8000974:	733b      	strb	r3, [r7, #12]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8000976:	4b3d      	ldr	r3, [pc, #244]	; (8000a6c <Uart_isr+0x1c8>)
 8000978:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800097c:	3301      	adds	r3, #1
 800097e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000982:	4a3a      	ldr	r2, [pc, #232]	; (8000a6c <Uart_isr+0x1c8>)
 8000984:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	7b3a      	ldrb	r2, [r7, #12]
 8000994:	605a      	str	r2, [r3, #4]
    	return;
 8000996:	e059      	b.n	8000a4c <Uart_isr+0x1a8>
    	else if (huart == pc_uart){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a30      	ldr	r2, [pc, #192]	; (8000a5c <Uart_isr+0x1b8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d127      	bne.n	80009f0 <Uart_isr+0x14c>
        	if(tx_buffer2.head == tx_buffer2.tail)
 80009a0:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <Uart_isr+0x1cc>)
 80009a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80009a6:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <Uart_isr+0x1cc>)
 80009a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d108      	bne.n	80009c2 <Uart_isr+0x11e>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	68da      	ldr	r2, [r3, #12]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009be:	60da      	str	r2, [r3, #12]
    	return;
 80009c0:	e044      	b.n	8000a4c <Uart_isr+0x1a8>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80009c2:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <Uart_isr+0x1cc>)
 80009c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009c8:	4a29      	ldr	r2, [pc, #164]	; (8000a70 <Uart_isr+0x1cc>)
 80009ca:	5cd3      	ldrb	r3, [r2, r3]
 80009cc:	737b      	strb	r3, [r7, #13]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80009ce:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <Uart_isr+0x1cc>)
 80009d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009d4:	3301      	adds	r3, #1
 80009d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009da:	4a25      	ldr	r2, [pc, #148]	; (8000a70 <Uart_isr+0x1cc>)
 80009dc:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	7b7a      	ldrb	r2, [r7, #13]
 80009ec:	605a      	str	r2, [r3, #4]
    	return;
 80009ee:	e02d      	b.n	8000a4c <Uart_isr+0x1a8>
    	else if (huart == lora_uart){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <Uart_isr+0x1c0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d129      	bne.n	8000a4c <Uart_isr+0x1a8>
        	if(tx_buffer3.head == tx_buffer3.tail)
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <Uart_isr+0x1d0>)
 80009fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <Uart_isr+0x1d0>)
 8000a00:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d108      	bne.n	8000a1a <Uart_isr+0x176>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68da      	ldr	r2, [r3, #12]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a16:	60da      	str	r2, [r3, #12]
    	return;
 8000a18:	e018      	b.n	8000a4c <Uart_isr+0x1a8>
        	      unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <Uart_isr+0x1d0>)
 8000a1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <Uart_isr+0x1d0>)
 8000a22:	5cd3      	ldrb	r3, [r2, r3]
 8000a24:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer3.tail = (tx_buffer3.tail + 1) % UART_BUFFER_SIZE;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <Uart_isr+0x1d0>)
 8000a28:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a32:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <Uart_isr+0x1d0>)
 8000a34:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	7bba      	ldrb	r2, [r7, #14]
 8000a44:	605a      	str	r2, [r3, #4]
    	return;
 8000a46:	e001      	b.n	8000a4c <Uart_isr+0x1a8>
        return;
 8000a48:	bf00      	nop
 8000a4a:	e000      	b.n	8000a4e <Uart_isr+0x1aa>
    	return;
 8000a4c:	bf00      	nop
    }
}
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000e0c 	.word	0x20000e0c
 8000a58:	20000d78 	.word	0x20000d78
 8000a5c:	20000eac 	.word	0x20000eac
 8000a60:	20000d88 	.word	0x20000d88
 8000a64:	20000da4 	.word	0x20000da4
 8000a68:	20000d80 	.word	0x20000d80
 8000a6c:	2000029c 	.word	0x2000029c
 8000a70:	200006ac 	.word	0x200006ac
 8000a74:	20000abc 	.word	0x20000abc

08000a78 <TIM2_IRQHandler>:
volatile char lora_read[95]={0};
volatile uint8_t lora_count =0;

/* ---------------- Timers Interrupts ------------*/
void TIM2_IRQHandler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(TIM_SR_UIF);//timer2 clear flag
 8000a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a86:	f023 0301 	bic.w	r3, r3, #1
 8000a8a:	6113      	str	r3, [r2, #16]
	butonControl2 = 1; // buton-2's flag is high
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <TIM2_IRQHandler+0x24>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000d05 	.word	0x20000d05

08000aa0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(TIM_SR_UIF);//timer3 clear flag
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <TIM3_IRQHandler+0x20>)
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <TIM3_IRQHandler+0x20>)
 8000aaa:	f023 0301 	bic.w	r3, r3, #1
 8000aae:	6113      	str	r3, [r2, #16]
	butonControl = 1; // buton-1's flag is high
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <TIM3_IRQHandler+0x24>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40000400 	.word	0x40000400
 8000ac4:	20000d04 	.word	0x20000d04

08000ac8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
	TIM4->SR &= ~(TIM_SR_UIF);//timer4 clear flag
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <TIM4_IRQHandler+0x20>)
 8000ace:	691b      	ldr	r3, [r3, #16]
 8000ad0:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <TIM4_IRQHandler+0x20>)
 8000ad2:	f023 0301 	bic.w	r3, r3, #1
 8000ad6:	6113      	str	r3, [r2, #16]
	butonControl3 = 1;  // buton-3's flag is high
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <TIM4_IRQHandler+0x24>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40000800 	.word	0x40000800
 8000aec:	20000d06 	.word	0x20000d06

08000af0 <main>:
/* -------------------------------------------------*/

int main(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  HAL_Init();
 8000af4:	f000 ffe6 	bl	8001ac4 <HAL_Init>
  SystemClock_Config();
 8000af8:	f000 fa6a 	bl	8000fd0 <SystemClock_Config>

  MX_GPIO_Init();
 8000afc:	f000 fb28 	bl	8001150 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b00:	f000 faa8 	bl	8001054 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b04:	f000 fad0 	bl	80010a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b08:	f000 faf8 	bl	80010fc <MX_USART3_UART_Init>

  console(); // Entering wifi ssid and psk for user
 8000b0c:	f000 f940 	bl	8000d90 <console>

  while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3))); // wait for LoRa module's AUX pin
 8000b10:	bf00      	nop
 8000b12:	2108      	movs	r1, #8
 8000b14:	4885      	ldr	r0, [pc, #532]	; (8000d2c <main+0x23c>)
 8000b16:	f001 faed 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f8      	beq.n	8000b12 <main+0x22>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //M0 = 0 NORMAL MODE
 8000b20:	2200      	movs	r2, #0
 8000b22:	2140      	movs	r1, #64	; 0x40
 8000b24:	4882      	ldr	r0, [pc, #520]	; (8000d30 <main+0x240>)
 8000b26:	f001 fafc 	bl	8002122 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //M1 = 0
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	4880      	ldr	r0, [pc, #512]	; (8000d30 <main+0x240>)
 8000b30:	f001 faf7 	bl	8002122 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000b34:	200a      	movs	r0, #10
 8000b36:	f001 f827 	bl	8001b88 <HAL_Delay>
  /* Setting up and enabling timers */
  /* -------------*/
  timer2_init();
 8000b3a:	f000 fd39 	bl	80015b0 <timer2_init>
  timer3_init();
 8000b3e:	f000 fdc7 	bl	80016d0 <timer3_init>
  timer4_init();
 8000b42:	f000 fe53 	bl	80017ec <timer4_init>
  timer4_enable();
 8000b46:	f000 fe7d 	bl	8001844 <timer4_enable>
  timer3_enable();
 8000b4a:	f000 fded 	bl	8001728 <timer3_enable>
  timer2_enable();
 8000b4e:	f000 fd5d 	bl	800160c <timer2_enable>
  while (1)
  {

	  /* Is there any data coming to the Tx pin of the LoRa module? */
	  /* ------------------------------------------------------------ */
	  if(IsDataAvailable(lora_uart))
 8000b52:	4878      	ldr	r0, [pc, #480]	; (8000d34 <main+0x244>)
 8000b54:	f7ff fdaa 	bl	80006ac <IsDataAvailable>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d02d      	beq.n	8000bba <main+0xca>
	  {
		  do
		  {
			  while(!(IsDataAvailable(lora_uart)));
 8000b5e:	bf00      	nop
 8000b60:	4874      	ldr	r0, [pc, #464]	; (8000d34 <main+0x244>)
 8000b62:	f7ff fda3 	bl	80006ac <IsDataAvailable>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0f9      	beq.n	8000b60 <main+0x70>
			  lora_read[lora_count] = Uart_read(lora_uart); // Reading incoming data
 8000b6c:	4871      	ldr	r0, [pc, #452]	; (8000d34 <main+0x244>)
 8000b6e:	f7ff fc79 	bl	8000464 <Uart_read>
 8000b72:	4601      	mov	r1, r0
 8000b74:	4b70      	ldr	r3, [pc, #448]	; (8000d38 <main+0x248>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	b2c9      	uxtb	r1, r1
 8000b7e:	4b6f      	ldr	r3, [pc, #444]	; (8000d3c <main+0x24c>)
 8000b80:	5499      	strb	r1, [r3, r2]
			  Uart_write(lora_read[lora_count], wifi_uart); // Writing incoming data to wifi module
 8000b82:	4b6d      	ldr	r3, [pc, #436]	; (8000d38 <main+0x248>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6c      	ldr	r3, [pc, #432]	; (8000d3c <main+0x24c>)
 8000b8c:	5c9b      	ldrb	r3, [r3, r2]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	496b      	ldr	r1, [pc, #428]	; (8000d40 <main+0x250>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fcf0 	bl	8000578 <Uart_write>
			  lora_count++;
 8000b98:	4b67      	ldr	r3, [pc, #412]	; (8000d38 <main+0x248>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b65      	ldr	r3, [pc, #404]	; (8000d38 <main+0x248>)
 8000ba4:	701a      	strb	r2, [r3, #0]
		  }
		  while(!(Look_for("3000\r", lora_read))); // Check port
 8000ba6:	4965      	ldr	r1, [pc, #404]	; (8000d3c <main+0x24c>)
 8000ba8:	4866      	ldr	r0, [pc, #408]	; (8000d44 <main+0x254>)
 8000baa:	f7ff fb5f 	bl	800026c <Look_for>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0d4      	beq.n	8000b5e <main+0x6e>
		  lora_count=0;
 8000bb4:	4b60      	ldr	r3, [pc, #384]	; (8000d38 <main+0x248>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
	  }
	  /* ------------------------ End ----------------------------- */


	  /* ---------Did the user press the button-1? ----------*/
	  if(butonControl)
 8000bba:	4b63      	ldr	r3, [pc, #396]	; (8000d48 <main+0x258>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d037      	beq.n	8000c34 <main+0x144>
	  {
		 timer3_disable(); // Disable timer counting
 8000bc4:	f000 fdbe 	bl	8001744 <timer3_disable>
		 butonControl = 0; // flag is low for recounting
 8000bc8:	4b5f      	ldr	r3, [pc, #380]	; (8000d48 <main+0x258>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]

		 Uart_sendstring("AT+S.HTTPGET=192.168.1.30,/button/get,3000\r",wifi_uart); // Send a request
 8000bce:	495c      	ldr	r1, [pc, #368]	; (8000d40 <main+0x250>)
 8000bd0:	485e      	ldr	r0, [pc, #376]	; (8000d4c <main+0x25c>)
 8000bd2:	f7ff fdf4 	bl	80007be <Uart_sendstring>
		 Get_after("HTTP/1.1",20, &buffertoButon1, wifi_uart); // If the incoming response starts with HTTP, put it in the buffer
 8000bd6:	4b5a      	ldr	r3, [pc, #360]	; (8000d40 <main+0x250>)
 8000bd8:	4a5d      	ldr	r2, [pc, #372]	; (8000d50 <main+0x260>)
 8000bda:	2114      	movs	r1, #20
 8000bdc:	485d      	ldr	r0, [pc, #372]	; (8000d54 <main+0x264>)
 8000bde:	f7ff fdbf 	bl	8000760 <Get_after>
		  if((Look_for("201",buffertoButon1) == 1)) // If there is 201 in the answer, let node-1 start the process
 8000be2:	495b      	ldr	r1, [pc, #364]	; (8000d50 <main+0x260>)
 8000be4:	485c      	ldr	r0, [pc, #368]	; (8000d58 <main+0x268>)
 8000be6:	f7ff fb41 	bl	800026c <Look_for>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d10c      	bne.n	8000c0a <main+0x11a>
		  {
			Uart_sendstring("one-run", lora_uart); // send the task
 8000bf0:	4950      	ldr	r1, [pc, #320]	; (8000d34 <main+0x244>)
 8000bf2:	485a      	ldr	r0, [pc, #360]	; (8000d5c <main+0x26c>)
 8000bf4:	f7ff fde3 	bl	80007be <Uart_sendstring>
			while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)));// wait AUX=1
 8000bf8:	bf00      	nop
 8000bfa:	2108      	movs	r1, #8
 8000bfc:	484b      	ldr	r0, [pc, #300]	; (8000d2c <main+0x23c>)
 8000bfe:	f001 fa79 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0f8      	beq.n	8000bfa <main+0x10a>
 8000c08:	e012      	b.n	8000c30 <main+0x140>

		  }
		  else if((Look_for("202",buffertoButon1) == 1)) // If there is 202 in the answer, let node-1 stop the process
 8000c0a:	4951      	ldr	r1, [pc, #324]	; (8000d50 <main+0x260>)
 8000c0c:	4854      	ldr	r0, [pc, #336]	; (8000d60 <main+0x270>)
 8000c0e:	f7ff fb2d 	bl	800026c <Look_for>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d10b      	bne.n	8000c30 <main+0x140>
		  {

			Uart_sendstring("one-stop", lora_uart); // send the task
 8000c18:	4946      	ldr	r1, [pc, #280]	; (8000d34 <main+0x244>)
 8000c1a:	4852      	ldr	r0, [pc, #328]	; (8000d64 <main+0x274>)
 8000c1c:	f7ff fdcf 	bl	80007be <Uart_sendstring>
			while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)));// wait AUX=1
 8000c20:	bf00      	nop
 8000c22:	2108      	movs	r1, #8
 8000c24:	4841      	ldr	r0, [pc, #260]	; (8000d2c <main+0x23c>)
 8000c26:	f001 fa65 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f8      	beq.n	8000c22 <main+0x132>
		  }
		  timer3_enable(); // Enable timer counting
 8000c30:	f000 fd7a 	bl	8001728 <timer3_enable>
	  }
	 /* ------------------------------ End Buton-1 ------------------------------------------*/

		  /* ----------------------- Did the user press the button-2? ---------------------------*/
	  if(butonControl2)
 8000c34:	4b4c      	ldr	r3, [pc, #304]	; (8000d68 <main+0x278>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d037      	beq.n	8000cae <main+0x1be>
	  {
		  timer2_disable(); // Disable timer counting
 8000c3e:	f000 fcf3 	bl	8001628 <timer2_disable>
		  butonControl2 = 0; // flag is low for recounting
 8000c42:	4b49      	ldr	r3, [pc, #292]	; (8000d68 <main+0x278>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
		  Uart_sendstring("AT+S.HTTPGET=192.168.1.30,/button/get2,3000\r",wifi_uart); // Send a request
 8000c48:	493d      	ldr	r1, [pc, #244]	; (8000d40 <main+0x250>)
 8000c4a:	4848      	ldr	r0, [pc, #288]	; (8000d6c <main+0x27c>)
 8000c4c:	f7ff fdb7 	bl	80007be <Uart_sendstring>
		  Get_after("HTTP/1.1",20, &buffertoButon2, wifi_uart); // If the incoming response starts with HTTP, put it in the buffer
 8000c50:	4b3b      	ldr	r3, [pc, #236]	; (8000d40 <main+0x250>)
 8000c52:	4a47      	ldr	r2, [pc, #284]	; (8000d70 <main+0x280>)
 8000c54:	2114      	movs	r1, #20
 8000c56:	483f      	ldr	r0, [pc, #252]	; (8000d54 <main+0x264>)
 8000c58:	f7ff fd82 	bl	8000760 <Get_after>
		  if((Look_for("201",buffertoButon2) == 1)) // If there is 201 in the answer, let node-2 start the process
 8000c5c:	4944      	ldr	r1, [pc, #272]	; (8000d70 <main+0x280>)
 8000c5e:	483e      	ldr	r0, [pc, #248]	; (8000d58 <main+0x268>)
 8000c60:	f7ff fb04 	bl	800026c <Look_for>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d10c      	bne.n	8000c84 <main+0x194>
		  {
			  Uart_sendstring("two-run", lora_uart); // send the task
 8000c6a:	4932      	ldr	r1, [pc, #200]	; (8000d34 <main+0x244>)
 8000c6c:	4841      	ldr	r0, [pc, #260]	; (8000d74 <main+0x284>)
 8000c6e:	f7ff fda6 	bl	80007be <Uart_sendstring>
			  while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)));// wait AUX=1
 8000c72:	bf00      	nop
 8000c74:	2108      	movs	r1, #8
 8000c76:	482d      	ldr	r0, [pc, #180]	; (8000d2c <main+0x23c>)
 8000c78:	f001 fa3c 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f8      	beq.n	8000c74 <main+0x184>
 8000c82:	e012      	b.n	8000caa <main+0x1ba>

		  }
		  else if((Look_for("202",buffertoButon2) == 1)) // If there is 202 in the answer, let node-2 stop the process
 8000c84:	493a      	ldr	r1, [pc, #232]	; (8000d70 <main+0x280>)
 8000c86:	4836      	ldr	r0, [pc, #216]	; (8000d60 <main+0x270>)
 8000c88:	f7ff faf0 	bl	800026c <Look_for>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d10b      	bne.n	8000caa <main+0x1ba>
		  {

			  Uart_sendstring("two-stop", lora_uart); // send the task
 8000c92:	4928      	ldr	r1, [pc, #160]	; (8000d34 <main+0x244>)
 8000c94:	4838      	ldr	r0, [pc, #224]	; (8000d78 <main+0x288>)
 8000c96:	f7ff fd92 	bl	80007be <Uart_sendstring>
			  while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)));// wait AUX=1
 8000c9a:	bf00      	nop
 8000c9c:	2108      	movs	r1, #8
 8000c9e:	4823      	ldr	r0, [pc, #140]	; (8000d2c <main+0x23c>)
 8000ca0:	f001 fa28 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f8      	beq.n	8000c9c <main+0x1ac>
		  }
		  timer2_enable(); // Enable timer counting
 8000caa:	f000 fcaf 	bl	800160c <timer2_enable>
	  }
	  /* -------------------------- End Buton-2  -------------------------------- */


	  /* ----------------------- Did the user press the button-3? ---------------------------*/
	 if(butonControl3)
 8000cae:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <main+0x28c>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f43f af4c 	beq.w	8000b52 <main+0x62>
	  {
		  timer4_disable(); // Disable timer counting
 8000cba:	f000 fdd1 	bl	8001860 <timer4_disable>
		  butonControl3 = 0; // flag is low for recounting
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <main+0x28c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
		  Uart_sendstring("AT+S.HTTPGET=192.168.1.30,/button/get3,3000\r",wifi_uart); // Send a request
 8000cc4:	491e      	ldr	r1, [pc, #120]	; (8000d40 <main+0x250>)
 8000cc6:	482e      	ldr	r0, [pc, #184]	; (8000d80 <main+0x290>)
 8000cc8:	f7ff fd79 	bl	80007be <Uart_sendstring>
		  Get_after("HTTP/1.1",20, &buffertoButon3, wifi_uart); // If the incoming response starts with HTTP, put it in the buffer
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <main+0x250>)
 8000cce:	4a2d      	ldr	r2, [pc, #180]	; (8000d84 <main+0x294>)
 8000cd0:	2114      	movs	r1, #20
 8000cd2:	4820      	ldr	r0, [pc, #128]	; (8000d54 <main+0x264>)
 8000cd4:	f7ff fd44 	bl	8000760 <Get_after>
		  if((Look_for("201",buffertoButon3) == 1)) // If there is 201 in the answer, let node-1 start the process
 8000cd8:	492a      	ldr	r1, [pc, #168]	; (8000d84 <main+0x294>)
 8000cda:	481f      	ldr	r0, [pc, #124]	; (8000d58 <main+0x268>)
 8000cdc:	f7ff fac6 	bl	800026c <Look_for>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d10c      	bne.n	8000d00 <main+0x210>
		  {
		  	Uart_sendstring("three-on", lora_uart); // send the task
 8000ce6:	4913      	ldr	r1, [pc, #76]	; (8000d34 <main+0x244>)
 8000ce8:	4827      	ldr	r0, [pc, #156]	; (8000d88 <main+0x298>)
 8000cea:	f7ff fd68 	bl	80007be <Uart_sendstring>
		  	while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)));// wait AUX=1
 8000cee:	bf00      	nop
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <main+0x23c>)
 8000cf4:	f001 f9fe 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f8      	beq.n	8000cf0 <main+0x200>
 8000cfe:	e012      	b.n	8000d26 <main+0x236>
		  }
		  else if((Look_for("202",buffertoButon3) == 1)) // If there is 202 in the answer, let node-1 stop the process
 8000d00:	4920      	ldr	r1, [pc, #128]	; (8000d84 <main+0x294>)
 8000d02:	4817      	ldr	r0, [pc, #92]	; (8000d60 <main+0x270>)
 8000d04:	f7ff fab2 	bl	800026c <Look_for>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d10b      	bne.n	8000d26 <main+0x236>
		  {
			Uart_sendstring("three-off", lora_uart); // send the task
 8000d0e:	4909      	ldr	r1, [pc, #36]	; (8000d34 <main+0x244>)
 8000d10:	481e      	ldr	r0, [pc, #120]	; (8000d8c <main+0x29c>)
 8000d12:	f7ff fd54 	bl	80007be <Uart_sendstring>
		  	while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)));// wait AUX=1
 8000d16:	bf00      	nop
 8000d18:	2108      	movs	r1, #8
 8000d1a:	4804      	ldr	r0, [pc, #16]	; (8000d2c <main+0x23c>)
 8000d1c:	f001 f9ea 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f8      	beq.n	8000d18 <main+0x228>
		  }
		  timer4_enable(); // Enable timer counting
 8000d26:	f000 fd8d 	bl	8001844 <timer4_enable>
	  if(IsDataAvailable(lora_uart))
 8000d2a:	e712      	b.n	8000b52 <main+0x62>
 8000d2c:	40011000 	.word	0x40011000
 8000d30:	40010800 	.word	0x40010800
 8000d34:	20000da4 	.word	0x20000da4
 8000d38:	20000d67 	.word	0x20000d67
 8000d3c:	20000d08 	.word	0x20000d08
 8000d40:	20000e0c 	.word	0x20000e0c
 8000d44:	0800344c 	.word	0x0800344c
 8000d48:	20000d04 	.word	0x20000d04
 8000d4c:	08003454 	.word	0x08003454
 8000d50:	20000df8 	.word	0x20000df8
 8000d54:	08003480 	.word	0x08003480
 8000d58:	0800348c 	.word	0x0800348c
 8000d5c:	08003490 	.word	0x08003490
 8000d60:	08003498 	.word	0x08003498
 8000d64:	0800349c 	.word	0x0800349c
 8000d68:	20000d05 	.word	0x20000d05
 8000d6c:	080034a8 	.word	0x080034a8
 8000d70:	20000d8c 	.word	0x20000d8c
 8000d74:	080034d8 	.word	0x080034d8
 8000d78:	080034e0 	.word	0x080034e0
 8000d7c:	20000d06 	.word	0x20000d06
 8000d80:	080034ec 	.word	0x080034ec
 8000d84:	20000de4 	.word	0x20000de4
 8000d88:	0800351c 	.word	0x0800351c
 8000d8c:	08003528 	.word	0x08003528

08000d90 <console>:
  }
  /* USER CODE END 3 */
}

void console(void)
{
 8000d90:	b598      	push	{r3, r4, r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	  Ringbuf_init();
 8000d94:	f7ff f9e2 	bl	800015c <Ringbuf_init>
	  HAL_Delay(100);
 8000d98:	2064      	movs	r0, #100	; 0x64
 8000d9a:	f000 fef5 	bl	8001b88 <HAL_Delay>
	  Uart_sendstring("\r\n\n/********************************************************\n",pc_uart);
 8000d9e:	4976      	ldr	r1, [pc, #472]	; (8000f78 <console+0x1e8>)
 8000da0:	4876      	ldr	r0, [pc, #472]	; (8000f7c <console+0x1ec>)
 8000da2:	f7ff fd0c 	bl	80007be <Uart_sendstring>
	  Uart_sendstring("\r *                                                      *\n",pc_uart);
 8000da6:	4974      	ldr	r1, [pc, #464]	; (8000f78 <console+0x1e8>)
 8000da8:	4875      	ldr	r0, [pc, #468]	; (8000f80 <console+0x1f0>)
 8000daa:	f7ff fd08 	bl	80007be <Uart_sendstring>
	  Uart_sendstring("\r * 			 Solar Powered              	*\n",pc_uart);
 8000dae:	4972      	ldr	r1, [pc, #456]	; (8000f78 <console+0x1e8>)
 8000db0:	4874      	ldr	r0, [pc, #464]	; (8000f84 <console+0x1f4>)
 8000db2:	f7ff fd04 	bl	80007be <Uart_sendstring>
	  Uart_sendstring("\r * 		LoRa Based Smart Agriculture            *\n",pc_uart);
 8000db6:	4970      	ldr	r1, [pc, #448]	; (8000f78 <console+0x1e8>)
 8000db8:	4873      	ldr	r0, [pc, #460]	; (8000f88 <console+0x1f8>)
 8000dba:	f7ff fd00 	bl	80007be <Uart_sendstring>
	  Uart_sendstring("\r * 			  IoT Project                   *\n",pc_uart);
 8000dbe:	496e      	ldr	r1, [pc, #440]	; (8000f78 <console+0x1e8>)
 8000dc0:	4872      	ldr	r0, [pc, #456]	; (8000f8c <console+0x1fc>)
 8000dc2:	f7ff fcfc 	bl	80007be <Uart_sendstring>
	  Uart_sendstring("\r *                                                      *\n",pc_uart);
 8000dc6:	496c      	ldr	r1, [pc, #432]	; (8000f78 <console+0x1e8>)
 8000dc8:	486d      	ldr	r0, [pc, #436]	; (8000f80 <console+0x1f0>)
 8000dca:	f7ff fcf8 	bl	80007be <Uart_sendstring>
	  Uart_sendstring("\r *******************************************************\n",pc_uart);
 8000dce:	496a      	ldr	r1, [pc, #424]	; (8000f78 <console+0x1e8>)
 8000dd0:	486f      	ldr	r0, [pc, #444]	; (8000f90 <console+0x200>)
 8000dd2:	f7ff fcf4 	bl	80007be <Uart_sendstring>

	  Uart_sendstring("\r\nDo you want to setup SSID?(y/n):", pc_uart);
 8000dd6:	4968      	ldr	r1, [pc, #416]	; (8000f78 <console+0x1e8>)
 8000dd8:	486e      	ldr	r0, [pc, #440]	; (8000f94 <console+0x204>)
 8000dda:	f7ff fcf0 	bl	80007be <Uart_sendstring>
	  while(!(IsDataAvailable(&huart2)));
 8000dde:	bf00      	nop
 8000de0:	4865      	ldr	r0, [pc, #404]	; (8000f78 <console+0x1e8>)
 8000de2:	f7ff fc63 	bl	80006ac <IsDataAvailable>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0f9      	beq.n	8000de0 <console+0x50>
	  console_input[0] = Uart_read(pc_uart);
 8000dec:	4862      	ldr	r0, [pc, #392]	; (8000f78 <console+0x1e8>)
 8000dee:	f7ff fb39 	bl	8000464 <Uart_read>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4b68      	ldr	r3, [pc, #416]	; (8000f98 <console+0x208>)
 8000df8:	701a      	strb	r2, [r3, #0]
	  Uart_write(console_input[0], pc_uart);
 8000dfa:	4b67      	ldr	r3, [pc, #412]	; (8000f98 <console+0x208>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	495d      	ldr	r1, [pc, #372]	; (8000f78 <console+0x1e8>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fbb8 	bl	8000578 <Uart_write>
	  Uart_sendstring("\r\n", pc_uart);
 8000e08:	495b      	ldr	r1, [pc, #364]	; (8000f78 <console+0x1e8>)
 8000e0a:	4864      	ldr	r0, [pc, #400]	; (8000f9c <console+0x20c>)
 8000e0c:	f7ff fcd7 	bl	80007be <Uart_sendstring>
	  if(console_input[0]=='y')
 8000e10:	4b61      	ldr	r3, [pc, #388]	; (8000f98 <console+0x208>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b79      	cmp	r3, #121	; 0x79
 8000e18:	d169      	bne.n	8000eee <console+0x15e>
	  {
	  	Uart_sendstring("Enter the SSID:", pc_uart);
 8000e1a:	4957      	ldr	r1, [pc, #348]	; (8000f78 <console+0x1e8>)
 8000e1c:	4860      	ldr	r0, [pc, #384]	; (8000fa0 <console+0x210>)
 8000e1e:	f7ff fcce 	bl	80007be <Uart_sendstring>
	  	while(console_count<36)
 8000e22:	e01f      	b.n	8000e64 <console+0xd4>
	  	{
	  		while(!(IsDataAvailable(pc_uart)));
 8000e24:	bf00      	nop
 8000e26:	4854      	ldr	r0, [pc, #336]	; (8000f78 <console+0x1e8>)
 8000e28:	f7ff fc40 	bl	80006ac <IsDataAvailable>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f9      	beq.n	8000e26 <console+0x96>
	  		console_ssid[console_count] = Uart_read(pc_uart);
 8000e32:	4851      	ldr	r0, [pc, #324]	; (8000f78 <console+0x1e8>)
 8000e34:	f7ff fb16 	bl	8000464 <Uart_read>
 8000e38:	4601      	mov	r1, r0
 8000e3a:	4b5a      	ldr	r3, [pc, #360]	; (8000fa4 <console+0x214>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	b2c9      	uxtb	r1, r1
 8000e44:	4b58      	ldr	r3, [pc, #352]	; (8000fa8 <console+0x218>)
 8000e46:	5499      	strb	r1, [r3, r2]
	  		console_count++;
 8000e48:	4b56      	ldr	r3, [pc, #344]	; (8000fa4 <console+0x214>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	3301      	adds	r3, #1
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b54      	ldr	r3, [pc, #336]	; (8000fa4 <console+0x214>)
 8000e54:	701a      	strb	r2, [r3, #0]
	  		if(Look_for("\r\n",console_ssid) == 1)
 8000e56:	4954      	ldr	r1, [pc, #336]	; (8000fa8 <console+0x218>)
 8000e58:	4850      	ldr	r0, [pc, #320]	; (8000f9c <console+0x20c>)
 8000e5a:	f7ff fa07 	bl	800026c <Look_for>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d005      	beq.n	8000e70 <console+0xe0>
	  	while(console_count<36)
 8000e64:	4b4f      	ldr	r3, [pc, #316]	; (8000fa4 <console+0x214>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b23      	cmp	r3, #35	; 0x23
 8000e6c:	d9da      	bls.n	8000e24 <console+0x94>
 8000e6e:	e000      	b.n	8000e72 <console+0xe2>
	  		{
	  			break;
 8000e70:	bf00      	nop
	  		}
	  	}
	  	Uart_sendstring(console_ssid, &huart2);
 8000e72:	4941      	ldr	r1, [pc, #260]	; (8000f78 <console+0x1e8>)
 8000e74:	484c      	ldr	r0, [pc, #304]	; (8000fa8 <console+0x218>)
 8000e76:	f7ff fca2 	bl	80007be <Uart_sendstring>
	  	HAL_Delay(10);
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	f000 fe84 	bl	8001b88 <HAL_Delay>
	  	console_count=0;
 8000e80:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <console+0x214>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
	  	Uart_sendstring("Enter the password:", pc_uart);
 8000e86:	493c      	ldr	r1, [pc, #240]	; (8000f78 <console+0x1e8>)
 8000e88:	4848      	ldr	r0, [pc, #288]	; (8000fac <console+0x21c>)
 8000e8a:	f7ff fc98 	bl	80007be <Uart_sendstring>
	    while(console_count<19)
 8000e8e:	e01f      	b.n	8000ed0 <console+0x140>
	  	{
	    	while(!(IsDataAvailable(pc_uart)));
 8000e90:	bf00      	nop
 8000e92:	4839      	ldr	r0, [pc, #228]	; (8000f78 <console+0x1e8>)
 8000e94:	f7ff fc0a 	bl	80006ac <IsDataAvailable>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f9      	beq.n	8000e92 <console+0x102>
	  		console_psk[console_count] = Uart_read(pc_uart);
 8000e9e:	4836      	ldr	r0, [pc, #216]	; (8000f78 <console+0x1e8>)
 8000ea0:	f7ff fae0 	bl	8000464 <Uart_read>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	4b3f      	ldr	r3, [pc, #252]	; (8000fa4 <console+0x214>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	b2c9      	uxtb	r1, r1
 8000eb0:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <console+0x220>)
 8000eb2:	5499      	strb	r1, [r3, r2]
	  		console_count++;
 8000eb4:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <console+0x214>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <console+0x214>)
 8000ec0:	701a      	strb	r2, [r3, #0]
	  		if(Look_for("\r\n",console_psk) == 1)
 8000ec2:	493b      	ldr	r1, [pc, #236]	; (8000fb0 <console+0x220>)
 8000ec4:	4835      	ldr	r0, [pc, #212]	; (8000f9c <console+0x20c>)
 8000ec6:	f7ff f9d1 	bl	800026c <Look_for>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d005      	beq.n	8000edc <console+0x14c>
	    while(console_count<19)
 8000ed0:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <console+0x214>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b12      	cmp	r3, #18
 8000ed8:	d9da      	bls.n	8000e90 <console+0x100>
 8000eda:	e000      	b.n	8000ede <console+0x14e>
	  		 {
	  			break;
 8000edc:	bf00      	nop
	  		  }
	  	}
	  	Uart_sendstring(console_psk, &huart2);
 8000ede:	4926      	ldr	r1, [pc, #152]	; (8000f78 <console+0x1e8>)
 8000ee0:	4833      	ldr	r0, [pc, #204]	; (8000fb0 <console+0x220>)
 8000ee2:	f7ff fc6c 	bl	80007be <Uart_sendstring>
	  	console_count=0;
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <console+0x214>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	e035      	b.n	8000f5a <console+0x1ca>

	  	}
	  	else
	  	{
	  		Uart_sendstring("\r\n\nModule will connect with default settings.", pc_uart);
 8000eee:	4922      	ldr	r1, [pc, #136]	; (8000f78 <console+0x1e8>)
 8000ef0:	4830      	ldr	r0, [pc, #192]	; (8000fb4 <console+0x224>)
 8000ef2:	f7ff fc64 	bl	80007be <Uart_sendstring>
	  		memcpy(console_ssid, (const char*)ssid, strlen((char*)ssid));
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <console+0x228>)
 8000ef8:	681c      	ldr	r4, [r3, #0]
 8000efa:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <console+0x228>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff f924 	bl	800014c <strlen>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	4621      	mov	r1, r4
 8000f0a:	4827      	ldr	r0, [pc, #156]	; (8000fa8 <console+0x218>)
 8000f0c:	f001 fe42 	bl	8002b94 <memcpy>
	  		memcpy(console_psk, (const char*)seckey, strlen((char*)seckey));
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <console+0x22c>)
 8000f12:	681c      	ldr	r4, [r3, #0]
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <console+0x22c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f917 	bl	800014c <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	4621      	mov	r1, r4
 8000f24:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <console+0x220>)
 8000f26:	f001 fe35 	bl	8002b94 <memcpy>
	  		Uart_sendstring("\n", pc_uart);
 8000f2a:	4913      	ldr	r1, [pc, #76]	; (8000f78 <console+0x1e8>)
 8000f2c:	4824      	ldr	r0, [pc, #144]	; (8000fc0 <console+0x230>)
 8000f2e:	f7ff fc46 	bl	80007be <Uart_sendstring>
	  		Uart_sendstring("SSID: ", pc_uart);
 8000f32:	4911      	ldr	r1, [pc, #68]	; (8000f78 <console+0x1e8>)
 8000f34:	4823      	ldr	r0, [pc, #140]	; (8000fc4 <console+0x234>)
 8000f36:	f7ff fc42 	bl	80007be <Uart_sendstring>
	  		Uart_sendstring(console_ssid, &huart2);
 8000f3a:	490f      	ldr	r1, [pc, #60]	; (8000f78 <console+0x1e8>)
 8000f3c:	481a      	ldr	r0, [pc, #104]	; (8000fa8 <console+0x218>)
 8000f3e:	f7ff fc3e 	bl	80007be <Uart_sendstring>
	  		Uart_sendstring("\n", pc_uart);
 8000f42:	490d      	ldr	r1, [pc, #52]	; (8000f78 <console+0x1e8>)
 8000f44:	481e      	ldr	r0, [pc, #120]	; (8000fc0 <console+0x230>)
 8000f46:	f7ff fc3a 	bl	80007be <Uart_sendstring>
	  		Uart_sendstring("Password: ", pc_uart);
 8000f4a:	490b      	ldr	r1, [pc, #44]	; (8000f78 <console+0x1e8>)
 8000f4c:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <console+0x238>)
 8000f4e:	f7ff fc36 	bl	80007be <Uart_sendstring>
	  		Uart_sendstring(console_psk, &huart2);
 8000f52:	4909      	ldr	r1, [pc, #36]	; (8000f78 <console+0x1e8>)
 8000f54:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <console+0x220>)
 8000f56:	f7ff fc32 	bl	80007be <Uart_sendstring>
	  	 }
	  	 wifi_Init(console_ssid,console_psk);
 8000f5a:	4915      	ldr	r1, [pc, #84]	; (8000fb0 <console+0x220>)
 8000f5c:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <console+0x218>)
 8000f5e:	f000 fc8d 	bl	800187c <wifi_Init>
	  	 HAL_Delay(2000);
 8000f62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f66:	f000 fe0f 	bl	8001b88 <HAL_Delay>
	  	 Uart_sendstring("\nReady..",pc_uart);
 8000f6a:	4903      	ldr	r1, [pc, #12]	; (8000f78 <console+0x1e8>)
 8000f6c:	4817      	ldr	r0, [pc, #92]	; (8000fcc <console+0x23c>)
 8000f6e:	f7ff fc26 	bl	80007be <Uart_sendstring>
}
 8000f72:	bf00      	nop
 8000f74:	bd98      	pop	{r3, r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000eac 	.word	0x20000eac
 8000f7c:	08003534 	.word	0x08003534
 8000f80:	08003574 	.word	0x08003574
 8000f84:	080035b0 	.word	0x080035b0
 8000f88:	080035d8 	.word	0x080035d8
 8000f8c:	0800360c 	.word	0x0800360c
 8000f90:	08003638 	.word	0x08003638
 8000f94:	08003674 	.word	0x08003674
 8000f98:	20000da0 	.word	0x20000da0
 8000f9c:	08003698 	.word	0x08003698
 8000fa0:	0800369c 	.word	0x0800369c
 8000fa4:	20000cc4 	.word	0x20000cc4
 8000fa8:	20000cc8 	.word	0x20000cc8
 8000fac:	080036ac 	.word	0x080036ac
 8000fb0:	20000cf0 	.word	0x20000cf0
 8000fb4:	080036c0 	.word	0x080036c0
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	080036f0 	.word	0x080036f0
 8000fc4:	080036f4 	.word	0x080036f4
 8000fc8:	080036fc 	.word	0x080036fc
 8000fcc:	08003708 	.word	0x08003708

08000fd0 <SystemClock_Config>:
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b090      	sub	sp, #64	; 0x40
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0318 	add.w	r3, r7, #24
 8000fda:	2228      	movs	r2, #40	; 0x28
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fde6 	bl	8002bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffa:	2310      	movs	r3, #16
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001002:	2300      	movs	r3, #0
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001006:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0318 	add.w	r3, r7, #24
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f89f 	bl	8002154 <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800101c:	f000 f8f0 	bl	8001200 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	230f      	movs	r3, #15
 8001022:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001024:	2302      	movs	r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800102c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2102      	movs	r1, #2
 800103a:	4618      	mov	r0, r3
 800103c:	f001 fb0a 	bl	8002654 <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001046:	f000 f8db 	bl	8001200 <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3740      	adds	r7, #64	; 0x40
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_USART1_UART_Init+0x50>)
 800105c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800108c:	f001 fc7c 	bl	8002988 <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001096:	f000 f8b3 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000e0c 	.word	0x20000e0c
 80010a4:	40013800 	.word	0x40013800

080010a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <MX_USART2_UART_Init+0x50>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010e0:	f001 fc52 	bl	8002988 <HAL_UART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ea:	f000 f889 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000eac 	.word	0x20000eac
 80010f8:	40004400 	.word	0x40004400

080010fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_USART3_UART_Init+0x4c>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <MX_USART3_UART_Init+0x50>)
 8001104:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_USART3_UART_Init+0x4c>)
 8001108:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800110c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_USART3_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_USART3_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_USART3_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_USART3_UART_Init+0x4c>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_USART3_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_USART3_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_USART3_UART_Init+0x4c>)
 8001134:	f001 fc28 	bl	8002988 <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800113e:	f000 f85f 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000da4 	.word	0x20000da4
 800114c:	40004800 	.word	0x40004800

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <MX_GPIO_Init+0xa4>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <MX_GPIO_Init+0xa4>)
 800116a:	f043 0310 	orr.w	r3, r3, #16
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <MX_GPIO_Init+0xa4>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_GPIO_Init+0xa4>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <MX_GPIO_Init+0xa4>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_GPIO_Init+0xa4>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_GPIO_Init+0xa4>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a16      	ldr	r2, [pc, #88]	; (80011f4 <MX_GPIO_Init+0xa4>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_GPIO_Init+0xa4>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	21e0      	movs	r1, #224	; 0xe0
 80011b0:	4811      	ldr	r0, [pc, #68]	; (80011f8 <MX_GPIO_Init+0xa8>)
 80011b2:	f000 ffb6 	bl	8002122 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011b6:	2308      	movs	r3, #8
 80011b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <MX_GPIO_Init+0xac>)
 80011ca:	f000 fe0f 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011ce:	23e0      	movs	r3, #224	; 0xe0
 80011d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2302      	movs	r3, #2
 80011dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_GPIO_Init+0xa8>)
 80011e6:	f000 fe01 	bl	8001dec <HAL_GPIO_Init>

}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010800 	.word	0x40010800
 80011fc:	40011000 	.word	0x40011000

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	e7fe      	b.n	8001208 <Error_Handler+0x8>
	...

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_MspInit+0x5c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_MspInit+0x5c>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6193      	str	r3, [r2, #24]
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_MspInit+0x5c>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_MspInit+0x5c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_MspInit+0x5c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_MspInit+0x5c>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_MspInit+0x60>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_MspInit+0x60>)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	40021000 	.word	0x40021000
 800126c:	40010000 	.word	0x40010000

08001270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	; 0x30
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a5f      	ldr	r2, [pc, #380]	; (8001408 <HAL_UART_MspInit+0x198>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d13a      	bne.n	8001306 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001290:	4b5e      	ldr	r3, [pc, #376]	; (800140c <HAL_UART_MspInit+0x19c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a5d      	ldr	r2, [pc, #372]	; (800140c <HAL_UART_MspInit+0x19c>)
 8001296:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b5b      	ldr	r3, [pc, #364]	; (800140c <HAL_UART_MspInit+0x19c>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b58      	ldr	r3, [pc, #352]	; (800140c <HAL_UART_MspInit+0x19c>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a57      	ldr	r2, [pc, #348]	; (800140c <HAL_UART_MspInit+0x19c>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b55      	ldr	r3, [pc, #340]	; (800140c <HAL_UART_MspInit+0x19c>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	4619      	mov	r1, r3
 80012d4:	484e      	ldr	r0, [pc, #312]	; (8001410 <HAL_UART_MspInit+0x1a0>)
 80012d6:	f000 fd89 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4619      	mov	r1, r3
 80012ee:	4848      	ldr	r0, [pc, #288]	; (8001410 <HAL_UART_MspInit+0x1a0>)
 80012f0:	f000 fd7c 	bl	8001dec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2101      	movs	r1, #1
 80012f8:	2025      	movs	r0, #37	; 0x25
 80012fa:	f000 fd40 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012fe:	2025      	movs	r0, #37	; 0x25
 8001300:	f000 fd59 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001304:	e07c      	b.n	8001400 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a42      	ldr	r2, [pc, #264]	; (8001414 <HAL_UART_MspInit+0x1a4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d138      	bne.n	8001382 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001310:	4b3e      	ldr	r3, [pc, #248]	; (800140c <HAL_UART_MspInit+0x19c>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	4a3d      	ldr	r2, [pc, #244]	; (800140c <HAL_UART_MspInit+0x19c>)
 8001316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131a:	61d3      	str	r3, [r2, #28]
 800131c:	4b3b      	ldr	r3, [pc, #236]	; (800140c <HAL_UART_MspInit+0x19c>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b38      	ldr	r3, [pc, #224]	; (800140c <HAL_UART_MspInit+0x19c>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a37      	ldr	r2, [pc, #220]	; (800140c <HAL_UART_MspInit+0x19c>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b35      	ldr	r3, [pc, #212]	; (800140c <HAL_UART_MspInit+0x19c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001340:	2304      	movs	r3, #4
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	4619      	mov	r1, r3
 8001352:	482f      	ldr	r0, [pc, #188]	; (8001410 <HAL_UART_MspInit+0x1a0>)
 8001354:	f000 fd4a 	bl	8001dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001358:	2308      	movs	r3, #8
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4619      	mov	r1, r3
 800136a:	4829      	ldr	r0, [pc, #164]	; (8001410 <HAL_UART_MspInit+0x1a0>)
 800136c:	f000 fd3e 	bl	8001dec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2101      	movs	r1, #1
 8001374:	2026      	movs	r0, #38	; 0x26
 8001376:	f000 fd02 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800137a:	2026      	movs	r0, #38	; 0x26
 800137c:	f000 fd1b 	bl	8001db6 <HAL_NVIC_EnableIRQ>
}
 8001380:	e03e      	b.n	8001400 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a24      	ldr	r2, [pc, #144]	; (8001418 <HAL_UART_MspInit+0x1a8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d139      	bne.n	8001400 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <HAL_UART_MspInit+0x19c>)
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_UART_MspInit+0x19c>)
 8001392:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001396:	61d3      	str	r3, [r2, #28]
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_UART_MspInit+0x19c>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_UART_MspInit+0x19c>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a18      	ldr	r2, [pc, #96]	; (800140c <HAL_UART_MspInit+0x19c>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_UART_MspInit+0x19c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	4619      	mov	r1, r3
 80013d0:	4812      	ldr	r0, [pc, #72]	; (800141c <HAL_UART_MspInit+0x1ac>)
 80013d2:	f000 fd0b 	bl	8001dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	4619      	mov	r1, r3
 80013ea:	480c      	ldr	r0, [pc, #48]	; (800141c <HAL_UART_MspInit+0x1ac>)
 80013ec:	f000 fcfe 	bl	8001dec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2101      	movs	r1, #1
 80013f4:	2027      	movs	r0, #39	; 0x27
 80013f6:	f000 fcc2 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013fa:	2027      	movs	r0, #39	; 0x27
 80013fc:	f000 fcdb 	bl	8001db6 <HAL_NVIC_EnableIRQ>
}
 8001400:	bf00      	nop
 8001402:	3730      	adds	r7, #48	; 0x30
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40013800 	.word	0x40013800
 800140c:	40021000 	.word	0x40021000
 8001410:	40010800 	.word	0x40010800
 8001414:	40004400 	.word	0x40004400
 8001418:	40004800 	.word	0x40004800
 800141c:	40010c00 	.word	0x40010c00

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001466:	f000 fb73 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <USART1_IRQHandler+0x10>)
 8001476:	f7ff fa15 	bl	80008a4 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000e0c 	.word	0x20000e0c

08001484 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <USART2_IRQHandler+0x10>)
 800148a:	f7ff fa0b 	bl	80008a4 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
 // HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000eac 	.word	0x20000eac

08001498 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <USART3_IRQHandler+0x10>)
 800149e:	f7ff fa01 	bl	80008a4 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
 // HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000da4 	.word	0x20000da4

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f001 fb30 	bl	8002b40 <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20005000 	.word	0x20005000
 800150c:	00000400 	.word	0x00000400
 8001510:	20000d68 	.word	0x20000d68
 8001514:	20000f00 	.word	0x20000f00

08001518 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4906      	ldr	r1, [pc, #24]	; (8001558 <__NVIC_EnableIRQ+0x34>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100

0800155c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	; (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	; (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <timer2_init>:


#include "timer2.h"

void timer2_init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

	//Enable TIM2 clock
	__HAL_RCC_TIM2_CLK_ENABLE();
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <timer2_init+0x58>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <timer2_init+0x58>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	61d3      	str	r3, [r2, #28]
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <timer2_init+0x58>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

	//Timer clock = 64MHz / 64000= 1000Hz (1ms period)
	TIM2->PSC = 63999; // 16 bit PSC = 65335
 80015ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28

	// Reload in every 13 sec
	TIM2->ARR = 12999;
 80015d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015dc:	f243 22c7 	movw	r2, #12999	; 0x32c7
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer Update Interrupt
	TIM2->DIER |= TIM_DIER_UIE;
 80015e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn);
 80015f2:	201c      	movs	r0, #28
 80015f4:	f7ff ff96 	bl	8001524 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn,0);
 80015f8:	2100      	movs	r1, #0
 80015fa:	201c      	movs	r0, #28
 80015fc:	f7ff ffae 	bl	800155c <__NVIC_SetPriority>


}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000

0800160c <timer2_enable>:

	return cnt;
}

void timer2_enable(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	TIM2->CR1 |= TIM_CR1_CEN;
 8001610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <timer2_disable>:

void timer2_disable(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~(TIM_CR1_CEN);
 800162c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <__NVIC_EnableIRQ>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4906      	ldr	r1, [pc, #24]	; (8001678 <__NVIC_EnableIRQ+0x34>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <timer3_init>:
 *      Author: anilp
 */
#include "timer3.h"

void timer3_init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
	//Enable TIM2 clock
	__HAL_RCC_TIM3_CLK_ENABLE();
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <timer3_init+0x50>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <timer3_init+0x50>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <timer3_init+0x50>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

	//Timer clock = 64MHz / 64000= 1000Hz (1ms period)
	TIM3->PSC = 63999; // 16 bit PSC = 65335
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <timer3_init+0x54>)
 80016f0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28

	// Reload in every 11sec
	TIM3->ARR = 10999;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <timer3_init+0x54>)
 80016f8:	f642 22f7 	movw	r2, #10999	; 0x2af7
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer Update Interrupt
	TIM3->DIER |= TIM_DIER_UIE;
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <timer3_init+0x54>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <timer3_init+0x54>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM3_IRQn);
 800170a:	201d      	movs	r0, #29
 800170c:	f7ff ff9a 	bl	8001644 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn,0);
 8001710:	2100      	movs	r1, #0
 8001712:	201d      	movs	r0, #29
 8001714:	f7ff ffb2 	bl	800167c <__NVIC_SetPriority>


}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000
 8001724:	40000400 	.word	0x40000400

08001728 <timer3_enable>:

	return cnt;
}

void timer3_enable(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	TIM3->CR1 |= TIM_CR1_CEN;
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <timer3_enable+0x18>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a03      	ldr	r2, [pc, #12]	; (8001740 <timer3_enable+0x18>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40000400 	.word	0x40000400

08001744 <timer3_disable>:

void timer3_disable(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(TIM_CR1_CEN);
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <timer3_disable+0x18>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a03      	ldr	r2, [pc, #12]	; (800175c <timer3_disable+0x18>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	40000400 	.word	0x40000400

08001760 <__NVIC_EnableIRQ>:
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db0b      	blt.n	800178a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4906      	ldr	r1, [pc, #24]	; (8001794 <__NVIC_EnableIRQ+0x34>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 f202 	lsl.w	r2, r0, r2
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db0a      	blt.n	80017c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	490c      	ldr	r1, [pc, #48]	; (80017e4 <__NVIC_SetPriority+0x4c>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017c0:	e00a      	b.n	80017d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4908      	ldr	r1, [pc, #32]	; (80017e8 <__NVIC_SetPriority+0x50>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3b04      	subs	r3, #4
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	761a      	strb	r2, [r3, #24]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <timer4_init>:


#include "timer4.h"

void timer4_init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
	//Enable TIM4 clock
	__HAL_RCC_TIM4_CLK_ENABLE();
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <timer4_init+0x50>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a11      	ldr	r2, [pc, #68]	; (800183c <timer4_init+0x50>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <timer4_init+0x50>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

	//Timer clock = 64MHz / 64000= 1000Hz (1ms period)
	TIM4->PSC = 63999; // 16 bit PSC = 65335
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <timer4_init+0x54>)
 800180c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001810:	629a      	str	r2, [r3, #40]	; 0x28

	// Reload in every 13sec
	TIM4->ARR = 12999;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <timer4_init+0x54>)
 8001814:	f243 22c7 	movw	r2, #12999	; 0x32c7
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer Update Interrupt
	TIM4->DIER |= TIM_DIER_UIE;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <timer4_init+0x54>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <timer4_init+0x54>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM4_IRQn);
 8001826:	201e      	movs	r0, #30
 8001828:	f7ff ff9a 	bl	8001760 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM4_IRQn,1);
 800182c:	2101      	movs	r1, #1
 800182e:	201e      	movs	r0, #30
 8001830:	f7ff ffb2 	bl	8001798 <__NVIC_SetPriority>


}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40021000 	.word	0x40021000
 8001840:	40000800 	.word	0x40000800

08001844 <timer4_enable>:

	return cnt;
}

void timer4_enable(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
	TIM4->CR1 |= TIM_CR1_CEN;
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <timer4_enable+0x18>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a03      	ldr	r2, [pc, #12]	; (800185c <timer4_enable+0x18>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40000800 	.word	0x40000800

08001860 <timer4_disable>:

void timer4_disable(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(TIM_CR1_CEN);
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <timer4_disable+0x18>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a03      	ldr	r2, [pc, #12]	; (8001878 <timer4_disable+0x18>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	40000800 	.word	0x40000800

0800187c <wifi_Init>:

char buffer[20];


void wifi_Init (char *SSID, char *PASSWD)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b098      	sub	sp, #96	; 0x60
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init(); // initialization Uarts
 8001886:	f7fe fc69 	bl	800015c <Ringbuf_init>
	Uart_sendstring("AT&F\r", &huart1); //restore factory default settings
 800188a:	4967      	ldr	r1, [pc, #412]	; (8001a28 <wifi_Init+0x1ac>)
 800188c:	4867      	ldr	r0, [pc, #412]	; (8001a2c <wifi_Init+0x1b0>)
 800188e:	f7fe ff96 	bl	80007be <Uart_sendstring>
	while (!(Wait_for("\r\nOK\r\n", &huart1))); // wait for response
 8001892:	bf00      	nop
 8001894:	4964      	ldr	r1, [pc, #400]	; (8001a28 <wifi_Init+0x1ac>)
 8001896:	4866      	ldr	r0, [pc, #408]	; (8001a30 <wifi_Init+0x1b4>)
 8001898:	f7fe ffa8 	bl	80007ec <Wait_for>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f8      	beq.n	8001894 <wifi_Init+0x18>
	Uart_sendstring("\n restore factory default settings\n", pc_uart); //print to pc uart
 80018a2:	4964      	ldr	r1, [pc, #400]	; (8001a34 <wifi_Init+0x1b8>)
 80018a4:	4864      	ldr	r0, [pc, #400]	; (8001a38 <wifi_Init+0x1bc>)
 80018a6:	f7fe ff8a 	bl	80007be <Uart_sendstring>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	Uart_sendstring("AT+CFUN=1\r", wifi_uart); // resetting the wifi module
 80018aa:	495f      	ldr	r1, [pc, #380]	; (8001a28 <wifi_Init+0x1ac>)
 80018ac:	4863      	ldr	r0, [pc, #396]	; (8001a3c <wifi_Init+0x1c0>)
 80018ae:	f7fe ff86 	bl	80007be <Uart_sendstring>
	Uart_sendstring("\nRESETTING", pc_uart);
 80018b2:	4960      	ldr	r1, [pc, #384]	; (8001a34 <wifi_Init+0x1b8>)
 80018b4:	4862      	ldr	r0, [pc, #392]	; (8001a40 <wifi_Init+0x1c4>)
 80018b6:	f7fe ff82 	bl	80007be <Uart_sendstring>
	for (int i=0; i<5; i++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018be:	e00a      	b.n	80018d6 <wifi_Init+0x5a>
	{
		Uart_sendstring(".", pc_uart);
 80018c0:	495c      	ldr	r1, [pc, #368]	; (8001a34 <wifi_Init+0x1b8>)
 80018c2:	4860      	ldr	r0, [pc, #384]	; (8001a44 <wifi_Init+0x1c8>)
 80018c4:	f7fe ff7b 	bl	80007be <Uart_sendstring>
		HAL_Delay(1000);
 80018c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018cc:	f000 f95c 	bl	8001b88 <HAL_Delay>
	for (int i=0; i<5; i++)
 80018d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018d2:	3301      	adds	r3, #1
 80018d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018d8:	2b04      	cmp	r3, #4
 80018da:	ddf1      	ble.n	80018c0 <wifi_Init+0x44>
	}
	Uart_sendstring("AT\r", wifi_uart);// did the reset complete ?
 80018dc:	4952      	ldr	r1, [pc, #328]	; (8001a28 <wifi_Init+0x1ac>)
 80018de:	485a      	ldr	r0, [pc, #360]	; (8001a48 <wifi_Init+0x1cc>)
 80018e0:	f7fe ff6d 	bl	80007be <Uart_sendstring>
	while (!(Wait_for("\r\nOK\r\n", wifi_uart))); // wait for response
 80018e4:	bf00      	nop
 80018e6:	4950      	ldr	r1, [pc, #320]	; (8001a28 <wifi_Init+0x1ac>)
 80018e8:	4851      	ldr	r0, [pc, #324]	; (8001a30 <wifi_Init+0x1b4>)
 80018ea:	f7fe ff7f 	bl	80007ec <Wait_for>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f8      	beq.n	80018e6 <wifi_Init+0x6a>
	Uart_sendstring("\nOK\n", pc_uart);
 80018f4:	494f      	ldr	r1, [pc, #316]	; (8001a34 <wifi_Init+0x1b8>)
 80018f6:	4855      	ldr	r0, [pc, #340]	; (8001a4c <wifi_Init+0x1d0>)
 80018f8:	f7fe ff61 	bl	80007be <Uart_sendstring>
	Uart_flush(wifi_uart);
 80018fc:	484a      	ldr	r0, [pc, #296]	; (8001a28 <wifi_Init+0x1ac>)
 80018fe:	f7fe fd07 	bl	8000310 <Uart_flush>
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 8001902:	494c      	ldr	r1, [pc, #304]	; (8001a34 <wifi_Init+0x1b8>)
 8001904:	4852      	ldr	r0, [pc, #328]	; (8001a50 <wifi_Init+0x1d4>)
 8001906:	f7fe ff5a 	bl	80007be <Uart_sendstring>
	sprintf (data, "AT+S.SSIDTXT=%s\r",SSID);//enter ssid
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	4950      	ldr	r1, [pc, #320]	; (8001a54 <wifi_Init+0x1d8>)
 8001912:	4618      	mov	r0, r3
 8001914:	f001 f954 	bl	8002bc0 <siprintf>
	Uart_sendstring(data, wifi_uart);//sending to wifi module the ssid
 8001918:	f107 0308 	add.w	r3, r7, #8
 800191c:	4942      	ldr	r1, [pc, #264]	; (8001a28 <wifi_Init+0x1ac>)
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe ff4d 	bl	80007be <Uart_sendstring>
	while (!(Wait_for("\r\nOK\r\n", wifi_uart))); // sending is done
 8001924:	bf00      	nop
 8001926:	4940      	ldr	r1, [pc, #256]	; (8001a28 <wifi_Init+0x1ac>)
 8001928:	4841      	ldr	r0, [pc, #260]	; (8001a30 <wifi_Init+0x1b4>)
 800192a:	f7fe ff5f 	bl	80007ec <Wait_for>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f8      	beq.n	8001926 <wifi_Init+0xaa>
	//Uart_sendstring(data, pc_uart);
	data[80] = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	HAL_Delay(500);
 800193a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800193e:	f000 f923 	bl	8001b88 <HAL_Delay>
	sprintf (data, "AT+S.SCFG=wifi_wpa_psk_text,%s\r",PASSWD);
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	4943      	ldr	r1, [pc, #268]	; (8001a58 <wifi_Init+0x1dc>)
 800194a:	4618      	mov	r0, r3
 800194c:	f001 f938 	bl	8002bc0 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	4934      	ldr	r1, [pc, #208]	; (8001a28 <wifi_Init+0x1ac>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe ff31 	bl	80007be <Uart_sendstring>
	while (!(Wait_for("\r\nOK\r\n", wifi_uart))); // sending is done
 800195c:	bf00      	nop
 800195e:	4932      	ldr	r1, [pc, #200]	; (8001a28 <wifi_Init+0x1ac>)
 8001960:	4833      	ldr	r0, [pc, #204]	; (8001a30 <wifi_Init+0x1b4>)
 8001962:	f7fe ff43 	bl	80007ec <Wait_for>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f8      	beq.n	800195e <wifi_Init+0xe2>
	sprintf (data, "\nConnected to,\"%s\"\n", SSID);
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	493a      	ldr	r1, [pc, #232]	; (8001a5c <wifi_Init+0x1e0>)
 8001974:	4618      	mov	r0, r3
 8001976:	f001 f923 	bl	8002bc0 <siprintf>
	Uart_sendstring(data,pc_uart);
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	492d      	ldr	r1, [pc, #180]	; (8001a34 <wifi_Init+0x1b8>)
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe ff1c 	bl	80007be <Uart_sendstring>
	/* ssid and password are complete*/

	Uart_flush(wifi_uart);
 8001986:	4828      	ldr	r0, [pc, #160]	; (8001a28 <wifi_Init+0x1ac>)
 8001988:	f7fe fcc2 	bl	8000310 <Uart_flush>
	Uart_sendstring("AT+S.SCFG=wifi_priv_mode,2\r", wifi_uart);
 800198c:	4926      	ldr	r1, [pc, #152]	; (8001a28 <wifi_Init+0x1ac>)
 800198e:	4834      	ldr	r0, [pc, #208]	; (8001a60 <wifi_Init+0x1e4>)
 8001990:	f7fe ff15 	bl	80007be <Uart_sendstring>
	while (!(Wait_for("\r\nOK\r\n", wifi_uart)));
 8001994:	bf00      	nop
 8001996:	4924      	ldr	r1, [pc, #144]	; (8001a28 <wifi_Init+0x1ac>)
 8001998:	4825      	ldr	r0, [pc, #148]	; (8001a30 <wifi_Init+0x1b4>)
 800199a:	f7fe ff27 	bl	80007ec <Wait_for>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f8      	beq.n	8001996 <wifi_Init+0x11a>
	Uart_sendstring("AT+S.SCFG=wifi_mode,1\r", wifi_uart);
 80019a4:	4920      	ldr	r1, [pc, #128]	; (8001a28 <wifi_Init+0x1ac>)
 80019a6:	482f      	ldr	r0, [pc, #188]	; (8001a64 <wifi_Init+0x1e8>)
 80019a8:	f7fe ff09 	bl	80007be <Uart_sendstring>
	while (!(Wait_for("\r\nOK\r\n", wifi_uart)));
 80019ac:	bf00      	nop
 80019ae:	491e      	ldr	r1, [pc, #120]	; (8001a28 <wifi_Init+0x1ac>)
 80019b0:	481f      	ldr	r0, [pc, #124]	; (8001a30 <wifi_Init+0x1b4>)
 80019b2:	f7fe ff1b 	bl	80007ec <Wait_for>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f8      	beq.n	80019ae <wifi_Init+0x132>
	Uart_sendstring("AT+S.SCFG=ip_use_dhcp,1\r", wifi_uart);
 80019bc:	491a      	ldr	r1, [pc, #104]	; (8001a28 <wifi_Init+0x1ac>)
 80019be:	482a      	ldr	r0, [pc, #168]	; (8001a68 <wifi_Init+0x1ec>)
 80019c0:	f7fe fefd 	bl	80007be <Uart_sendstring>
	while (!(Wait_for("\r\nOK\r\n", wifi_uart)));
 80019c4:	bf00      	nop
 80019c6:	4918      	ldr	r1, [pc, #96]	; (8001a28 <wifi_Init+0x1ac>)
 80019c8:	4819      	ldr	r0, [pc, #100]	; (8001a30 <wifi_Init+0x1b4>)
 80019ca:	f7fe ff0f 	bl	80007ec <Wait_for>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f8      	beq.n	80019c6 <wifi_Init+0x14a>
	while (!(Wait_for("\r\nOK\r\n", wifi_uart)));
	Uart_sendstring("HTTP is done\n",pc_uart);
*/


	Uart_sendstring("AT&W\r", wifi_uart);//save current settings
 80019d4:	4914      	ldr	r1, [pc, #80]	; (8001a28 <wifi_Init+0x1ac>)
 80019d6:	4825      	ldr	r0, [pc, #148]	; (8001a6c <wifi_Init+0x1f0>)
 80019d8:	f7fe fef1 	bl	80007be <Uart_sendstring>
	while (!(Wait_for("\r\nOK\r", wifi_uart)));
 80019dc:	bf00      	nop
 80019de:	4912      	ldr	r1, [pc, #72]	; (8001a28 <wifi_Init+0x1ac>)
 80019e0:	4823      	ldr	r0, [pc, #140]	; (8001a70 <wifi_Init+0x1f4>)
 80019e2:	f7fe ff03 	bl	80007ec <Wait_for>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f8      	beq.n	80019de <wifi_Init+0x162>
	Uart_sendstring("AT+CFUN=1\r", wifi_uart);
 80019ec:	490e      	ldr	r1, [pc, #56]	; (8001a28 <wifi_Init+0x1ac>)
 80019ee:	4813      	ldr	r0, [pc, #76]	; (8001a3c <wifi_Init+0x1c0>)
 80019f0:	f7fe fee5 	bl	80007be <Uart_sendstring>
	Uart_sendstring("\n*OK", pc_uart);
 80019f4:	490f      	ldr	r1, [pc, #60]	; (8001a34 <wifi_Init+0x1b8>)
 80019f6:	481f      	ldr	r0, [pc, #124]	; (8001a74 <wifi_Init+0x1f8>)
 80019f8:	f7fe fee1 	bl	80007be <Uart_sendstring>
	for (unsigned int i=0; i<13; i++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a00:	e00a      	b.n	8001a18 <wifi_Init+0x19c>
		{
			Uart_sendstring(".", pc_uart);
 8001a02:	490c      	ldr	r1, [pc, #48]	; (8001a34 <wifi_Init+0x1b8>)
 8001a04:	480f      	ldr	r0, [pc, #60]	; (8001a44 <wifi_Init+0x1c8>)
 8001a06:	f7fe feda 	bl	80007be <Uart_sendstring>
			HAL_Delay(1000);
 8001a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a0e:	f000 f8bb 	bl	8001b88 <HAL_Delay>
	for (unsigned int i=0; i<13; i++)
 8001a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a14:	3301      	adds	r3, #1
 8001a16:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d9f1      	bls.n	8001a02 <wifi_Init+0x186>
			//Delay_ms(1000);
		}
	// wifi is connected
	//user_led_off();

}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	3760      	adds	r7, #96	; 0x60
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000e0c 	.word	0x20000e0c
 8001a2c:	08003714 	.word	0x08003714
 8001a30:	0800371c 	.word	0x0800371c
 8001a34:	20000eac 	.word	0x20000eac
 8001a38:	08003724 	.word	0x08003724
 8001a3c:	08003748 	.word	0x08003748
 8001a40:	08003754 	.word	0x08003754
 8001a44:	08003760 	.word	0x08003760
 8001a48:	08003764 	.word	0x08003764
 8001a4c:	08003768 	.word	0x08003768
 8001a50:	08003770 	.word	0x08003770
 8001a54:	08003794 	.word	0x08003794
 8001a58:	080037a8 	.word	0x080037a8
 8001a5c:	080037c8 	.word	0x080037c8
 8001a60:	080037dc 	.word	0x080037dc
 8001a64:	080037f8 	.word	0x080037f8
 8001a68:	08003810 	.word	0x08003810
 8001a6c:	0800382c 	.word	0x0800382c
 8001a70:	08003834 	.word	0x08003834
 8001a74:	0800383c 	.word	0x0800383c

08001a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a7a:	e003      	b.n	8001a84 <LoopCopyDataInit>

08001a7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a82:	3104      	adds	r1, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a84:	480a      	ldr	r0, [pc, #40]	; (8001ab0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a8c:	d3f6      	bcc.n	8001a7c <CopyDataInit>
  ldr r2, =_sbss
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a90:	e002      	b.n	8001a98 <LoopFillZerobss>

08001a92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a94:	f842 3b04 	str.w	r3, [r2], #4

08001a98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a9c:	d3f9      	bcc.n	8001a92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a9e:	f7ff fd3b 	bl	8001518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f001 f853 	bl	8002b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa6:	f7ff f823 	bl	8000af0 <main>
  bx lr
 8001aaa:	4770      	bx	lr
  ldr r3, =_sidata
 8001aac:	080038a8 	.word	0x080038a8
  ldr r0, =_sdata
 8001ab0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ab4:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001ab8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001abc:	20000f00 	.word	0x20000f00

08001ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC1_2_IRQHandler>
	...

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_Init+0x28>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_Init+0x28>)
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 f947 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fb94 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f95f 	bl	8001dd2 <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 f927 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000010 	.word	0x20000010
 8001b4c:	2000000c 	.word	0x2000000c

08001b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x1c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_IncTick+0x20>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <HAL_IncTick+0x20>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	20000010 	.word	0x20000010
 8001b70:	20000eec 	.word	0x20000eec

08001b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <HAL_GetTick+0x10>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000eec 	.word	0x20000eec

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d005      	beq.n	8001bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_Delay+0x44>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bae:	bf00      	nop
 8001bb0:	f7ff ffe0 	bl	8001b74 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d8f7      	bhi.n	8001bb0 <HAL_Delay+0x28>
  {
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000010 	.word	0x20000010

08001bd0 <__NVIC_SetPriorityGrouping>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4906      	ldr	r1, [pc, #24]	; (8001c68 <__NVIC_EnableIRQ+0x34>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100

08001c6c <__NVIC_SetPriority>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	; (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f1c3 0307 	rsb	r3, r3, #7
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	bf28      	it	cs
 8001cde:	2304      	movcs	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d902      	bls.n	8001cf0 <NVIC_EncodePriority+0x30>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	e000      	b.n	8001cf2 <NVIC_EncodePriority+0x32>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	4313      	orrs	r3, r2
         );
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff90 	bl	8001c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff2d 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff42 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff90 	bl	8001cc0 <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5f 	bl	8001c6c <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff35 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffa2 	bl	8001d24 <SysTick_Config>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b08b      	sub	sp, #44	; 0x2c
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfe:	e169      	b.n	80020d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e00:	2201      	movs	r2, #1
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	f040 8158 	bne.w	80020ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4a9a      	ldr	r2, [pc, #616]	; (800208c <HAL_GPIO_Init+0x2a0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d05e      	beq.n	8001ee6 <HAL_GPIO_Init+0xfa>
 8001e28:	4a98      	ldr	r2, [pc, #608]	; (800208c <HAL_GPIO_Init+0x2a0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d875      	bhi.n	8001f1a <HAL_GPIO_Init+0x12e>
 8001e2e:	4a98      	ldr	r2, [pc, #608]	; (8002090 <HAL_GPIO_Init+0x2a4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d058      	beq.n	8001ee6 <HAL_GPIO_Init+0xfa>
 8001e34:	4a96      	ldr	r2, [pc, #600]	; (8002090 <HAL_GPIO_Init+0x2a4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d86f      	bhi.n	8001f1a <HAL_GPIO_Init+0x12e>
 8001e3a:	4a96      	ldr	r2, [pc, #600]	; (8002094 <HAL_GPIO_Init+0x2a8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d052      	beq.n	8001ee6 <HAL_GPIO_Init+0xfa>
 8001e40:	4a94      	ldr	r2, [pc, #592]	; (8002094 <HAL_GPIO_Init+0x2a8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d869      	bhi.n	8001f1a <HAL_GPIO_Init+0x12e>
 8001e46:	4a94      	ldr	r2, [pc, #592]	; (8002098 <HAL_GPIO_Init+0x2ac>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d04c      	beq.n	8001ee6 <HAL_GPIO_Init+0xfa>
 8001e4c:	4a92      	ldr	r2, [pc, #584]	; (8002098 <HAL_GPIO_Init+0x2ac>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d863      	bhi.n	8001f1a <HAL_GPIO_Init+0x12e>
 8001e52:	4a92      	ldr	r2, [pc, #584]	; (800209c <HAL_GPIO_Init+0x2b0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d046      	beq.n	8001ee6 <HAL_GPIO_Init+0xfa>
 8001e58:	4a90      	ldr	r2, [pc, #576]	; (800209c <HAL_GPIO_Init+0x2b0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d85d      	bhi.n	8001f1a <HAL_GPIO_Init+0x12e>
 8001e5e:	2b12      	cmp	r3, #18
 8001e60:	d82a      	bhi.n	8001eb8 <HAL_GPIO_Init+0xcc>
 8001e62:	2b12      	cmp	r3, #18
 8001e64:	d859      	bhi.n	8001f1a <HAL_GPIO_Init+0x12e>
 8001e66:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <HAL_GPIO_Init+0x80>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08001ee7 	.word	0x08001ee7
 8001e70:	08001ec1 	.word	0x08001ec1
 8001e74:	08001ed3 	.word	0x08001ed3
 8001e78:	08001f15 	.word	0x08001f15
 8001e7c:	08001f1b 	.word	0x08001f1b
 8001e80:	08001f1b 	.word	0x08001f1b
 8001e84:	08001f1b 	.word	0x08001f1b
 8001e88:	08001f1b 	.word	0x08001f1b
 8001e8c:	08001f1b 	.word	0x08001f1b
 8001e90:	08001f1b 	.word	0x08001f1b
 8001e94:	08001f1b 	.word	0x08001f1b
 8001e98:	08001f1b 	.word	0x08001f1b
 8001e9c:	08001f1b 	.word	0x08001f1b
 8001ea0:	08001f1b 	.word	0x08001f1b
 8001ea4:	08001f1b 	.word	0x08001f1b
 8001ea8:	08001f1b 	.word	0x08001f1b
 8001eac:	08001f1b 	.word	0x08001f1b
 8001eb0:	08001ec9 	.word	0x08001ec9
 8001eb4:	08001edd 	.word	0x08001edd
 8001eb8:	4a79      	ldr	r2, [pc, #484]	; (80020a0 <HAL_GPIO_Init+0x2b4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ebe:	e02c      	b.n	8001f1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	623b      	str	r3, [r7, #32]
          break;
 8001ec6:	e029      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	623b      	str	r3, [r7, #32]
          break;
 8001ed0:	e024      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	3308      	adds	r3, #8
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e01f      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	330c      	adds	r3, #12
 8001ee2:	623b      	str	r3, [r7, #32]
          break;
 8001ee4:	e01a      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	623b      	str	r3, [r7, #32]
          break;
 8001ef2:	e013      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d105      	bne.n	8001f08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001efc:	2308      	movs	r3, #8
 8001efe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	611a      	str	r2, [r3, #16]
          break;
 8001f06:	e009      	b.n	8001f1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f08:	2308      	movs	r3, #8
 8001f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	615a      	str	r2, [r3, #20]
          break;
 8001f12:	e003      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
          break;
 8001f18:	e000      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          break;
 8001f1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2bff      	cmp	r3, #255	; 0xff
 8001f20:	d801      	bhi.n	8001f26 <HAL_GPIO_Init+0x13a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	e001      	b.n	8001f2a <HAL_GPIO_Init+0x13e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2bff      	cmp	r3, #255	; 0xff
 8001f30:	d802      	bhi.n	8001f38 <HAL_GPIO_Init+0x14c>
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	e002      	b.n	8001f3e <HAL_GPIO_Init+0x152>
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	3b08      	subs	r3, #8
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	210f      	movs	r1, #15
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	6a39      	ldr	r1, [r7, #32]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80b1 	beq.w	80020ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f6c:	4b4d      	ldr	r3, [pc, #308]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a4c      	ldr	r2, [pc, #304]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_GPIO_Init+0x2b8>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f84:	4a48      	ldr	r2, [pc, #288]	; (80020a8 <HAL_GPIO_Init+0x2bc>)
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a40      	ldr	r2, [pc, #256]	; (80020ac <HAL_GPIO_Init+0x2c0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <HAL_GPIO_Init+0x1ec>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3f      	ldr	r2, [pc, #252]	; (80020b0 <HAL_GPIO_Init+0x2c4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_GPIO_Init+0x1e8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3e      	ldr	r2, [pc, #248]	; (80020b4 <HAL_GPIO_Init+0x2c8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <HAL_GPIO_Init+0x1e4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3d      	ldr	r2, [pc, #244]	; (80020b8 <HAL_GPIO_Init+0x2cc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_GPIO_Init+0x1e0>
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e006      	b.n	8001fda <HAL_GPIO_Init+0x1ee>
 8001fcc:	2304      	movs	r3, #4
 8001fce:	e004      	b.n	8001fda <HAL_GPIO_Init+0x1ee>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e002      	b.n	8001fda <HAL_GPIO_Init+0x1ee>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_GPIO_Init+0x1ee>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fdc:	f002 0203 	and.w	r2, r2, #3
 8001fe0:	0092      	lsls	r2, r2, #2
 8001fe2:	4093      	lsls	r3, r2
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fea:	492f      	ldr	r1, [pc, #188]	; (80020a8 <HAL_GPIO_Init+0x2bc>)
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	492c      	ldr	r1, [pc, #176]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002012:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	4928      	ldr	r1, [pc, #160]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 800201c:	4013      	ands	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	4922      	ldr	r1, [pc, #136]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	491e      	ldr	r1, [pc, #120]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 8002044:	4013      	ands	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	4918      	ldr	r1, [pc, #96]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	4914      	ldr	r1, [pc, #80]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 800206c:	4013      	ands	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d021      	beq.n	80020c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
 8002088:	e021      	b.n	80020ce <HAL_GPIO_Init+0x2e2>
 800208a:	bf00      	nop
 800208c:	10320000 	.word	0x10320000
 8002090:	10310000 	.word	0x10310000
 8002094:	10220000 	.word	0x10220000
 8002098:	10210000 	.word	0x10210000
 800209c:	10120000 	.word	0x10120000
 80020a0:	10110000 	.word	0x10110000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010800 	.word	0x40010800
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40011400 	.word	0x40011400
 80020bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_GPIO_Init+0x304>)
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	4909      	ldr	r1, [pc, #36]	; (80020f0 <HAL_GPIO_Init+0x304>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	3301      	adds	r3, #1
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	fa22 f303 	lsr.w	r3, r2, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f47f ae8e 	bne.w	8001e00 <HAL_GPIO_Init+0x14>
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	372c      	adds	r7, #44	; 0x2c
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e001      	b.n	8002116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	460b      	mov	r3, r1
 800212c:	807b      	strh	r3, [r7, #2]
 800212e:	4613      	mov	r3, r2
 8002130:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002132:	787b      	ldrb	r3, [r7, #1]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002138:	887a      	ldrh	r2, [r7, #2]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800213e:	e003      	b.n	8002148 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	041a      	lsls	r2, r3, #16
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
	...

08002154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e26c      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8087 	beq.w	8002282 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002174:	4b92      	ldr	r3, [pc, #584]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b04      	cmp	r3, #4
 800217e:	d00c      	beq.n	800219a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002180:	4b8f      	ldr	r3, [pc, #572]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b08      	cmp	r3, #8
 800218a:	d112      	bne.n	80021b2 <HAL_RCC_OscConfig+0x5e>
 800218c:	4b8c      	ldr	r3, [pc, #560]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002198:	d10b      	bne.n	80021b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219a:	4b89      	ldr	r3, [pc, #548]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d06c      	beq.n	8002280 <HAL_RCC_OscConfig+0x12c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d168      	bne.n	8002280 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e246      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x76>
 80021bc:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a7f      	ldr	r2, [pc, #508]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	e02e      	b.n	8002228 <HAL_RCC_OscConfig+0xd4>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x98>
 80021d2:	4b7b      	ldr	r3, [pc, #492]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a7a      	ldr	r2, [pc, #488]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b78      	ldr	r3, [pc, #480]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a77      	ldr	r2, [pc, #476]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e01d      	b.n	8002228 <HAL_RCC_OscConfig+0xd4>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0xbc>
 80021f6:	4b72      	ldr	r3, [pc, #456]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a71      	ldr	r2, [pc, #452]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6e      	ldr	r2, [pc, #440]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0xd4>
 8002210:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a6a      	ldr	r2, [pc, #424]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b68      	ldr	r3, [pc, #416]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a67      	ldr	r2, [pc, #412]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002226:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff fca0 	bl	8001b74 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff fc9c 	bl	8001b74 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1fa      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0xe4>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fc8c 	bl	8001b74 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff fc88 	bl	8001b74 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1e6      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x10c>
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d063      	beq.n	8002356 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800228e:	4b4c      	ldr	r3, [pc, #304]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800229a:	4b49      	ldr	r3, [pc, #292]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d11c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x18c>
 80022a6:	4b46      	ldr	r3, [pc, #280]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d116      	bne.n	80022e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x176>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e1ba      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4939      	ldr	r1, [pc, #228]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	e03a      	b.n	8002356 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e8:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_RCC_OscConfig+0x270>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7ff fc41 	bl	8001b74 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f6:	f7ff fc3d 	bl	8001b74 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e19b      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4927      	ldr	r1, [pc, #156]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
 8002328:	e015      	b.n	8002356 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232a:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <HAL_RCC_OscConfig+0x270>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff fc20 	bl	8001b74 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002338:	f7ff fc1c 	bl	8001b74 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e17a      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d03a      	beq.n	80023d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d019      	beq.n	800239e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_RCC_OscConfig+0x274>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002370:	f7ff fc00 	bl	8001b74 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002378:	f7ff fbfc 	bl	8001b74 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e15a      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002396:	2001      	movs	r0, #1
 8002398:	f000 fad8 	bl	800294c <RCC_Delay>
 800239c:	e01c      	b.n	80023d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_RCC_OscConfig+0x274>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7ff fbe6 	bl	8001b74 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023aa:	e00f      	b.n	80023cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ac:	f7ff fbe2 	bl	8001b74 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d908      	bls.n	80023cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e140      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	42420000 	.word	0x42420000
 80023c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	4b9e      	ldr	r3, [pc, #632]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e9      	bne.n	80023ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a6 	beq.w	8002532 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b97      	ldr	r3, [pc, #604]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	4b94      	ldr	r3, [pc, #592]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4a93      	ldr	r2, [pc, #588]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	61d3      	str	r3, [r2, #28]
 8002402:	4b91      	ldr	r3, [pc, #580]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	4b8e      	ldr	r3, [pc, #568]	; (800264c <HAL_RCC_OscConfig+0x4f8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d118      	bne.n	8002450 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241e:	4b8b      	ldr	r3, [pc, #556]	; (800264c <HAL_RCC_OscConfig+0x4f8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a8a      	ldr	r2, [pc, #552]	; (800264c <HAL_RCC_OscConfig+0x4f8>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7ff fba3 	bl	8001b74 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7ff fb9f 	bl	8001b74 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	; 0x64
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0fd      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x4f8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x312>
 8002458:	4b7b      	ldr	r3, [pc, #492]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4a7a      	ldr	r2, [pc, #488]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6213      	str	r3, [r2, #32]
 8002464:	e02d      	b.n	80024c2 <HAL_RCC_OscConfig+0x36e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x334>
 800246e:	4b76      	ldr	r3, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a75      	ldr	r2, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6213      	str	r3, [r2, #32]
 800247a:	4b73      	ldr	r3, [pc, #460]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4a72      	ldr	r2, [pc, #456]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	f023 0304 	bic.w	r3, r3, #4
 8002484:	6213      	str	r3, [r2, #32]
 8002486:	e01c      	b.n	80024c2 <HAL_RCC_OscConfig+0x36e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b05      	cmp	r3, #5
 800248e:	d10c      	bne.n	80024aa <HAL_RCC_OscConfig+0x356>
 8002490:	4b6d      	ldr	r3, [pc, #436]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a6c      	ldr	r2, [pc, #432]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4a69      	ldr	r2, [pc, #420]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6213      	str	r3, [r2, #32]
 80024a8:	e00b      	b.n	80024c2 <HAL_RCC_OscConfig+0x36e>
 80024aa:	4b67      	ldr	r3, [pc, #412]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a66      	ldr	r2, [pc, #408]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	4b64      	ldr	r3, [pc, #400]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a63      	ldr	r2, [pc, #396]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d015      	beq.n	80024f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7ff fb53 	bl	8001b74 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7ff fb4f 	bl	8001b74 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0ab      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e8:	4b57      	ldr	r3, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ee      	beq.n	80024d2 <HAL_RCC_OscConfig+0x37e>
 80024f4:	e014      	b.n	8002520 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7ff fb3d 	bl	8001b74 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7ff fb39 	bl	8001b74 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e095      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002514:	4b4c      	ldr	r3, [pc, #304]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ee      	bne.n	80024fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d105      	bne.n	8002532 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002526:	4b48      	ldr	r3, [pc, #288]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a47      	ldr	r2, [pc, #284]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002530:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8081 	beq.w	800263e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800253c:	4b42      	ldr	r3, [pc, #264]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b08      	cmp	r3, #8
 8002546:	d061      	beq.n	800260c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d146      	bne.n	80025de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002550:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_RCC_OscConfig+0x4fc>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7ff fb0d 	bl	8001b74 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7ff fb09 	bl	8001b74 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e067      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002570:	4b35      	ldr	r3, [pc, #212]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d108      	bne.n	8002598 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	492d      	ldr	r1, [pc, #180]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a19      	ldr	r1, [r3, #32]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	430b      	orrs	r3, r1
 80025aa:	4927      	ldr	r1, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x4fc>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7ff fadd 	bl	8001b74 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7ff fad9 	bl	8001b74 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e037      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x46a>
 80025dc:	e02f      	b.n	800263e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <HAL_RCC_OscConfig+0x4fc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7ff fac6 	bl	8001b74 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7ff fac2 	bl	8001b74 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e020      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x498>
 800260a:	e018      	b.n	800263e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e013      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	429a      	cmp	r2, r3
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	40007000 	.word	0x40007000
 8002650:	42420060 	.word	0x42420060

08002654 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0d0      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002668:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d910      	bls.n	8002698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b67      	ldr	r3, [pc, #412]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 0207 	bic.w	r2, r3, #7
 800267e:	4965      	ldr	r1, [pc, #404]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b63      	ldr	r3, [pc, #396]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0b8      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d020      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b0:	4b59      	ldr	r3, [pc, #356]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a58      	ldr	r2, [pc, #352]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c8:	4b53      	ldr	r3, [pc, #332]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d4:	4b50      	ldr	r3, [pc, #320]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	494d      	ldr	r1, [pc, #308]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d040      	beq.n	8002774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b47      	ldr	r3, [pc, #284]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d115      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e07f      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	4b41      	ldr	r3, [pc, #260]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e073      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e06b      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002732:	4b39      	ldr	r3, [pc, #228]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f023 0203 	bic.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4936      	ldr	r1, [pc, #216]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002744:	f7ff fa16 	bl	8001b74 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	e00a      	b.n	8002762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274c:	f7ff fa12 	bl	8001b74 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	; 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e053      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 020c 	and.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	429a      	cmp	r2, r3
 8002772:	d1eb      	bne.n	800274c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d210      	bcs.n	80027a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 0207 	bic.w	r2, r3, #7
 800278a:	4922      	ldr	r1, [pc, #136]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e032      	b.n	800280a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4916      	ldr	r1, [pc, #88]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	490e      	ldr	r1, [pc, #56]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027e2:	f000 f821 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80027e6:	4602      	mov	r2, r0
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	490a      	ldr	r1, [pc, #40]	; (800281c <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	5ccb      	ldrb	r3, [r1, r3]
 80027f6:	fa22 f303 	lsr.w	r3, r2, r3
 80027fa:	4a09      	ldr	r2, [pc, #36]	; (8002820 <HAL_RCC_ClockConfig+0x1cc>)
 80027fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1d0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f974 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40022000 	.word	0x40022000
 8002818:	40021000 	.word	0x40021000
 800281c:	08003854 	.word	0x08003854
 8002820:	20000008 	.word	0x20000008
 8002824:	2000000c 	.word	0x2000000c

08002828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002828:	b490      	push	{r4, r7}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800282e:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002830:	1d3c      	adds	r4, r7, #4
 8002832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002838:	f240 2301 	movw	r3, #513	; 0x201
 800283c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002852:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b04      	cmp	r3, #4
 8002860:	d002      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x40>
 8002862:	2b08      	cmp	r3, #8
 8002864:	d003      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x46>
 8002866:	e02d      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286a:	623b      	str	r3, [r7, #32]
      break;
 800286c:	e02d      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	0c9b      	lsrs	r3, r3, #18
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800287a:	4413      	add	r3, r2
 800287c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002880:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800288c:	4b13      	ldr	r3, [pc, #76]	; (80028dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	0c5b      	lsrs	r3, r3, #17
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800289a:	4413      	add	r3, r2
 800289c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a6:	fb02 f203 	mul.w	r2, r2, r3
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	e004      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	623b      	str	r3, [r7, #32]
      break;
 80028c2:	e002      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c6:	623b      	str	r3, [r7, #32]
      break;
 80028c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ca:	6a3b      	ldr	r3, [r7, #32]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3728      	adds	r7, #40	; 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc90      	pop	{r4, r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	08003844 	.word	0x08003844
 80028dc:	40021000 	.word	0x40021000
 80028e0:	007a1200 	.word	0x007a1200
 80028e4:	003d0900 	.word	0x003d0900

080028e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ec:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000008 	.word	0x20000008

080028fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002900:	f7ff fff2 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	08003864 	.word	0x08003864

08002924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002928:	f7ff ffde 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	0adb      	lsrs	r3, r3, #11
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4903      	ldr	r1, [pc, #12]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	08003864 	.word	0x08003864

0800294c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <RCC_Delay+0x34>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <RCC_Delay+0x38>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0a5b      	lsrs	r3, r3, #9
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	fb02 f303 	mul.w	r3, r2, r3
 8002966:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002968:	bf00      	nop
  }
  while (Delay --);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1e5a      	subs	r2, r3, #1
 800296e:	60fa      	str	r2, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f9      	bne.n	8002968 <RCC_Delay+0x1c>
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	20000008 	.word	0x20000008
 8002984:	10624dd3 	.word	0x10624dd3

08002988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e03f      	b.n	8002a1a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fc5e 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2224      	movs	r2, #36	; 0x24
 80029b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f829 	bl	8002a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a5e:	f023 030c 	bic.w	r3, r3, #12
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a2c      	ldr	r2, [pc, #176]	; (8002b38 <UART_SetConfig+0x114>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d103      	bne.n	8002a94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a8c:	f7ff ff4a 	bl	8002924 <HAL_RCC_GetPCLK2Freq>
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	e002      	b.n	8002a9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a94:	f7ff ff32 	bl	80028fc <HAL_RCC_GetPCLK1Freq>
 8002a98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009a      	lsls	r2, r3, #2
 8002aa4:	441a      	add	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	4a22      	ldr	r2, [pc, #136]	; (8002b3c <UART_SetConfig+0x118>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	0119      	lsls	r1, r3, #4
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009a      	lsls	r2, r3, #2
 8002ac4:	441a      	add	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <UART_SetConfig+0x118>)
 8002ad2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2064      	movs	r0, #100	; 0x64
 8002ada:	fb00 f303 	mul.w	r3, r0, r3
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	3332      	adds	r3, #50	; 0x32
 8002ae4:	4a15      	ldr	r2, [pc, #84]	; (8002b3c <UART_SetConfig+0x118>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af0:	4419      	add	r1, r3
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	009a      	lsls	r2, r3, #2
 8002afc:	441a      	add	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <UART_SetConfig+0x118>)
 8002b0a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2064      	movs	r0, #100	; 0x64
 8002b12:	fb00 f303 	mul.w	r3, r0, r3
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	3332      	adds	r3, #50	; 0x32
 8002b1c:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <UART_SetConfig+0x118>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	440a      	add	r2, r1
 8002b2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	51eb851f 	.word	0x51eb851f

08002b40 <__errno>:
 8002b40:	4b01      	ldr	r3, [pc, #4]	; (8002b48 <__errno+0x8>)
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000014 	.word	0x20000014

08002b4c <__libc_init_array>:
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	2600      	movs	r6, #0
 8002b50:	4d0c      	ldr	r5, [pc, #48]	; (8002b84 <__libc_init_array+0x38>)
 8002b52:	4c0d      	ldr	r4, [pc, #52]	; (8002b88 <__libc_init_array+0x3c>)
 8002b54:	1b64      	subs	r4, r4, r5
 8002b56:	10a4      	asrs	r4, r4, #2
 8002b58:	42a6      	cmp	r6, r4
 8002b5a:	d109      	bne.n	8002b70 <__libc_init_array+0x24>
 8002b5c:	f000 fc5c 	bl	8003418 <_init>
 8002b60:	2600      	movs	r6, #0
 8002b62:	4d0a      	ldr	r5, [pc, #40]	; (8002b8c <__libc_init_array+0x40>)
 8002b64:	4c0a      	ldr	r4, [pc, #40]	; (8002b90 <__libc_init_array+0x44>)
 8002b66:	1b64      	subs	r4, r4, r5
 8002b68:	10a4      	asrs	r4, r4, #2
 8002b6a:	42a6      	cmp	r6, r4
 8002b6c:	d105      	bne.n	8002b7a <__libc_init_array+0x2e>
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b74:	4798      	blx	r3
 8002b76:	3601      	adds	r6, #1
 8002b78:	e7ee      	b.n	8002b58 <__libc_init_array+0xc>
 8002b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7e:	4798      	blx	r3
 8002b80:	3601      	adds	r6, #1
 8002b82:	e7f2      	b.n	8002b6a <__libc_init_array+0x1e>
 8002b84:	080038a0 	.word	0x080038a0
 8002b88:	080038a0 	.word	0x080038a0
 8002b8c:	080038a0 	.word	0x080038a0
 8002b90:	080038a4 	.word	0x080038a4

08002b94 <memcpy>:
 8002b94:	440a      	add	r2, r1
 8002b96:	4291      	cmp	r1, r2
 8002b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b9c:	d100      	bne.n	8002ba0 <memcpy+0xc>
 8002b9e:	4770      	bx	lr
 8002ba0:	b510      	push	{r4, lr}
 8002ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ba6:	4291      	cmp	r1, r2
 8002ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bac:	d1f9      	bne.n	8002ba2 <memcpy+0xe>
 8002bae:	bd10      	pop	{r4, pc}

08002bb0 <memset>:
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4402      	add	r2, r0
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d100      	bne.n	8002bba <memset+0xa>
 8002bb8:	4770      	bx	lr
 8002bba:	f803 1b01 	strb.w	r1, [r3], #1
 8002bbe:	e7f9      	b.n	8002bb4 <memset+0x4>

08002bc0 <siprintf>:
 8002bc0:	b40e      	push	{r1, r2, r3}
 8002bc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002bc6:	b500      	push	{lr}
 8002bc8:	b09c      	sub	sp, #112	; 0x70
 8002bca:	ab1d      	add	r3, sp, #116	; 0x74
 8002bcc:	9002      	str	r0, [sp, #8]
 8002bce:	9006      	str	r0, [sp, #24]
 8002bd0:	9107      	str	r1, [sp, #28]
 8002bd2:	9104      	str	r1, [sp, #16]
 8002bd4:	4808      	ldr	r0, [pc, #32]	; (8002bf8 <siprintf+0x38>)
 8002bd6:	4909      	ldr	r1, [pc, #36]	; (8002bfc <siprintf+0x3c>)
 8002bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bdc:	9105      	str	r1, [sp, #20]
 8002bde:	6800      	ldr	r0, [r0, #0]
 8002be0:	a902      	add	r1, sp, #8
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	f000 f868 	bl	8002cb8 <_svfiprintf_r>
 8002be8:	2200      	movs	r2, #0
 8002bea:	9b02      	ldr	r3, [sp, #8]
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	b01c      	add	sp, #112	; 0x70
 8002bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bf4:	b003      	add	sp, #12
 8002bf6:	4770      	bx	lr
 8002bf8:	20000014 	.word	0x20000014
 8002bfc:	ffff0208 	.word	0xffff0208

08002c00 <__ssputs_r>:
 8002c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c04:	688e      	ldr	r6, [r1, #8]
 8002c06:	4682      	mov	sl, r0
 8002c08:	429e      	cmp	r6, r3
 8002c0a:	460c      	mov	r4, r1
 8002c0c:	4690      	mov	r8, r2
 8002c0e:	461f      	mov	r7, r3
 8002c10:	d838      	bhi.n	8002c84 <__ssputs_r+0x84>
 8002c12:	898a      	ldrh	r2, [r1, #12]
 8002c14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c18:	d032      	beq.n	8002c80 <__ssputs_r+0x80>
 8002c1a:	6825      	ldr	r5, [r4, #0]
 8002c1c:	6909      	ldr	r1, [r1, #16]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	eba5 0901 	sub.w	r9, r5, r1
 8002c24:	6965      	ldr	r5, [r4, #20]
 8002c26:	444b      	add	r3, r9
 8002c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c30:	106d      	asrs	r5, r5, #1
 8002c32:	429d      	cmp	r5, r3
 8002c34:	bf38      	it	cc
 8002c36:	461d      	movcc	r5, r3
 8002c38:	0553      	lsls	r3, r2, #21
 8002c3a:	d531      	bpl.n	8002ca0 <__ssputs_r+0xa0>
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	f000 fb45 	bl	80032cc <_malloc_r>
 8002c42:	4606      	mov	r6, r0
 8002c44:	b950      	cbnz	r0, 8002c5c <__ssputs_r+0x5c>
 8002c46:	230c      	movs	r3, #12
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4c:	f8ca 3000 	str.w	r3, [sl]
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c56:	81a3      	strh	r3, [r4, #12]
 8002c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	6921      	ldr	r1, [r4, #16]
 8002c60:	f7ff ff98 	bl	8002b94 <memcpy>
 8002c64:	89a3      	ldrh	r3, [r4, #12]
 8002c66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6e:	81a3      	strh	r3, [r4, #12]
 8002c70:	6126      	str	r6, [r4, #16]
 8002c72:	444e      	add	r6, r9
 8002c74:	6026      	str	r6, [r4, #0]
 8002c76:	463e      	mov	r6, r7
 8002c78:	6165      	str	r5, [r4, #20]
 8002c7a:	eba5 0509 	sub.w	r5, r5, r9
 8002c7e:	60a5      	str	r5, [r4, #8]
 8002c80:	42be      	cmp	r6, r7
 8002c82:	d900      	bls.n	8002c86 <__ssputs_r+0x86>
 8002c84:	463e      	mov	r6, r7
 8002c86:	4632      	mov	r2, r6
 8002c88:	4641      	mov	r1, r8
 8002c8a:	6820      	ldr	r0, [r4, #0]
 8002c8c:	f000 fab8 	bl	8003200 <memmove>
 8002c90:	68a3      	ldr	r3, [r4, #8]
 8002c92:	6822      	ldr	r2, [r4, #0]
 8002c94:	1b9b      	subs	r3, r3, r6
 8002c96:	4432      	add	r2, r6
 8002c98:	2000      	movs	r0, #0
 8002c9a:	60a3      	str	r3, [r4, #8]
 8002c9c:	6022      	str	r2, [r4, #0]
 8002c9e:	e7db      	b.n	8002c58 <__ssputs_r+0x58>
 8002ca0:	462a      	mov	r2, r5
 8002ca2:	f000 fb6d 	bl	8003380 <_realloc_r>
 8002ca6:	4606      	mov	r6, r0
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d1e1      	bne.n	8002c70 <__ssputs_r+0x70>
 8002cac:	4650      	mov	r0, sl
 8002cae:	6921      	ldr	r1, [r4, #16]
 8002cb0:	f000 fac0 	bl	8003234 <_free_r>
 8002cb4:	e7c7      	b.n	8002c46 <__ssputs_r+0x46>
	...

08002cb8 <_svfiprintf_r>:
 8002cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cbc:	4698      	mov	r8, r3
 8002cbe:	898b      	ldrh	r3, [r1, #12]
 8002cc0:	4607      	mov	r7, r0
 8002cc2:	061b      	lsls	r3, r3, #24
 8002cc4:	460d      	mov	r5, r1
 8002cc6:	4614      	mov	r4, r2
 8002cc8:	b09d      	sub	sp, #116	; 0x74
 8002cca:	d50e      	bpl.n	8002cea <_svfiprintf_r+0x32>
 8002ccc:	690b      	ldr	r3, [r1, #16]
 8002cce:	b963      	cbnz	r3, 8002cea <_svfiprintf_r+0x32>
 8002cd0:	2140      	movs	r1, #64	; 0x40
 8002cd2:	f000 fafb 	bl	80032cc <_malloc_r>
 8002cd6:	6028      	str	r0, [r5, #0]
 8002cd8:	6128      	str	r0, [r5, #16]
 8002cda:	b920      	cbnz	r0, 8002ce6 <_svfiprintf_r+0x2e>
 8002cdc:	230c      	movs	r3, #12
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	e0d1      	b.n	8002e8a <_svfiprintf_r+0x1d2>
 8002ce6:	2340      	movs	r3, #64	; 0x40
 8002ce8:	616b      	str	r3, [r5, #20]
 8002cea:	2300      	movs	r3, #0
 8002cec:	9309      	str	r3, [sp, #36]	; 0x24
 8002cee:	2320      	movs	r3, #32
 8002cf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cf4:	2330      	movs	r3, #48	; 0x30
 8002cf6:	f04f 0901 	mov.w	r9, #1
 8002cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002ea4 <_svfiprintf_r+0x1ec>
 8002d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d06:	4623      	mov	r3, r4
 8002d08:	469a      	mov	sl, r3
 8002d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d0e:	b10a      	cbz	r2, 8002d14 <_svfiprintf_r+0x5c>
 8002d10:	2a25      	cmp	r2, #37	; 0x25
 8002d12:	d1f9      	bne.n	8002d08 <_svfiprintf_r+0x50>
 8002d14:	ebba 0b04 	subs.w	fp, sl, r4
 8002d18:	d00b      	beq.n	8002d32 <_svfiprintf_r+0x7a>
 8002d1a:	465b      	mov	r3, fp
 8002d1c:	4622      	mov	r2, r4
 8002d1e:	4629      	mov	r1, r5
 8002d20:	4638      	mov	r0, r7
 8002d22:	f7ff ff6d 	bl	8002c00 <__ssputs_r>
 8002d26:	3001      	adds	r0, #1
 8002d28:	f000 80aa 	beq.w	8002e80 <_svfiprintf_r+0x1c8>
 8002d2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d2e:	445a      	add	r2, fp
 8002d30:	9209      	str	r2, [sp, #36]	; 0x24
 8002d32:	f89a 3000 	ldrb.w	r3, [sl]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80a2 	beq.w	8002e80 <_svfiprintf_r+0x1c8>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d46:	f10a 0a01 	add.w	sl, sl, #1
 8002d4a:	9304      	str	r3, [sp, #16]
 8002d4c:	9307      	str	r3, [sp, #28]
 8002d4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d52:	931a      	str	r3, [sp, #104]	; 0x68
 8002d54:	4654      	mov	r4, sl
 8002d56:	2205      	movs	r2, #5
 8002d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d5c:	4851      	ldr	r0, [pc, #324]	; (8002ea4 <_svfiprintf_r+0x1ec>)
 8002d5e:	f000 fa41 	bl	80031e4 <memchr>
 8002d62:	9a04      	ldr	r2, [sp, #16]
 8002d64:	b9d8      	cbnz	r0, 8002d9e <_svfiprintf_r+0xe6>
 8002d66:	06d0      	lsls	r0, r2, #27
 8002d68:	bf44      	itt	mi
 8002d6a:	2320      	movmi	r3, #32
 8002d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d70:	0711      	lsls	r1, r2, #28
 8002d72:	bf44      	itt	mi
 8002d74:	232b      	movmi	r3, #43	; 0x2b
 8002d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d80:	d015      	beq.n	8002dae <_svfiprintf_r+0xf6>
 8002d82:	4654      	mov	r4, sl
 8002d84:	2000      	movs	r0, #0
 8002d86:	f04f 0c0a 	mov.w	ip, #10
 8002d8a:	9a07      	ldr	r2, [sp, #28]
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d92:	3b30      	subs	r3, #48	; 0x30
 8002d94:	2b09      	cmp	r3, #9
 8002d96:	d94e      	bls.n	8002e36 <_svfiprintf_r+0x17e>
 8002d98:	b1b0      	cbz	r0, 8002dc8 <_svfiprintf_r+0x110>
 8002d9a:	9207      	str	r2, [sp, #28]
 8002d9c:	e014      	b.n	8002dc8 <_svfiprintf_r+0x110>
 8002d9e:	eba0 0308 	sub.w	r3, r0, r8
 8002da2:	fa09 f303 	lsl.w	r3, r9, r3
 8002da6:	4313      	orrs	r3, r2
 8002da8:	46a2      	mov	sl, r4
 8002daa:	9304      	str	r3, [sp, #16]
 8002dac:	e7d2      	b.n	8002d54 <_svfiprintf_r+0x9c>
 8002dae:	9b03      	ldr	r3, [sp, #12]
 8002db0:	1d19      	adds	r1, r3, #4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	9103      	str	r1, [sp, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bfbb      	ittet	lt
 8002dba:	425b      	neglt	r3, r3
 8002dbc:	f042 0202 	orrlt.w	r2, r2, #2
 8002dc0:	9307      	strge	r3, [sp, #28]
 8002dc2:	9307      	strlt	r3, [sp, #28]
 8002dc4:	bfb8      	it	lt
 8002dc6:	9204      	strlt	r2, [sp, #16]
 8002dc8:	7823      	ldrb	r3, [r4, #0]
 8002dca:	2b2e      	cmp	r3, #46	; 0x2e
 8002dcc:	d10c      	bne.n	8002de8 <_svfiprintf_r+0x130>
 8002dce:	7863      	ldrb	r3, [r4, #1]
 8002dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8002dd2:	d135      	bne.n	8002e40 <_svfiprintf_r+0x188>
 8002dd4:	9b03      	ldr	r3, [sp, #12]
 8002dd6:	3402      	adds	r4, #2
 8002dd8:	1d1a      	adds	r2, r3, #4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	9203      	str	r2, [sp, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bfb8      	it	lt
 8002de2:	f04f 33ff 	movlt.w	r3, #4294967295
 8002de6:	9305      	str	r3, [sp, #20]
 8002de8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002eb4 <_svfiprintf_r+0x1fc>
 8002dec:	2203      	movs	r2, #3
 8002dee:	4650      	mov	r0, sl
 8002df0:	7821      	ldrb	r1, [r4, #0]
 8002df2:	f000 f9f7 	bl	80031e4 <memchr>
 8002df6:	b140      	cbz	r0, 8002e0a <_svfiprintf_r+0x152>
 8002df8:	2340      	movs	r3, #64	; 0x40
 8002dfa:	eba0 000a 	sub.w	r0, r0, sl
 8002dfe:	fa03 f000 	lsl.w	r0, r3, r0
 8002e02:	9b04      	ldr	r3, [sp, #16]
 8002e04:	3401      	adds	r4, #1
 8002e06:	4303      	orrs	r3, r0
 8002e08:	9304      	str	r3, [sp, #16]
 8002e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e0e:	2206      	movs	r2, #6
 8002e10:	4825      	ldr	r0, [pc, #148]	; (8002ea8 <_svfiprintf_r+0x1f0>)
 8002e12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e16:	f000 f9e5 	bl	80031e4 <memchr>
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d038      	beq.n	8002e90 <_svfiprintf_r+0x1d8>
 8002e1e:	4b23      	ldr	r3, [pc, #140]	; (8002eac <_svfiprintf_r+0x1f4>)
 8002e20:	bb1b      	cbnz	r3, 8002e6a <_svfiprintf_r+0x1b2>
 8002e22:	9b03      	ldr	r3, [sp, #12]
 8002e24:	3307      	adds	r3, #7
 8002e26:	f023 0307 	bic.w	r3, r3, #7
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	9303      	str	r3, [sp, #12]
 8002e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e30:	4433      	add	r3, r6
 8002e32:	9309      	str	r3, [sp, #36]	; 0x24
 8002e34:	e767      	b.n	8002d06 <_svfiprintf_r+0x4e>
 8002e36:	460c      	mov	r4, r1
 8002e38:	2001      	movs	r0, #1
 8002e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e3e:	e7a5      	b.n	8002d8c <_svfiprintf_r+0xd4>
 8002e40:	2300      	movs	r3, #0
 8002e42:	f04f 0c0a 	mov.w	ip, #10
 8002e46:	4619      	mov	r1, r3
 8002e48:	3401      	adds	r4, #1
 8002e4a:	9305      	str	r3, [sp, #20]
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e52:	3a30      	subs	r2, #48	; 0x30
 8002e54:	2a09      	cmp	r2, #9
 8002e56:	d903      	bls.n	8002e60 <_svfiprintf_r+0x1a8>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0c5      	beq.n	8002de8 <_svfiprintf_r+0x130>
 8002e5c:	9105      	str	r1, [sp, #20]
 8002e5e:	e7c3      	b.n	8002de8 <_svfiprintf_r+0x130>
 8002e60:	4604      	mov	r4, r0
 8002e62:	2301      	movs	r3, #1
 8002e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e68:	e7f0      	b.n	8002e4c <_svfiprintf_r+0x194>
 8002e6a:	ab03      	add	r3, sp, #12
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	462a      	mov	r2, r5
 8002e70:	4638      	mov	r0, r7
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <_svfiprintf_r+0x1f8>)
 8002e74:	a904      	add	r1, sp, #16
 8002e76:	f3af 8000 	nop.w
 8002e7a:	1c42      	adds	r2, r0, #1
 8002e7c:	4606      	mov	r6, r0
 8002e7e:	d1d6      	bne.n	8002e2e <_svfiprintf_r+0x176>
 8002e80:	89ab      	ldrh	r3, [r5, #12]
 8002e82:	065b      	lsls	r3, r3, #25
 8002e84:	f53f af2c 	bmi.w	8002ce0 <_svfiprintf_r+0x28>
 8002e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e8a:	b01d      	add	sp, #116	; 0x74
 8002e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e90:	ab03      	add	r3, sp, #12
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	462a      	mov	r2, r5
 8002e96:	4638      	mov	r0, r7
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <_svfiprintf_r+0x1f8>)
 8002e9a:	a904      	add	r1, sp, #16
 8002e9c:	f000 f87c 	bl	8002f98 <_printf_i>
 8002ea0:	e7eb      	b.n	8002e7a <_svfiprintf_r+0x1c2>
 8002ea2:	bf00      	nop
 8002ea4:	0800386c 	.word	0x0800386c
 8002ea8:	08003876 	.word	0x08003876
 8002eac:	00000000 	.word	0x00000000
 8002eb0:	08002c01 	.word	0x08002c01
 8002eb4:	08003872 	.word	0x08003872

08002eb8 <_printf_common>:
 8002eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ebc:	4616      	mov	r6, r2
 8002ebe:	4699      	mov	r9, r3
 8002ec0:	688a      	ldr	r2, [r1, #8]
 8002ec2:	690b      	ldr	r3, [r1, #16]
 8002ec4:	4607      	mov	r7, r0
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	bfb8      	it	lt
 8002eca:	4613      	movlt	r3, r2
 8002ecc:	6033      	str	r3, [r6, #0]
 8002ece:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ed8:	b10a      	cbz	r2, 8002ede <_printf_common+0x26>
 8002eda:	3301      	adds	r3, #1
 8002edc:	6033      	str	r3, [r6, #0]
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	0699      	lsls	r1, r3, #26
 8002ee2:	bf42      	ittt	mi
 8002ee4:	6833      	ldrmi	r3, [r6, #0]
 8002ee6:	3302      	addmi	r3, #2
 8002ee8:	6033      	strmi	r3, [r6, #0]
 8002eea:	6825      	ldr	r5, [r4, #0]
 8002eec:	f015 0506 	ands.w	r5, r5, #6
 8002ef0:	d106      	bne.n	8002f00 <_printf_common+0x48>
 8002ef2:	f104 0a19 	add.w	sl, r4, #25
 8002ef6:	68e3      	ldr	r3, [r4, #12]
 8002ef8:	6832      	ldr	r2, [r6, #0]
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	42ab      	cmp	r3, r5
 8002efe:	dc28      	bgt.n	8002f52 <_printf_common+0x9a>
 8002f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f04:	1e13      	subs	r3, r2, #0
 8002f06:	6822      	ldr	r2, [r4, #0]
 8002f08:	bf18      	it	ne
 8002f0a:	2301      	movne	r3, #1
 8002f0c:	0692      	lsls	r2, r2, #26
 8002f0e:	d42d      	bmi.n	8002f6c <_printf_common+0xb4>
 8002f10:	4649      	mov	r1, r9
 8002f12:	4638      	mov	r0, r7
 8002f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f18:	47c0      	blx	r8
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d020      	beq.n	8002f60 <_printf_common+0xa8>
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	68e5      	ldr	r5, [r4, #12]
 8002f22:	f003 0306 	and.w	r3, r3, #6
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf18      	it	ne
 8002f2a:	2500      	movne	r5, #0
 8002f2c:	6832      	ldr	r2, [r6, #0]
 8002f2e:	f04f 0600 	mov.w	r6, #0
 8002f32:	68a3      	ldr	r3, [r4, #8]
 8002f34:	bf08      	it	eq
 8002f36:	1aad      	subeq	r5, r5, r2
 8002f38:	6922      	ldr	r2, [r4, #16]
 8002f3a:	bf08      	it	eq
 8002f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f40:	4293      	cmp	r3, r2
 8002f42:	bfc4      	itt	gt
 8002f44:	1a9b      	subgt	r3, r3, r2
 8002f46:	18ed      	addgt	r5, r5, r3
 8002f48:	341a      	adds	r4, #26
 8002f4a:	42b5      	cmp	r5, r6
 8002f4c:	d11a      	bne.n	8002f84 <_printf_common+0xcc>
 8002f4e:	2000      	movs	r0, #0
 8002f50:	e008      	b.n	8002f64 <_printf_common+0xac>
 8002f52:	2301      	movs	r3, #1
 8002f54:	4652      	mov	r2, sl
 8002f56:	4649      	mov	r1, r9
 8002f58:	4638      	mov	r0, r7
 8002f5a:	47c0      	blx	r8
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	d103      	bne.n	8002f68 <_printf_common+0xb0>
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f68:	3501      	adds	r5, #1
 8002f6a:	e7c4      	b.n	8002ef6 <_printf_common+0x3e>
 8002f6c:	2030      	movs	r0, #48	; 0x30
 8002f6e:	18e1      	adds	r1, r4, r3
 8002f70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f7a:	4422      	add	r2, r4
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f82:	e7c5      	b.n	8002f10 <_printf_common+0x58>
 8002f84:	2301      	movs	r3, #1
 8002f86:	4622      	mov	r2, r4
 8002f88:	4649      	mov	r1, r9
 8002f8a:	4638      	mov	r0, r7
 8002f8c:	47c0      	blx	r8
 8002f8e:	3001      	adds	r0, #1
 8002f90:	d0e6      	beq.n	8002f60 <_printf_common+0xa8>
 8002f92:	3601      	adds	r6, #1
 8002f94:	e7d9      	b.n	8002f4a <_printf_common+0x92>
	...

08002f98 <_printf_i>:
 8002f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f9c:	460c      	mov	r4, r1
 8002f9e:	7e27      	ldrb	r7, [r4, #24]
 8002fa0:	4691      	mov	r9, r2
 8002fa2:	2f78      	cmp	r7, #120	; 0x78
 8002fa4:	4680      	mov	r8, r0
 8002fa6:	469a      	mov	sl, r3
 8002fa8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002faa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fae:	d807      	bhi.n	8002fc0 <_printf_i+0x28>
 8002fb0:	2f62      	cmp	r7, #98	; 0x62
 8002fb2:	d80a      	bhi.n	8002fca <_printf_i+0x32>
 8002fb4:	2f00      	cmp	r7, #0
 8002fb6:	f000 80d9 	beq.w	800316c <_printf_i+0x1d4>
 8002fba:	2f58      	cmp	r7, #88	; 0x58
 8002fbc:	f000 80a4 	beq.w	8003108 <_printf_i+0x170>
 8002fc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fc8:	e03a      	b.n	8003040 <_printf_i+0xa8>
 8002fca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fce:	2b15      	cmp	r3, #21
 8002fd0:	d8f6      	bhi.n	8002fc0 <_printf_i+0x28>
 8002fd2:	a001      	add	r0, pc, #4	; (adr r0, 8002fd8 <_printf_i+0x40>)
 8002fd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002fd8:	08003031 	.word	0x08003031
 8002fdc:	08003045 	.word	0x08003045
 8002fe0:	08002fc1 	.word	0x08002fc1
 8002fe4:	08002fc1 	.word	0x08002fc1
 8002fe8:	08002fc1 	.word	0x08002fc1
 8002fec:	08002fc1 	.word	0x08002fc1
 8002ff0:	08003045 	.word	0x08003045
 8002ff4:	08002fc1 	.word	0x08002fc1
 8002ff8:	08002fc1 	.word	0x08002fc1
 8002ffc:	08002fc1 	.word	0x08002fc1
 8003000:	08002fc1 	.word	0x08002fc1
 8003004:	08003153 	.word	0x08003153
 8003008:	08003075 	.word	0x08003075
 800300c:	08003135 	.word	0x08003135
 8003010:	08002fc1 	.word	0x08002fc1
 8003014:	08002fc1 	.word	0x08002fc1
 8003018:	08003175 	.word	0x08003175
 800301c:	08002fc1 	.word	0x08002fc1
 8003020:	08003075 	.word	0x08003075
 8003024:	08002fc1 	.word	0x08002fc1
 8003028:	08002fc1 	.word	0x08002fc1
 800302c:	0800313d 	.word	0x0800313d
 8003030:	680b      	ldr	r3, [r1, #0]
 8003032:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003036:	1d1a      	adds	r2, r3, #4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	600a      	str	r2, [r1, #0]
 800303c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003040:	2301      	movs	r3, #1
 8003042:	e0a4      	b.n	800318e <_printf_i+0x1f6>
 8003044:	6825      	ldr	r5, [r4, #0]
 8003046:	6808      	ldr	r0, [r1, #0]
 8003048:	062e      	lsls	r6, r5, #24
 800304a:	f100 0304 	add.w	r3, r0, #4
 800304e:	d50a      	bpl.n	8003066 <_printf_i+0xce>
 8003050:	6805      	ldr	r5, [r0, #0]
 8003052:	600b      	str	r3, [r1, #0]
 8003054:	2d00      	cmp	r5, #0
 8003056:	da03      	bge.n	8003060 <_printf_i+0xc8>
 8003058:	232d      	movs	r3, #45	; 0x2d
 800305a:	426d      	negs	r5, r5
 800305c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003060:	230a      	movs	r3, #10
 8003062:	485e      	ldr	r0, [pc, #376]	; (80031dc <_printf_i+0x244>)
 8003064:	e019      	b.n	800309a <_printf_i+0x102>
 8003066:	f015 0f40 	tst.w	r5, #64	; 0x40
 800306a:	6805      	ldr	r5, [r0, #0]
 800306c:	600b      	str	r3, [r1, #0]
 800306e:	bf18      	it	ne
 8003070:	b22d      	sxthne	r5, r5
 8003072:	e7ef      	b.n	8003054 <_printf_i+0xbc>
 8003074:	680b      	ldr	r3, [r1, #0]
 8003076:	6825      	ldr	r5, [r4, #0]
 8003078:	1d18      	adds	r0, r3, #4
 800307a:	6008      	str	r0, [r1, #0]
 800307c:	0628      	lsls	r0, r5, #24
 800307e:	d501      	bpl.n	8003084 <_printf_i+0xec>
 8003080:	681d      	ldr	r5, [r3, #0]
 8003082:	e002      	b.n	800308a <_printf_i+0xf2>
 8003084:	0669      	lsls	r1, r5, #25
 8003086:	d5fb      	bpl.n	8003080 <_printf_i+0xe8>
 8003088:	881d      	ldrh	r5, [r3, #0]
 800308a:	2f6f      	cmp	r7, #111	; 0x6f
 800308c:	bf0c      	ite	eq
 800308e:	2308      	moveq	r3, #8
 8003090:	230a      	movne	r3, #10
 8003092:	4852      	ldr	r0, [pc, #328]	; (80031dc <_printf_i+0x244>)
 8003094:	2100      	movs	r1, #0
 8003096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800309a:	6866      	ldr	r6, [r4, #4]
 800309c:	2e00      	cmp	r6, #0
 800309e:	bfa8      	it	ge
 80030a0:	6821      	ldrge	r1, [r4, #0]
 80030a2:	60a6      	str	r6, [r4, #8]
 80030a4:	bfa4      	itt	ge
 80030a6:	f021 0104 	bicge.w	r1, r1, #4
 80030aa:	6021      	strge	r1, [r4, #0]
 80030ac:	b90d      	cbnz	r5, 80030b2 <_printf_i+0x11a>
 80030ae:	2e00      	cmp	r6, #0
 80030b0:	d04d      	beq.n	800314e <_printf_i+0x1b6>
 80030b2:	4616      	mov	r6, r2
 80030b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80030b8:	fb03 5711 	mls	r7, r3, r1, r5
 80030bc:	5dc7      	ldrb	r7, [r0, r7]
 80030be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030c2:	462f      	mov	r7, r5
 80030c4:	42bb      	cmp	r3, r7
 80030c6:	460d      	mov	r5, r1
 80030c8:	d9f4      	bls.n	80030b4 <_printf_i+0x11c>
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d10b      	bne.n	80030e6 <_printf_i+0x14e>
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	07df      	lsls	r7, r3, #31
 80030d2:	d508      	bpl.n	80030e6 <_printf_i+0x14e>
 80030d4:	6923      	ldr	r3, [r4, #16]
 80030d6:	6861      	ldr	r1, [r4, #4]
 80030d8:	4299      	cmp	r1, r3
 80030da:	bfde      	ittt	le
 80030dc:	2330      	movle	r3, #48	; 0x30
 80030de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030e6:	1b92      	subs	r2, r2, r6
 80030e8:	6122      	str	r2, [r4, #16]
 80030ea:	464b      	mov	r3, r9
 80030ec:	4621      	mov	r1, r4
 80030ee:	4640      	mov	r0, r8
 80030f0:	f8cd a000 	str.w	sl, [sp]
 80030f4:	aa03      	add	r2, sp, #12
 80030f6:	f7ff fedf 	bl	8002eb8 <_printf_common>
 80030fa:	3001      	adds	r0, #1
 80030fc:	d14c      	bne.n	8003198 <_printf_i+0x200>
 80030fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003102:	b004      	add	sp, #16
 8003104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003108:	4834      	ldr	r0, [pc, #208]	; (80031dc <_printf_i+0x244>)
 800310a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800310e:	680e      	ldr	r6, [r1, #0]
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	f856 5b04 	ldr.w	r5, [r6], #4
 8003116:	061f      	lsls	r7, r3, #24
 8003118:	600e      	str	r6, [r1, #0]
 800311a:	d514      	bpl.n	8003146 <_printf_i+0x1ae>
 800311c:	07d9      	lsls	r1, r3, #31
 800311e:	bf44      	itt	mi
 8003120:	f043 0320 	orrmi.w	r3, r3, #32
 8003124:	6023      	strmi	r3, [r4, #0]
 8003126:	b91d      	cbnz	r5, 8003130 <_printf_i+0x198>
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	f023 0320 	bic.w	r3, r3, #32
 800312e:	6023      	str	r3, [r4, #0]
 8003130:	2310      	movs	r3, #16
 8003132:	e7af      	b.n	8003094 <_printf_i+0xfc>
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	f043 0320 	orr.w	r3, r3, #32
 800313a:	6023      	str	r3, [r4, #0]
 800313c:	2378      	movs	r3, #120	; 0x78
 800313e:	4828      	ldr	r0, [pc, #160]	; (80031e0 <_printf_i+0x248>)
 8003140:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003144:	e7e3      	b.n	800310e <_printf_i+0x176>
 8003146:	065e      	lsls	r6, r3, #25
 8003148:	bf48      	it	mi
 800314a:	b2ad      	uxthmi	r5, r5
 800314c:	e7e6      	b.n	800311c <_printf_i+0x184>
 800314e:	4616      	mov	r6, r2
 8003150:	e7bb      	b.n	80030ca <_printf_i+0x132>
 8003152:	680b      	ldr	r3, [r1, #0]
 8003154:	6826      	ldr	r6, [r4, #0]
 8003156:	1d1d      	adds	r5, r3, #4
 8003158:	6960      	ldr	r0, [r4, #20]
 800315a:	600d      	str	r5, [r1, #0]
 800315c:	0635      	lsls	r5, r6, #24
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	d501      	bpl.n	8003166 <_printf_i+0x1ce>
 8003162:	6018      	str	r0, [r3, #0]
 8003164:	e002      	b.n	800316c <_printf_i+0x1d4>
 8003166:	0671      	lsls	r1, r6, #25
 8003168:	d5fb      	bpl.n	8003162 <_printf_i+0x1ca>
 800316a:	8018      	strh	r0, [r3, #0]
 800316c:	2300      	movs	r3, #0
 800316e:	4616      	mov	r6, r2
 8003170:	6123      	str	r3, [r4, #16]
 8003172:	e7ba      	b.n	80030ea <_printf_i+0x152>
 8003174:	680b      	ldr	r3, [r1, #0]
 8003176:	1d1a      	adds	r2, r3, #4
 8003178:	600a      	str	r2, [r1, #0]
 800317a:	681e      	ldr	r6, [r3, #0]
 800317c:	2100      	movs	r1, #0
 800317e:	4630      	mov	r0, r6
 8003180:	6862      	ldr	r2, [r4, #4]
 8003182:	f000 f82f 	bl	80031e4 <memchr>
 8003186:	b108      	cbz	r0, 800318c <_printf_i+0x1f4>
 8003188:	1b80      	subs	r0, r0, r6
 800318a:	6060      	str	r0, [r4, #4]
 800318c:	6863      	ldr	r3, [r4, #4]
 800318e:	6123      	str	r3, [r4, #16]
 8003190:	2300      	movs	r3, #0
 8003192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003196:	e7a8      	b.n	80030ea <_printf_i+0x152>
 8003198:	4632      	mov	r2, r6
 800319a:	4649      	mov	r1, r9
 800319c:	4640      	mov	r0, r8
 800319e:	6923      	ldr	r3, [r4, #16]
 80031a0:	47d0      	blx	sl
 80031a2:	3001      	adds	r0, #1
 80031a4:	d0ab      	beq.n	80030fe <_printf_i+0x166>
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	079b      	lsls	r3, r3, #30
 80031aa:	d413      	bmi.n	80031d4 <_printf_i+0x23c>
 80031ac:	68e0      	ldr	r0, [r4, #12]
 80031ae:	9b03      	ldr	r3, [sp, #12]
 80031b0:	4298      	cmp	r0, r3
 80031b2:	bfb8      	it	lt
 80031b4:	4618      	movlt	r0, r3
 80031b6:	e7a4      	b.n	8003102 <_printf_i+0x16a>
 80031b8:	2301      	movs	r3, #1
 80031ba:	4632      	mov	r2, r6
 80031bc:	4649      	mov	r1, r9
 80031be:	4640      	mov	r0, r8
 80031c0:	47d0      	blx	sl
 80031c2:	3001      	adds	r0, #1
 80031c4:	d09b      	beq.n	80030fe <_printf_i+0x166>
 80031c6:	3501      	adds	r5, #1
 80031c8:	68e3      	ldr	r3, [r4, #12]
 80031ca:	9903      	ldr	r1, [sp, #12]
 80031cc:	1a5b      	subs	r3, r3, r1
 80031ce:	42ab      	cmp	r3, r5
 80031d0:	dcf2      	bgt.n	80031b8 <_printf_i+0x220>
 80031d2:	e7eb      	b.n	80031ac <_printf_i+0x214>
 80031d4:	2500      	movs	r5, #0
 80031d6:	f104 0619 	add.w	r6, r4, #25
 80031da:	e7f5      	b.n	80031c8 <_printf_i+0x230>
 80031dc:	0800387d 	.word	0x0800387d
 80031e0:	0800388e 	.word	0x0800388e

080031e4 <memchr>:
 80031e4:	4603      	mov	r3, r0
 80031e6:	b510      	push	{r4, lr}
 80031e8:	b2c9      	uxtb	r1, r1
 80031ea:	4402      	add	r2, r0
 80031ec:	4293      	cmp	r3, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	d101      	bne.n	80031f6 <memchr+0x12>
 80031f2:	2000      	movs	r0, #0
 80031f4:	e003      	b.n	80031fe <memchr+0x1a>
 80031f6:	7804      	ldrb	r4, [r0, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	428c      	cmp	r4, r1
 80031fc:	d1f6      	bne.n	80031ec <memchr+0x8>
 80031fe:	bd10      	pop	{r4, pc}

08003200 <memmove>:
 8003200:	4288      	cmp	r0, r1
 8003202:	b510      	push	{r4, lr}
 8003204:	eb01 0402 	add.w	r4, r1, r2
 8003208:	d902      	bls.n	8003210 <memmove+0x10>
 800320a:	4284      	cmp	r4, r0
 800320c:	4623      	mov	r3, r4
 800320e:	d807      	bhi.n	8003220 <memmove+0x20>
 8003210:	1e43      	subs	r3, r0, #1
 8003212:	42a1      	cmp	r1, r4
 8003214:	d008      	beq.n	8003228 <memmove+0x28>
 8003216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800321a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800321e:	e7f8      	b.n	8003212 <memmove+0x12>
 8003220:	4601      	mov	r1, r0
 8003222:	4402      	add	r2, r0
 8003224:	428a      	cmp	r2, r1
 8003226:	d100      	bne.n	800322a <memmove+0x2a>
 8003228:	bd10      	pop	{r4, pc}
 800322a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800322e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003232:	e7f7      	b.n	8003224 <memmove+0x24>

08003234 <_free_r>:
 8003234:	b538      	push	{r3, r4, r5, lr}
 8003236:	4605      	mov	r5, r0
 8003238:	2900      	cmp	r1, #0
 800323a:	d043      	beq.n	80032c4 <_free_r+0x90>
 800323c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003240:	1f0c      	subs	r4, r1, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	bfb8      	it	lt
 8003246:	18e4      	addlt	r4, r4, r3
 8003248:	f000 f8d0 	bl	80033ec <__malloc_lock>
 800324c:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <_free_r+0x94>)
 800324e:	6813      	ldr	r3, [r2, #0]
 8003250:	4610      	mov	r0, r2
 8003252:	b933      	cbnz	r3, 8003262 <_free_r+0x2e>
 8003254:	6063      	str	r3, [r4, #4]
 8003256:	6014      	str	r4, [r2, #0]
 8003258:	4628      	mov	r0, r5
 800325a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800325e:	f000 b8cb 	b.w	80033f8 <__malloc_unlock>
 8003262:	42a3      	cmp	r3, r4
 8003264:	d90a      	bls.n	800327c <_free_r+0x48>
 8003266:	6821      	ldr	r1, [r4, #0]
 8003268:	1862      	adds	r2, r4, r1
 800326a:	4293      	cmp	r3, r2
 800326c:	bf01      	itttt	eq
 800326e:	681a      	ldreq	r2, [r3, #0]
 8003270:	685b      	ldreq	r3, [r3, #4]
 8003272:	1852      	addeq	r2, r2, r1
 8003274:	6022      	streq	r2, [r4, #0]
 8003276:	6063      	str	r3, [r4, #4]
 8003278:	6004      	str	r4, [r0, #0]
 800327a:	e7ed      	b.n	8003258 <_free_r+0x24>
 800327c:	461a      	mov	r2, r3
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	b10b      	cbz	r3, 8003286 <_free_r+0x52>
 8003282:	42a3      	cmp	r3, r4
 8003284:	d9fa      	bls.n	800327c <_free_r+0x48>
 8003286:	6811      	ldr	r1, [r2, #0]
 8003288:	1850      	adds	r0, r2, r1
 800328a:	42a0      	cmp	r0, r4
 800328c:	d10b      	bne.n	80032a6 <_free_r+0x72>
 800328e:	6820      	ldr	r0, [r4, #0]
 8003290:	4401      	add	r1, r0
 8003292:	1850      	adds	r0, r2, r1
 8003294:	4283      	cmp	r3, r0
 8003296:	6011      	str	r1, [r2, #0]
 8003298:	d1de      	bne.n	8003258 <_free_r+0x24>
 800329a:	6818      	ldr	r0, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4401      	add	r1, r0
 80032a0:	6011      	str	r1, [r2, #0]
 80032a2:	6053      	str	r3, [r2, #4]
 80032a4:	e7d8      	b.n	8003258 <_free_r+0x24>
 80032a6:	d902      	bls.n	80032ae <_free_r+0x7a>
 80032a8:	230c      	movs	r3, #12
 80032aa:	602b      	str	r3, [r5, #0]
 80032ac:	e7d4      	b.n	8003258 <_free_r+0x24>
 80032ae:	6820      	ldr	r0, [r4, #0]
 80032b0:	1821      	adds	r1, r4, r0
 80032b2:	428b      	cmp	r3, r1
 80032b4:	bf01      	itttt	eq
 80032b6:	6819      	ldreq	r1, [r3, #0]
 80032b8:	685b      	ldreq	r3, [r3, #4]
 80032ba:	1809      	addeq	r1, r1, r0
 80032bc:	6021      	streq	r1, [r4, #0]
 80032be:	6063      	str	r3, [r4, #4]
 80032c0:	6054      	str	r4, [r2, #4]
 80032c2:	e7c9      	b.n	8003258 <_free_r+0x24>
 80032c4:	bd38      	pop	{r3, r4, r5, pc}
 80032c6:	bf00      	nop
 80032c8:	20000d6c 	.word	0x20000d6c

080032cc <_malloc_r>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	1ccd      	adds	r5, r1, #3
 80032d0:	f025 0503 	bic.w	r5, r5, #3
 80032d4:	3508      	adds	r5, #8
 80032d6:	2d0c      	cmp	r5, #12
 80032d8:	bf38      	it	cc
 80032da:	250c      	movcc	r5, #12
 80032dc:	2d00      	cmp	r5, #0
 80032de:	4606      	mov	r6, r0
 80032e0:	db01      	blt.n	80032e6 <_malloc_r+0x1a>
 80032e2:	42a9      	cmp	r1, r5
 80032e4:	d903      	bls.n	80032ee <_malloc_r+0x22>
 80032e6:	230c      	movs	r3, #12
 80032e8:	6033      	str	r3, [r6, #0]
 80032ea:	2000      	movs	r0, #0
 80032ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ee:	f000 f87d 	bl	80033ec <__malloc_lock>
 80032f2:	4921      	ldr	r1, [pc, #132]	; (8003378 <_malloc_r+0xac>)
 80032f4:	680a      	ldr	r2, [r1, #0]
 80032f6:	4614      	mov	r4, r2
 80032f8:	b99c      	cbnz	r4, 8003322 <_malloc_r+0x56>
 80032fa:	4f20      	ldr	r7, [pc, #128]	; (800337c <_malloc_r+0xb0>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	b923      	cbnz	r3, 800330a <_malloc_r+0x3e>
 8003300:	4621      	mov	r1, r4
 8003302:	4630      	mov	r0, r6
 8003304:	f000 f862 	bl	80033cc <_sbrk_r>
 8003308:	6038      	str	r0, [r7, #0]
 800330a:	4629      	mov	r1, r5
 800330c:	4630      	mov	r0, r6
 800330e:	f000 f85d 	bl	80033cc <_sbrk_r>
 8003312:	1c43      	adds	r3, r0, #1
 8003314:	d123      	bne.n	800335e <_malloc_r+0x92>
 8003316:	230c      	movs	r3, #12
 8003318:	4630      	mov	r0, r6
 800331a:	6033      	str	r3, [r6, #0]
 800331c:	f000 f86c 	bl	80033f8 <__malloc_unlock>
 8003320:	e7e3      	b.n	80032ea <_malloc_r+0x1e>
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	1b5b      	subs	r3, r3, r5
 8003326:	d417      	bmi.n	8003358 <_malloc_r+0x8c>
 8003328:	2b0b      	cmp	r3, #11
 800332a:	d903      	bls.n	8003334 <_malloc_r+0x68>
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	441c      	add	r4, r3
 8003330:	6025      	str	r5, [r4, #0]
 8003332:	e004      	b.n	800333e <_malloc_r+0x72>
 8003334:	6863      	ldr	r3, [r4, #4]
 8003336:	42a2      	cmp	r2, r4
 8003338:	bf0c      	ite	eq
 800333a:	600b      	streq	r3, [r1, #0]
 800333c:	6053      	strne	r3, [r2, #4]
 800333e:	4630      	mov	r0, r6
 8003340:	f000 f85a 	bl	80033f8 <__malloc_unlock>
 8003344:	f104 000b 	add.w	r0, r4, #11
 8003348:	1d23      	adds	r3, r4, #4
 800334a:	f020 0007 	bic.w	r0, r0, #7
 800334e:	1ac2      	subs	r2, r0, r3
 8003350:	d0cc      	beq.n	80032ec <_malloc_r+0x20>
 8003352:	1a1b      	subs	r3, r3, r0
 8003354:	50a3      	str	r3, [r4, r2]
 8003356:	e7c9      	b.n	80032ec <_malloc_r+0x20>
 8003358:	4622      	mov	r2, r4
 800335a:	6864      	ldr	r4, [r4, #4]
 800335c:	e7cc      	b.n	80032f8 <_malloc_r+0x2c>
 800335e:	1cc4      	adds	r4, r0, #3
 8003360:	f024 0403 	bic.w	r4, r4, #3
 8003364:	42a0      	cmp	r0, r4
 8003366:	d0e3      	beq.n	8003330 <_malloc_r+0x64>
 8003368:	1a21      	subs	r1, r4, r0
 800336a:	4630      	mov	r0, r6
 800336c:	f000 f82e 	bl	80033cc <_sbrk_r>
 8003370:	3001      	adds	r0, #1
 8003372:	d1dd      	bne.n	8003330 <_malloc_r+0x64>
 8003374:	e7cf      	b.n	8003316 <_malloc_r+0x4a>
 8003376:	bf00      	nop
 8003378:	20000d6c 	.word	0x20000d6c
 800337c:	20000d70 	.word	0x20000d70

08003380 <_realloc_r>:
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	4607      	mov	r7, r0
 8003384:	4614      	mov	r4, r2
 8003386:	460e      	mov	r6, r1
 8003388:	b921      	cbnz	r1, 8003394 <_realloc_r+0x14>
 800338a:	4611      	mov	r1, r2
 800338c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003390:	f7ff bf9c 	b.w	80032cc <_malloc_r>
 8003394:	b922      	cbnz	r2, 80033a0 <_realloc_r+0x20>
 8003396:	f7ff ff4d 	bl	8003234 <_free_r>
 800339a:	4625      	mov	r5, r4
 800339c:	4628      	mov	r0, r5
 800339e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033a0:	f000 f830 	bl	8003404 <_malloc_usable_size_r>
 80033a4:	42a0      	cmp	r0, r4
 80033a6:	d20f      	bcs.n	80033c8 <_realloc_r+0x48>
 80033a8:	4621      	mov	r1, r4
 80033aa:	4638      	mov	r0, r7
 80033ac:	f7ff ff8e 	bl	80032cc <_malloc_r>
 80033b0:	4605      	mov	r5, r0
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d0f2      	beq.n	800339c <_realloc_r+0x1c>
 80033b6:	4631      	mov	r1, r6
 80033b8:	4622      	mov	r2, r4
 80033ba:	f7ff fbeb 	bl	8002b94 <memcpy>
 80033be:	4631      	mov	r1, r6
 80033c0:	4638      	mov	r0, r7
 80033c2:	f7ff ff37 	bl	8003234 <_free_r>
 80033c6:	e7e9      	b.n	800339c <_realloc_r+0x1c>
 80033c8:	4635      	mov	r5, r6
 80033ca:	e7e7      	b.n	800339c <_realloc_r+0x1c>

080033cc <_sbrk_r>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	2300      	movs	r3, #0
 80033d0:	4d05      	ldr	r5, [pc, #20]	; (80033e8 <_sbrk_r+0x1c>)
 80033d2:	4604      	mov	r4, r0
 80033d4:	4608      	mov	r0, r1
 80033d6:	602b      	str	r3, [r5, #0]
 80033d8:	f7fe f868 	bl	80014ac <_sbrk>
 80033dc:	1c43      	adds	r3, r0, #1
 80033de:	d102      	bne.n	80033e6 <_sbrk_r+0x1a>
 80033e0:	682b      	ldr	r3, [r5, #0]
 80033e2:	b103      	cbz	r3, 80033e6 <_sbrk_r+0x1a>
 80033e4:	6023      	str	r3, [r4, #0]
 80033e6:	bd38      	pop	{r3, r4, r5, pc}
 80033e8:	20000ef0 	.word	0x20000ef0

080033ec <__malloc_lock>:
 80033ec:	4801      	ldr	r0, [pc, #4]	; (80033f4 <__malloc_lock+0x8>)
 80033ee:	f000 b811 	b.w	8003414 <__retarget_lock_acquire_recursive>
 80033f2:	bf00      	nop
 80033f4:	20000ef8 	.word	0x20000ef8

080033f8 <__malloc_unlock>:
 80033f8:	4801      	ldr	r0, [pc, #4]	; (8003400 <__malloc_unlock+0x8>)
 80033fa:	f000 b80c 	b.w	8003416 <__retarget_lock_release_recursive>
 80033fe:	bf00      	nop
 8003400:	20000ef8 	.word	0x20000ef8

08003404 <_malloc_usable_size_r>:
 8003404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003408:	1f18      	subs	r0, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	bfbc      	itt	lt
 800340e:	580b      	ldrlt	r3, [r1, r0]
 8003410:	18c0      	addlt	r0, r0, r3
 8003412:	4770      	bx	lr

08003414 <__retarget_lock_acquire_recursive>:
 8003414:	4770      	bx	lr

08003416 <__retarget_lock_release_recursive>:
 8003416:	4770      	bx	lr

08003418 <_init>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	bf00      	nop
 800341c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341e:	bc08      	pop	{r3}
 8003420:	469e      	mov	lr, r3
 8003422:	4770      	bx	lr

08003424 <_fini>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr
