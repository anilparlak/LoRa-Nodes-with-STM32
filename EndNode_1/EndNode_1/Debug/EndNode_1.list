
EndNode_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007944  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08007a58  08007a58  00017a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed4  08007ed4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007edc  08007edc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007edc  08007edc  00017edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ee0  08007ee0  00017ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001784  200001dc  080080c0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001960  080080c0  00021960  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3d7  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215d  00000000  00000000  0002d5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  000301e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185c0  00000000  00000000  00030bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c83b  00000000  00000000  00049188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008622e  00000000  00000000  000559c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbbf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d74  00000000  00000000  000dbc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a3c 	.word	0x08007a3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007a3c 	.word	0x08007a3c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_ldivmod>:
 8000f44:	b97b      	cbnz	r3, 8000f66 <__aeabi_ldivmod+0x22>
 8000f46:	b972      	cbnz	r2, 8000f66 <__aeabi_ldivmod+0x22>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bfbe      	ittt	lt
 8000f4c:	2000      	movlt	r0, #0
 8000f4e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f52:	e006      	blt.n	8000f62 <__aeabi_ldivmod+0x1e>
 8000f54:	bf08      	it	eq
 8000f56:	2800      	cmpeq	r0, #0
 8000f58:	bf1c      	itt	ne
 8000f5a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f5e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f62:	f000 b9a1 	b.w	80012a8 <__aeabi_idiv0>
 8000f66:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f6a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f6e:	2900      	cmp	r1, #0
 8000f70:	db09      	blt.n	8000f86 <__aeabi_ldivmod+0x42>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db1a      	blt.n	8000fac <__aeabi_ldivmod+0x68>
 8000f76:	f000 f835 	bl	8000fe4 <__udivmoddi4>
 8000f7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f82:	b004      	add	sp, #16
 8000f84:	4770      	bx	lr
 8000f86:	4240      	negs	r0, r0
 8000f88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db1b      	blt.n	8000fc8 <__aeabi_ldivmod+0x84>
 8000f90:	f000 f828 	bl	8000fe4 <__udivmoddi4>
 8000f94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9c:	b004      	add	sp, #16
 8000f9e:	4240      	negs	r0, r0
 8000fa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa4:	4252      	negs	r2, r2
 8000fa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000faa:	4770      	bx	lr
 8000fac:	4252      	negs	r2, r2
 8000fae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fb2:	f000 f817 	bl	8000fe4 <__udivmoddi4>
 8000fb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fbe:	b004      	add	sp, #16
 8000fc0:	4240      	negs	r0, r0
 8000fc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fc6:	4770      	bx	lr
 8000fc8:	4252      	negs	r2, r2
 8000fca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fce:	f000 f809 	bl	8000fe4 <__udivmoddi4>
 8000fd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fda:	b004      	add	sp, #16
 8000fdc:	4252      	negs	r2, r2
 8000fde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fe2:	4770      	bx	lr

08000fe4 <__udivmoddi4>:
 8000fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe8:	9e08      	ldr	r6, [sp, #32]
 8000fea:	460d      	mov	r5, r1
 8000fec:	4604      	mov	r4, r0
 8000fee:	468e      	mov	lr, r1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f040 8083 	bne.w	80010fc <__udivmoddi4+0x118>
 8000ff6:	428a      	cmp	r2, r1
 8000ff8:	4617      	mov	r7, r2
 8000ffa:	d947      	bls.n	800108c <__udivmoddi4+0xa8>
 8000ffc:	fab2 f382 	clz	r3, r2
 8001000:	b14b      	cbz	r3, 8001016 <__udivmoddi4+0x32>
 8001002:	f1c3 0120 	rsb	r1, r3, #32
 8001006:	fa05 fe03 	lsl.w	lr, r5, r3
 800100a:	fa20 f101 	lsr.w	r1, r0, r1
 800100e:	409f      	lsls	r7, r3
 8001010:	ea41 0e0e 	orr.w	lr, r1, lr
 8001014:	409c      	lsls	r4, r3
 8001016:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800101a:	fbbe fcf8 	udiv	ip, lr, r8
 800101e:	fa1f f987 	uxth.w	r9, r7
 8001022:	fb08 e21c 	mls	r2, r8, ip, lr
 8001026:	fb0c f009 	mul.w	r0, ip, r9
 800102a:	0c21      	lsrs	r1, r4, #16
 800102c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001030:	4290      	cmp	r0, r2
 8001032:	d90a      	bls.n	800104a <__udivmoddi4+0x66>
 8001034:	18ba      	adds	r2, r7, r2
 8001036:	f10c 31ff 	add.w	r1, ip, #4294967295
 800103a:	f080 8118 	bcs.w	800126e <__udivmoddi4+0x28a>
 800103e:	4290      	cmp	r0, r2
 8001040:	f240 8115 	bls.w	800126e <__udivmoddi4+0x28a>
 8001044:	f1ac 0c02 	sub.w	ip, ip, #2
 8001048:	443a      	add	r2, r7
 800104a:	1a12      	subs	r2, r2, r0
 800104c:	fbb2 f0f8 	udiv	r0, r2, r8
 8001050:	fb08 2210 	mls	r2, r8, r0, r2
 8001054:	fb00 f109 	mul.w	r1, r0, r9
 8001058:	b2a4      	uxth	r4, r4
 800105a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800105e:	42a1      	cmp	r1, r4
 8001060:	d909      	bls.n	8001076 <__udivmoddi4+0x92>
 8001062:	193c      	adds	r4, r7, r4
 8001064:	f100 32ff 	add.w	r2, r0, #4294967295
 8001068:	f080 8103 	bcs.w	8001272 <__udivmoddi4+0x28e>
 800106c:	42a1      	cmp	r1, r4
 800106e:	f240 8100 	bls.w	8001272 <__udivmoddi4+0x28e>
 8001072:	3802      	subs	r0, #2
 8001074:	443c      	add	r4, r7
 8001076:	1a64      	subs	r4, r4, r1
 8001078:	2100      	movs	r1, #0
 800107a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800107e:	b11e      	cbz	r6, 8001088 <__udivmoddi4+0xa4>
 8001080:	2200      	movs	r2, #0
 8001082:	40dc      	lsrs	r4, r3
 8001084:	e9c6 4200 	strd	r4, r2, [r6]
 8001088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108c:	b902      	cbnz	r2, 8001090 <__udivmoddi4+0xac>
 800108e:	deff      	udf	#255	; 0xff
 8001090:	fab2 f382 	clz	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d14f      	bne.n	8001138 <__udivmoddi4+0x154>
 8001098:	1a8d      	subs	r5, r1, r2
 800109a:	2101      	movs	r1, #1
 800109c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80010a0:	fa1f f882 	uxth.w	r8, r2
 80010a4:	fbb5 fcfe 	udiv	ip, r5, lr
 80010a8:	fb0e 551c 	mls	r5, lr, ip, r5
 80010ac:	fb08 f00c 	mul.w	r0, r8, ip
 80010b0:	0c22      	lsrs	r2, r4, #16
 80010b2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80010b6:	42a8      	cmp	r0, r5
 80010b8:	d907      	bls.n	80010ca <__udivmoddi4+0xe6>
 80010ba:	197d      	adds	r5, r7, r5
 80010bc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80010c0:	d202      	bcs.n	80010c8 <__udivmoddi4+0xe4>
 80010c2:	42a8      	cmp	r0, r5
 80010c4:	f200 80e9 	bhi.w	800129a <__udivmoddi4+0x2b6>
 80010c8:	4694      	mov	ip, r2
 80010ca:	1a2d      	subs	r5, r5, r0
 80010cc:	fbb5 f0fe 	udiv	r0, r5, lr
 80010d0:	fb0e 5510 	mls	r5, lr, r0, r5
 80010d4:	fb08 f800 	mul.w	r8, r8, r0
 80010d8:	b2a4      	uxth	r4, r4
 80010da:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010de:	45a0      	cmp	r8, r4
 80010e0:	d907      	bls.n	80010f2 <__udivmoddi4+0x10e>
 80010e2:	193c      	adds	r4, r7, r4
 80010e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80010e8:	d202      	bcs.n	80010f0 <__udivmoddi4+0x10c>
 80010ea:	45a0      	cmp	r8, r4
 80010ec:	f200 80d9 	bhi.w	80012a2 <__udivmoddi4+0x2be>
 80010f0:	4610      	mov	r0, r2
 80010f2:	eba4 0408 	sub.w	r4, r4, r8
 80010f6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010fa:	e7c0      	b.n	800107e <__udivmoddi4+0x9a>
 80010fc:	428b      	cmp	r3, r1
 80010fe:	d908      	bls.n	8001112 <__udivmoddi4+0x12e>
 8001100:	2e00      	cmp	r6, #0
 8001102:	f000 80b1 	beq.w	8001268 <__udivmoddi4+0x284>
 8001106:	2100      	movs	r1, #0
 8001108:	e9c6 0500 	strd	r0, r5, [r6]
 800110c:	4608      	mov	r0, r1
 800110e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001112:	fab3 f183 	clz	r1, r3
 8001116:	2900      	cmp	r1, #0
 8001118:	d14b      	bne.n	80011b2 <__udivmoddi4+0x1ce>
 800111a:	42ab      	cmp	r3, r5
 800111c:	d302      	bcc.n	8001124 <__udivmoddi4+0x140>
 800111e:	4282      	cmp	r2, r0
 8001120:	f200 80b9 	bhi.w	8001296 <__udivmoddi4+0x2b2>
 8001124:	1a84      	subs	r4, r0, r2
 8001126:	eb65 0303 	sbc.w	r3, r5, r3
 800112a:	2001      	movs	r0, #1
 800112c:	469e      	mov	lr, r3
 800112e:	2e00      	cmp	r6, #0
 8001130:	d0aa      	beq.n	8001088 <__udivmoddi4+0xa4>
 8001132:	e9c6 4e00 	strd	r4, lr, [r6]
 8001136:	e7a7      	b.n	8001088 <__udivmoddi4+0xa4>
 8001138:	409f      	lsls	r7, r3
 800113a:	f1c3 0220 	rsb	r2, r3, #32
 800113e:	40d1      	lsrs	r1, r2
 8001140:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001144:	fbb1 f0fe 	udiv	r0, r1, lr
 8001148:	fa1f f887 	uxth.w	r8, r7
 800114c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001150:	fa24 f202 	lsr.w	r2, r4, r2
 8001154:	409d      	lsls	r5, r3
 8001156:	fb00 fc08 	mul.w	ip, r0, r8
 800115a:	432a      	orrs	r2, r5
 800115c:	0c15      	lsrs	r5, r2, #16
 800115e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001162:	45ac      	cmp	ip, r5
 8001164:	fa04 f403 	lsl.w	r4, r4, r3
 8001168:	d909      	bls.n	800117e <__udivmoddi4+0x19a>
 800116a:	197d      	adds	r5, r7, r5
 800116c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001170:	f080 808f 	bcs.w	8001292 <__udivmoddi4+0x2ae>
 8001174:	45ac      	cmp	ip, r5
 8001176:	f240 808c 	bls.w	8001292 <__udivmoddi4+0x2ae>
 800117a:	3802      	subs	r0, #2
 800117c:	443d      	add	r5, r7
 800117e:	eba5 050c 	sub.w	r5, r5, ip
 8001182:	fbb5 f1fe 	udiv	r1, r5, lr
 8001186:	fb0e 5c11 	mls	ip, lr, r1, r5
 800118a:	fb01 f908 	mul.w	r9, r1, r8
 800118e:	b295      	uxth	r5, r2
 8001190:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001194:	45a9      	cmp	r9, r5
 8001196:	d907      	bls.n	80011a8 <__udivmoddi4+0x1c4>
 8001198:	197d      	adds	r5, r7, r5
 800119a:	f101 32ff 	add.w	r2, r1, #4294967295
 800119e:	d274      	bcs.n	800128a <__udivmoddi4+0x2a6>
 80011a0:	45a9      	cmp	r9, r5
 80011a2:	d972      	bls.n	800128a <__udivmoddi4+0x2a6>
 80011a4:	3902      	subs	r1, #2
 80011a6:	443d      	add	r5, r7
 80011a8:	eba5 0509 	sub.w	r5, r5, r9
 80011ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011b0:	e778      	b.n	80010a4 <__udivmoddi4+0xc0>
 80011b2:	f1c1 0720 	rsb	r7, r1, #32
 80011b6:	408b      	lsls	r3, r1
 80011b8:	fa22 fc07 	lsr.w	ip, r2, r7
 80011bc:	ea4c 0c03 	orr.w	ip, ip, r3
 80011c0:	fa25 f407 	lsr.w	r4, r5, r7
 80011c4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011c8:	fbb4 f9fe 	udiv	r9, r4, lr
 80011cc:	fa1f f88c 	uxth.w	r8, ip
 80011d0:	fb0e 4419 	mls	r4, lr, r9, r4
 80011d4:	fa20 f307 	lsr.w	r3, r0, r7
 80011d8:	fb09 fa08 	mul.w	sl, r9, r8
 80011dc:	408d      	lsls	r5, r1
 80011de:	431d      	orrs	r5, r3
 80011e0:	0c2b      	lsrs	r3, r5, #16
 80011e2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80011e6:	45a2      	cmp	sl, r4
 80011e8:	fa02 f201 	lsl.w	r2, r2, r1
 80011ec:	fa00 f301 	lsl.w	r3, r0, r1
 80011f0:	d909      	bls.n	8001206 <__udivmoddi4+0x222>
 80011f2:	eb1c 0404 	adds.w	r4, ip, r4
 80011f6:	f109 30ff 	add.w	r0, r9, #4294967295
 80011fa:	d248      	bcs.n	800128e <__udivmoddi4+0x2aa>
 80011fc:	45a2      	cmp	sl, r4
 80011fe:	d946      	bls.n	800128e <__udivmoddi4+0x2aa>
 8001200:	f1a9 0902 	sub.w	r9, r9, #2
 8001204:	4464      	add	r4, ip
 8001206:	eba4 040a 	sub.w	r4, r4, sl
 800120a:	fbb4 f0fe 	udiv	r0, r4, lr
 800120e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001212:	fb00 fa08 	mul.w	sl, r0, r8
 8001216:	b2ad      	uxth	r5, r5
 8001218:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800121c:	45a2      	cmp	sl, r4
 800121e:	d908      	bls.n	8001232 <__udivmoddi4+0x24e>
 8001220:	eb1c 0404 	adds.w	r4, ip, r4
 8001224:	f100 35ff 	add.w	r5, r0, #4294967295
 8001228:	d22d      	bcs.n	8001286 <__udivmoddi4+0x2a2>
 800122a:	45a2      	cmp	sl, r4
 800122c:	d92b      	bls.n	8001286 <__udivmoddi4+0x2a2>
 800122e:	3802      	subs	r0, #2
 8001230:	4464      	add	r4, ip
 8001232:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001236:	fba0 8902 	umull	r8, r9, r0, r2
 800123a:	eba4 040a 	sub.w	r4, r4, sl
 800123e:	454c      	cmp	r4, r9
 8001240:	46c6      	mov	lr, r8
 8001242:	464d      	mov	r5, r9
 8001244:	d319      	bcc.n	800127a <__udivmoddi4+0x296>
 8001246:	d016      	beq.n	8001276 <__udivmoddi4+0x292>
 8001248:	b15e      	cbz	r6, 8001262 <__udivmoddi4+0x27e>
 800124a:	ebb3 020e 	subs.w	r2, r3, lr
 800124e:	eb64 0405 	sbc.w	r4, r4, r5
 8001252:	fa04 f707 	lsl.w	r7, r4, r7
 8001256:	fa22 f301 	lsr.w	r3, r2, r1
 800125a:	431f      	orrs	r7, r3
 800125c:	40cc      	lsrs	r4, r1
 800125e:	e9c6 7400 	strd	r7, r4, [r6]
 8001262:	2100      	movs	r1, #0
 8001264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001268:	4631      	mov	r1, r6
 800126a:	4630      	mov	r0, r6
 800126c:	e70c      	b.n	8001088 <__udivmoddi4+0xa4>
 800126e:	468c      	mov	ip, r1
 8001270:	e6eb      	b.n	800104a <__udivmoddi4+0x66>
 8001272:	4610      	mov	r0, r2
 8001274:	e6ff      	b.n	8001076 <__udivmoddi4+0x92>
 8001276:	4543      	cmp	r3, r8
 8001278:	d2e6      	bcs.n	8001248 <__udivmoddi4+0x264>
 800127a:	ebb8 0e02 	subs.w	lr, r8, r2
 800127e:	eb69 050c 	sbc.w	r5, r9, ip
 8001282:	3801      	subs	r0, #1
 8001284:	e7e0      	b.n	8001248 <__udivmoddi4+0x264>
 8001286:	4628      	mov	r0, r5
 8001288:	e7d3      	b.n	8001232 <__udivmoddi4+0x24e>
 800128a:	4611      	mov	r1, r2
 800128c:	e78c      	b.n	80011a8 <__udivmoddi4+0x1c4>
 800128e:	4681      	mov	r9, r0
 8001290:	e7b9      	b.n	8001206 <__udivmoddi4+0x222>
 8001292:	4608      	mov	r0, r1
 8001294:	e773      	b.n	800117e <__udivmoddi4+0x19a>
 8001296:	4608      	mov	r0, r1
 8001298:	e749      	b.n	800112e <__udivmoddi4+0x14a>
 800129a:	f1ac 0c02 	sub.w	ip, ip, #2
 800129e:	443d      	add	r5, r7
 80012a0:	e713      	b.n	80010ca <__udivmoddi4+0xe6>
 80012a2:	3802      	subs	r0, #2
 80012a4:	443c      	add	r4, r7
 80012a6:	e724      	b.n	80010f2 <__udivmoddi4+0x10e>

080012a8 <__aeabi_idiv0>:
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop

080012ac <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <Ringbuf_init+0x70>)
 80012b2:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <Ringbuf_init+0x74>)
 80012b4:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <Ringbuf_init+0x78>)
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <Ringbuf_init+0x7c>)
 80012ba:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <Ringbuf_init+0x80>)
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <Ringbuf_init+0x84>)
 80012c0:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <Ringbuf_init+0x88>)
 80012c4:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <Ringbuf_init+0x8c>)
 80012c6:	601a      	str	r2, [r3, #0]
  _rx_buffer3 = &rx_buffer3;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <Ringbuf_init+0x90>)
 80012ca:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <Ringbuf_init+0x94>)
 80012cc:	601a      	str	r2, [r3, #0]
  _tx_buffer3 = &tx_buffer3;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <Ringbuf_init+0x98>)
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <Ringbuf_init+0x9c>)
 80012d2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
 // __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <Ringbuf_init+0xa0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <Ringbuf_init+0xa0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(lora_uart, UART_IT_ERR);
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <Ringbuf_init+0xa4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <Ringbuf_init+0xa4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  //__HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <Ringbuf_init+0xa0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <Ringbuf_init+0xa0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0220 	orr.w	r2, r2, #32
 8001302:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(lora_uart, UART_IT_RXNE);
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <Ringbuf_init+0xa4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <Ringbuf_init+0xa4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0220 	orr.w	r2, r2, #32
 8001312:	60da      	str	r2, [r3, #12]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	20000e38 	.word	0x20000e38
 8001320:	200001f8 	.word	0x200001f8
 8001324:	20000e3c 	.word	0x20000e3c
 8001328:	20000400 	.word	0x20000400
 800132c:	20000e48 	.word	0x20000e48
 8001330:	20000608 	.word	0x20000608
 8001334:	20000e34 	.word	0x20000e34
 8001338:	20000810 	.word	0x20000810
 800133c:	20000e40 	.word	0x20000e40
 8001340:	20000a18 	.word	0x20000a18
 8001344:	20000e44 	.word	0x20000e44
 8001348:	20000c20 	.word	0x20000c20
 800134c:	20000f6c 	.word	0x20000f6c
 8001350:	20000ecc 	.word	0x20000ecc

08001354 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001366:	3301      	adds	r3, #1
 8001368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800136c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	429a      	cmp	r2, r3
 8001378:	d009      	beq.n	800138e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	79f9      	ldrb	r1, [r7, #7]
 8001384:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7fe fed4 	bl	8000150 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	f7fe fecf 	bl	8000150 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
	int indx = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 80013be:	e002      	b.n	80013c6 <Look_for+0x2e>
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	3301      	adds	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	781a      	ldrb	r2, [r3, #0]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	6839      	ldr	r1, [r7, #0]
 80013d2:	440b      	add	r3, r1
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d1f2      	bne.n	80013c0 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	781a      	ldrb	r2, [r3, #0]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	6839      	ldr	r1, [r7, #0]
 80013e6:	440b      	add	r3, r1
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d111      	bne.n	8001412 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 80013ee:	e005      	b.n	80013fc <Look_for+0x64>
	{
		so_far++;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
		indx++;
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	3301      	adds	r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	440b      	add	r3, r1
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d0ef      	beq.n	80013f0 <Look_for+0x58>
 8001410:	e008      	b.n	8001424 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	429a      	cmp	r2, r3
 800141c:	dbcf      	blt.n	80013be <Look_for+0x26>
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	e007      	b.n	8001434 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d101      	bne.n	8001430 <Look_for+0x98>
 800142c:	2301      	movs	r3, #1
 800142e:	e001      	b.n	8001434 <Look_for+0x9c>
	else return -1;
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <Uart_read>:

	return -1;
}

int Uart_read(UART_HandleTypeDef *uart)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	if (uart == pc_uart)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a29      	ldr	r2, [pc, #164]	; (80014ec <Uart_read+0xb0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d121      	bne.n	8001490 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <Uart_read+0xb4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <Uart_read+0xb4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800145c:	429a      	cmp	r2, r3
 800145e:	d102      	bne.n	8001466 <Uart_read+0x2a>
		  {
		    return -1;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	e03c      	b.n	80014e0 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <Uart_read+0xb4>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <Uart_read+0xb4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <Uart_read+0xb4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <Uart_read+0xb4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001488:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 800148c:	7bbb      	ldrb	r3, [r7, #14]
 800148e:	e027      	b.n	80014e0 <Uart_read+0xa4>
		  }
	}

	else if (uart == lora_uart)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <Uart_read+0xb8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d121      	bne.n	80014dc <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer3->head == _rx_buffer3->tail)
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <Uart_read+0xbc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <Uart_read+0xbc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d102      	bne.n	80014b2 <Uart_read+0x76>
		  {
		    return -1;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	e016      	b.n	80014e0 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer3->buffer[_rx_buffer3->tail];
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <Uart_read+0xbc>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <Uart_read+0xbc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer3->tail = (unsigned int)(_rx_buffer3->tail + 1) % UART_BUFFER_SIZE;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <Uart_read+0xbc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <Uart_read+0xbc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	e001      	b.n	80014e0 <Uart_read+0xa4>
		  }
	}


	else return -1;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000f6c 	.word	0x20000f6c
 80014f0:	20000e48 	.word	0x20000e48
 80014f4:	20000ecc 	.word	0x20000ecc
 80014f8:	20000e40 	.word	0x20000e40

080014fc <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)//parameter errror
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db54      	blt.n	80015b6 <Uart_write+0xba>
	{
		if (uart == pc_uart){
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4a2c      	ldr	r2, [pc, #176]	; (80015c0 <Uart_write+0xc4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d126      	bne.n	8001562 <Uart_write+0x66>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <Uart_write+0xc8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800151c:	3301      	adds	r3, #1
 800151e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001522:	60bb      	str	r3, [r7, #8]

			// If the output buffer is full, there's nothing for it other than to
			// wait for the interrupt handler to empty it a bit
			// ???: return 0 here instead?
			while (i == _tx_buffer2->tail);
 8001524:	bf00      	nop
 8001526:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <Uart_write+0xc8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	429a      	cmp	r2, r3
 8001532:	d0f8      	beq.n	8001526 <Uart_write+0x2a>

			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <Uart_write+0xc8>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <Uart_write+0xc8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	b2c9      	uxtb	r1, r1
 8001544:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <Uart_write+0xc8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <Uart_write+0xc4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <Uart_write+0xc4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800155e:	60da      	str	r2, [r3, #12]

			__HAL_UART_ENABLE_IT(lora_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}

	}
}
 8001560:	e029      	b.n	80015b6 <Uart_write+0xba>
		else if (uart == lora_uart){
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	4a18      	ldr	r2, [pc, #96]	; (80015c8 <Uart_write+0xcc>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d125      	bne.n	80015b6 <Uart_write+0xba>
			int i = (_tx_buffer3->head + 1) % UART_BUFFER_SIZE;
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <Uart_write+0xd0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001572:	3301      	adds	r3, #1
 8001574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001578:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer3->tail);
 800157a:	bf00      	nop
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <Uart_write+0xd0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	429a      	cmp	r2, r3
 8001588:	d0f8      	beq.n	800157c <Uart_write+0x80>
			_tx_buffer3->buffer[_tx_buffer3->head] = (uint8_t)c;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <Uart_write+0xd0>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <Uart_write+0xd0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	b2c9      	uxtb	r1, r1
 800159a:	54d1      	strb	r1, [r2, r3]
			_tx_buffer3->head = i;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <Uart_write+0xd0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(lora_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <Uart_write+0xcc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <Uart_write+0xcc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015b4:	60da      	str	r2, [r3, #12]
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000f6c 	.word	0x20000f6c
 80015c4:	20000e34 	.word	0x20000e34
 80015c8:	20000ecc 	.word	0x20000ecc
 80015cc:	20000e44 	.word	0x20000e44

080015d0 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

	if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a19      	ldr	r2, [pc, #100]	; (8001640 <IsDataAvailable+0x70>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d111      	bne.n	8001604 <IsDataAvailable+0x34>
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <IsDataAvailable+0x74>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <IsDataAvailable+0x74>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001602:	e017      	b.n	8001634 <IsDataAvailable+0x64>
	else if (uart == lora_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer3->head - _rx_buffer3->tail) % UART_BUFFER_SIZE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <IsDataAvailable+0x78>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d111      	bne.n	8001630 <IsDataAvailable+0x60>
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <IsDataAvailable+0x7c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001614:	b29a      	uxth	r2, r3
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <IsDataAvailable+0x7c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800161e:	b29b      	uxth	r3, r3
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	b29b      	uxth	r3, r3
 8001624:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001628:	b29b      	uxth	r3, r3
 800162a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800162e:	e001      	b.n	8001634 <IsDataAvailable+0x64>
	return -1;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000f6c 	.word	0x20000f6c
 8001644:	20000e48 	.word	0x20000e48
 8001648:	20000ecc 	.word	0x20000ecc
 800164c:	20000e40 	.word	0x20000e40

08001650 <Uart_sendstring>:
	}
	return 1;
}

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 800165a:	e007      	b.n	800166c <Uart_sendstring+0x1c>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	6839      	ldr	r1, [r7, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff48 	bl	80014fc <Uart_write>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f3      	bne.n	800165c <Uart_sendstring+0xc>
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <Uart_isr>:
	if (so_far == len) return 1;
	else return -1;
}

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d023      	beq.n	80016ea <Uart_isr+0x6a>
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01e      	beq.n	80016ea <Uart_isr+0x6a>
    {

		huart->Instance->SR;                       /* Read status register */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	73fb      	strb	r3, [r7, #15]

        if (huart == pc_uart)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a3f      	ldr	r2, [pc, #252]	; (80017bc <Uart_isr+0x13c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d107      	bne.n	80016d2 <Uart_isr+0x52>
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <Uart_isr+0x140>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe42 	bl	8001354 <store_char>
           	store_char (c, _rx_buffer3);  // store data in buffer
        }



        return;
 80016d0:	e06d      	b.n	80017ae <Uart_isr+0x12e>
        else if (huart == lora_uart)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <Uart_isr+0x144>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d169      	bne.n	80017ae <Uart_isr+0x12e>
           	store_char (c, _rx_buffer3);  // store data in buffer
 80016da:	4b3b      	ldr	r3, [pc, #236]	; (80017c8 <Uart_isr+0x148>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fe36 	bl	8001354 <store_char>
        return;
 80016e8:	e061      	b.n	80017ae <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d05f      	beq.n	80017b4 <Uart_isr+0x134>
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d05a      	beq.n	80017b4 <Uart_isr+0x134>
    {

    	if (huart == pc_uart){
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a2e      	ldr	r2, [pc, #184]	; (80017bc <Uart_isr+0x13c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d127      	bne.n	8001756 <Uart_isr+0xd6>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001706:	4b31      	ldr	r3, [pc, #196]	; (80017cc <Uart_isr+0x14c>)
 8001708:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800170c:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <Uart_isr+0x14c>)
 800170e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001712:	429a      	cmp	r2, r3
 8001714:	d108      	bne.n	8001728 <Uart_isr+0xa8>
        	    {
        	      // Buffer empty, so disable interrupts
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001724:	60da      	str	r2, [r3, #12]
        	      huart->Instance->DR = c;

        	    }
        	}

    	return;
 8001726:	e044      	b.n	80017b2 <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <Uart_isr+0x14c>)
 800172a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800172e:	4a27      	ldr	r2, [pc, #156]	; (80017cc <Uart_isr+0x14c>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	737b      	strb	r3, [r7, #13]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <Uart_isr+0x14c>)
 8001736:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800173a:	3301      	adds	r3, #1
 800173c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001740:	4a22      	ldr	r2, [pc, #136]	; (80017cc <Uart_isr+0x14c>)
 8001742:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	7b7a      	ldrb	r2, [r7, #13]
 8001752:	605a      	str	r2, [r3, #4]
    	return;
 8001754:	e02d      	b.n	80017b2 <Uart_isr+0x132>
    	else if (huart == lora_uart){
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <Uart_isr+0x144>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d129      	bne.n	80017b2 <Uart_isr+0x132>
        	if(tx_buffer3.head == tx_buffer3.tail)
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <Uart_isr+0x150>)
 8001760:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <Uart_isr+0x150>)
 8001766:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800176a:	429a      	cmp	r2, r3
 800176c:	d108      	bne.n	8001780 <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800177c:	60da      	str	r2, [r3, #12]
    	return;
 800177e:	e018      	b.n	80017b2 <Uart_isr+0x132>
        	      unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <Uart_isr+0x150>)
 8001782:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <Uart_isr+0x150>)
 8001788:	5cd3      	ldrb	r3, [r2, r3]
 800178a:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer3.tail = (tx_buffer3.tail + 1) % UART_BUFFER_SIZE;
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <Uart_isr+0x150>)
 800178e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001792:	3301      	adds	r3, #1
 8001794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <Uart_isr+0x150>)
 800179a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	7bba      	ldrb	r2, [r7, #14]
 80017aa:	605a      	str	r2, [r3, #4]
    	return;
 80017ac:	e001      	b.n	80017b2 <Uart_isr+0x132>
        return;
 80017ae:	bf00      	nop
 80017b0:	e000      	b.n	80017b4 <Uart_isr+0x134>
    	return;
 80017b2:	bf00      	nop
    }
}
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000f6c 	.word	0x20000f6c
 80017c0:	20000e48 	.word	0x20000e48
 80017c4:	20000ecc 	.word	0x20000ecc
 80017c8:	20000e40 	.word	0x20000e40
 80017cc:	20000810 	.word	0x20000810
 80017d0:	20000c20 	.word	0x20000c20

080017d4 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2203      	movs	r2, #3
 80017e0:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2203      	movs	r2, #3
 80017ec:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2203      	movs	r2, #3
 80017f2:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2203      	movs	r2, #3
 80017f8:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2203      	movs	r2, #3
 80017fe:	715a      	strb	r2, [r3, #5]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800180a:	b580      	push	{r7, lr}
 800180c:	b08a      	sub	sp, #40	; 0x28
 800180e:	af04      	add	r7, sp, #16
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	460b      	mov	r3, r1
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001824:	7afb      	ldrb	r3, [r7, #11]
 8001826:	b29a      	uxth	r2, r3
 8001828:	8af9      	ldrh	r1, [r7, #22]
 800182a:	f241 3388 	movw	r3, #5000	; 0x1388
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	2302      	movs	r3, #2
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2301      	movs	r3, #1
 800183c:	f001 ff7c 	bl	8003738 <HAL_I2C_Mem_Read>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10b      	bne.n	800185e <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001846:	7d7b      	ldrb	r3, [r7, #21]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b21a      	sxth	r2, r3
 800184c:	7d3b      	ldrb	r3, [r7, #20]
 800184e:	b21b      	sxth	r3, r3
 8001850:	4313      	orrs	r3, r2
 8001852:	b21b      	sxth	r3, r3
 8001854:	b29a      	uxth	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	801a      	strh	r2, [r3, #0]
		return true;
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <read_register16+0x56>
	} else
		return false;
 800185e:	2300      	movs	r3, #0

}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b08b      	sub	sp, #44	; 0x2c
 800186c:	af04      	add	r7, sp, #16
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	461a      	mov	r2, r3
 8001874:	460b      	mov	r3, r1
 8001876:	72fb      	strb	r3, [r7, #11]
 8001878:	4613      	mov	r3, r2
 800187a:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001888:	7afb      	ldrb	r3, [r7, #11]
 800188a:	b29a      	uxth	r2, r3
 800188c:	7abb      	ldrb	r3, [r7, #10]
 800188e:	b29b      	uxth	r3, r3
 8001890:	8af9      	ldrh	r1, [r7, #22]
 8001892:	f241 3488 	movw	r4, #5000	; 0x1388
 8001896:	9402      	str	r4, [sp, #8]
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2301      	movs	r3, #1
 80018a0:	f001 ff4a 	bl	8003738 <HAL_I2C_Mem_Read>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <read_data+0x46>
		return 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <read_data+0x48>
	else
		return 1;
 80018ae:	2301      	movs	r3, #1

}
 80018b0:	4618      	mov	r0, r3
 80018b2:	371c      	adds	r7, #28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd90      	pop	{r4, r7, pc}

080018b8 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	461a      	mov	r2, r3
 80018c4:	2188      	movs	r1, #136	; 0x88
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ff9f 	bl	800180a <read_register16>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d06f      	beq.n	80019b2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3302      	adds	r3, #2
 80018d6:	461a      	mov	r2, r3
 80018d8:	218a      	movs	r1, #138	; 0x8a
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff95 	bl	800180a <read_register16>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d065      	beq.n	80019b2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	461a      	mov	r2, r3
 80018ec:	218c      	movs	r1, #140	; 0x8c
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ff8b 	bl	800180a <read_register16>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d05b      	beq.n	80019b2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3306      	adds	r3, #6
 80018fe:	461a      	mov	r2, r3
 8001900:	218e      	movs	r1, #142	; 0x8e
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ff81 	bl	800180a <read_register16>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d051      	beq.n	80019b2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3308      	adds	r3, #8
 8001912:	461a      	mov	r2, r3
 8001914:	2190      	movs	r1, #144	; 0x90
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff77 	bl	800180a <read_register16>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d047      	beq.n	80019b2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	330a      	adds	r3, #10
 8001926:	461a      	mov	r2, r3
 8001928:	2192      	movs	r1, #146	; 0x92
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ff6d 	bl	800180a <read_register16>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d03d      	beq.n	80019b2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	330c      	adds	r3, #12
 800193a:	461a      	mov	r2, r3
 800193c:	2194      	movs	r1, #148	; 0x94
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ff63 	bl	800180a <read_register16>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d033      	beq.n	80019b2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	330e      	adds	r3, #14
 800194e:	461a      	mov	r2, r3
 8001950:	2196      	movs	r1, #150	; 0x96
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff59 	bl	800180a <read_register16>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d029      	beq.n	80019b2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3310      	adds	r3, #16
 8001962:	461a      	mov	r2, r3
 8001964:	2198      	movs	r1, #152	; 0x98
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ff4f 	bl	800180a <read_register16>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01f      	beq.n	80019b2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3312      	adds	r3, #18
 8001976:	461a      	mov	r2, r3
 8001978:	219a      	movs	r1, #154	; 0x9a
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ff45 	bl	800180a <read_register16>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d015      	beq.n	80019b2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3314      	adds	r3, #20
 800198a:	461a      	mov	r2, r3
 800198c:	219c      	movs	r1, #156	; 0x9c
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ff3b 	bl	800180a <read_register16>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800199e:	461a      	mov	r2, r3
 80019a0:	219e      	movs	r1, #158	; 0x9e
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff31 	bl	800180a <read_register16>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <read_calibration_data+0xfa>

		return true;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <read_calibration_data+0xfc>
	}

	return false;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f103 0218 	add.w	r2, r3, #24
 80019ca:	2301      	movs	r3, #1
 80019cc:	21a1      	movs	r1, #161	; 0xa1
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ff4a 	bl	8001868 <read_data>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d14b      	bne.n	8001a72 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	331a      	adds	r3, #26
 80019de:	461a      	mov	r2, r3
 80019e0:	21e1      	movs	r1, #225	; 0xe1
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ff11 	bl	800180a <read_register16>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d041      	beq.n	8001a72 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f103 021c 	add.w	r2, r3, #28
 80019f4:	2301      	movs	r3, #1
 80019f6:	21e3      	movs	r1, #227	; 0xe3
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff35 	bl	8001868 <read_data>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d136      	bne.n	8001a72 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001a04:	f107 030e 	add.w	r3, r7, #14
 8001a08:	461a      	mov	r2, r3
 8001a0a:	21e4      	movs	r1, #228	; 0xe4
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fefc 	bl	800180a <read_register16>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d02c      	beq.n	8001a72 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	21e5      	movs	r1, #229	; 0xe5
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fef2 	bl	800180a <read_register16>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d022      	beq.n	8001a72 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001a32:	2301      	movs	r3, #1
 8001a34:	21e7      	movs	r1, #231	; 0xe7
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ff16 	bl	8001868 <read_data>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d117      	bne.n	8001a72 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001a42:	89fb      	ldrh	r3, [r7, #14]
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
 8001a50:	121b      	asrs	r3, r3, #8
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001a62:	89bb      	ldrh	r3, [r7, #12]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	841a      	strh	r2, [r3, #32]

		return true;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af04      	add	r7, sp, #16
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	89f9      	ldrh	r1, [r7, #14]
 8001a9e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001aa2:	9302      	str	r3, [sp, #8]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	1cbb      	adds	r3, r7, #2
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2301      	movs	r3, #1
 8001aae:	f001 fd49 	bl	8003544 <HAL_I2C_Mem_Write>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <write_register8+0x40>
		return false;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e000      	b.n	8001abe <write_register8+0x42>
	else
		return true;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ad4:	2b76      	cmp	r3, #118	; 0x76
 8001ad6:	d005      	beq.n	8001ae4 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001adc:	2b77      	cmp	r3, #119	; 0x77
 8001ade:	d001      	beq.n	8001ae4 <bmp280_init+0x1e>

		return false;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e099      	b.n	8001c18 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001aea:	2301      	movs	r3, #1
 8001aec:	21d0      	movs	r1, #208	; 0xd0
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff feba 	bl	8001868 <read_data>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <bmp280_init+0x38>
		return false;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e08c      	b.n	8001c18 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b04:	2b58      	cmp	r3, #88	; 0x58
 8001b06:	d006      	beq.n	8001b16 <bmp280_init+0x50>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b0e:	2b60      	cmp	r3, #96	; 0x60
 8001b10:	d001      	beq.n	8001b16 <bmp280_init+0x50>

		return false;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e080      	b.n	8001c18 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001b16:	22b6      	movs	r2, #182	; 0xb6
 8001b18:	21e0      	movs	r1, #224	; 0xe0
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffae 	bl	8001a7c <write_register8>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <bmp280_init+0x64>
		return false;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e076      	b.n	8001c18 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001b2a:	f107 020c 	add.w	r2, r7, #12
 8001b2e:	2301      	movs	r3, #1
 8001b30:	21f3      	movs	r1, #243	; 0xf3
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fe98 	bl	8001868 <read_data>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f5      	bne.n	8001b2a <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001b3e:	7b3b      	ldrb	r3, [r7, #12]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff feb5 	bl	80018b8 <read_calibration_data>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f083 0301 	eor.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d100      	bne.n	8001b5c <bmp280_init+0x96>
 8001b5a:	e001      	b.n	8001b60 <bmp280_init+0x9a>
		return false;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e05b      	b.n	8001c18 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b66:	2b60      	cmp	r3, #96	; 0x60
 8001b68:	d10a      	bne.n	8001b80 <bmp280_init+0xba>
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ff26 	bl	80019bc <read_hum_calibration_data>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f083 0301 	eor.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <bmp280_init+0xba>
		return false;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e04b      	b.n	8001c18 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	795b      	ldrb	r3, [r3, #5]
 8001b84:	015b      	lsls	r3, r3, #5
 8001b86:	b25a      	sxtb	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	785b      	ldrb	r3, [r3, #1]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	b25b      	sxtb	r3, r3
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b25b      	sxtb	r3, r3
 8001b94:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	21f5      	movs	r1, #245	; 0xf5
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff6d 	bl	8001a7c <write_register8>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <bmp280_init+0xe6>
		return false;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e035      	b.n	8001c18 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d102      	bne.n	8001bba <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	78db      	ldrb	r3, [r3, #3]
 8001bbe:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001bc0:	b25a      	sxtb	r2, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	789b      	ldrb	r3, [r3, #2]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b25a      	sxtb	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001bd8:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001be0:	2b60      	cmp	r3, #96	; 0x60
 8001be2:	d10d      	bne.n	8001c00 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001bea:	7b7b      	ldrb	r3, [r7, #13]
 8001bec:	461a      	mov	r2, r3
 8001bee:	21f2      	movs	r1, #242	; 0xf2
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff43 	bl	8001a7c <write_register8>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <bmp280_init+0x13a>
			return false;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e00b      	b.n	8001c18 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	461a      	mov	r2, r3
 8001c04:	21f4      	movs	r1, #244	; 0xf4
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ff38 	bl	8001a7c <write_register8>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <bmp280_init+0x150>
		return false;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <bmp280_init+0x152>
	}

	return true;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	10da      	asrs	r2, r3, #3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001c42:	12db      	asrs	r3, r3, #11
 8001c44:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	111b      	asrs	r3, r3, #4
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	8812      	ldrh	r2, [r2, #0]
 8001c4e:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	1112      	asrs	r2, r2, #4
 8001c54:	68f9      	ldr	r1, [r7, #12]
 8001c56:	8809      	ldrh	r1, [r1, #0]
 8001c58:	1a52      	subs	r2, r2, r1
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001c6a:	139b      	asrs	r3, r3, #14
 8001c6c:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	441a      	add	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	3380      	adds	r3, #128	; 0x80
 8001c84:	121b      	asrs	r3, r3, #8
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c94:	b09c      	sub	sp, #112	; 0x70
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6578      	str	r0, [r7, #84]	; 0x54
 8001c9a:	6539      	str	r1, [r7, #80]	; 0x50
 8001c9c:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ca6:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001caa:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001cae:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001cb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cb6:	fb03 f102 	mul.w	r1, r3, r2
 8001cba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001cbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cbe:	fb03 f302 	mul.w	r3, r3, r2
 8001cc2:	18ca      	adds	r2, r1, r3
 8001cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cc6:	fba3 4503 	umull	r4, r5, r3, r3
 8001cca:	1953      	adds	r3, r2, r5
 8001ccc:	461d      	mov	r5, r3
 8001cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001cd4:	b21a      	sxth	r2, r3
 8001cd6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001cda:	fb02 f005 	mul.w	r0, r2, r5
 8001cde:	fb04 f103 	mul.w	r1, r4, r3
 8001ce2:	4401      	add	r1, r0
 8001ce4:	fba4 2302 	umull	r2, r3, r4, r2
 8001ce8:	4419      	add	r1, r3
 8001cea:	460b      	mov	r3, r1
 8001cec:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001cf0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001d02:	fb03 f001 	mul.w	r0, r3, r1
 8001d06:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001d08:	fb02 f101 	mul.w	r1, r2, r1
 8001d0c:	4408      	add	r0, r1
 8001d0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001d10:	fba1 2302 	umull	r2, r3, r1, r2
 8001d14:	18c1      	adds	r1, r0, r3
 8001d16:	460b      	mov	r3, r1
 8001d18:	f04f 0000 	mov.w	r0, #0
 8001d1c:	f04f 0100 	mov.w	r1, #0
 8001d20:	0459      	lsls	r1, r3, #17
 8001d22:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001d26:	0450      	lsls	r0, r2, #17
 8001d28:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d2c:	eb12 0800 	adds.w	r8, r2, r0
 8001d30:	eb43 0901 	adc.w	r9, r3, r1
 8001d34:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d44:	f04f 0000 	mov.w	r0, #0
 8001d48:	f04f 0100 	mov.w	r1, #0
 8001d4c:	00d1      	lsls	r1, r2, #3
 8001d4e:	2000      	movs	r0, #0
 8001d50:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d54:	1814      	adds	r4, r2, r0
 8001d56:	61bc      	str	r4, [r7, #24]
 8001d58:	414b      	adcs	r3, r1
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001d60:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001d64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d68:	fb03 f102 	mul.w	r1, r3, r2
 8001d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d70:	fb03 f302 	mul.w	r3, r3, r2
 8001d74:	18ca      	adds	r2, r1, r3
 8001d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d78:	fba3 4503 	umull	r4, r5, r3, r3
 8001d7c:	1953      	adds	r3, r2, r5
 8001d7e:	461d      	mov	r5, r3
 8001d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d8c:	fb02 f005 	mul.w	r0, r2, r5
 8001d90:	fb04 f103 	mul.w	r1, r4, r3
 8001d94:	4401      	add	r1, r0
 8001d96:	fba4 2302 	umull	r2, r3, r4, r2
 8001d9a:	4419      	add	r1, r3
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	f04f 0800 	mov.w	r8, #0
 8001da2:	f04f 0900 	mov.w	r9, #0
 8001da6:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001daa:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001dae:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001dbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001dc0:	fb03 f001 	mul.w	r0, r3, r1
 8001dc4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001dc6:	fb02 f101 	mul.w	r1, r2, r1
 8001dca:	1844      	adds	r4, r0, r1
 8001dcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001dce:	fba1 0102 	umull	r0, r1, r1, r2
 8001dd2:	1863      	adds	r3, r4, r1
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	030b      	lsls	r3, r1, #12
 8001de0:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001de4:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001de6:	eb18 0102 	adds.w	r1, r8, r2
 8001dea:	6139      	str	r1, [r7, #16]
 8001dec:	eb49 0303 	adc.w	r3, r9, r3
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001df6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001dfa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001dfe:	1c11      	adds	r1, r2, #0
 8001e00:	6439      	str	r1, [r7, #64]	; 0x40
 8001e02:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001e06:	647b      	str	r3, [r7, #68]	; 0x44
 8001e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0a:	88db      	ldrh	r3, [r3, #6]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001e16:	4629      	mov	r1, r5
 8001e18:	fb02 f001 	mul.w	r0, r2, r1
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	fb01 f103 	mul.w	r1, r1, r3
 8001e22:	4401      	add	r1, r0
 8001e24:	4620      	mov	r0, r4
 8001e26:	fba0 2302 	umull	r2, r3, r0, r2
 8001e2a:	4419      	add	r1, r3
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	f04f 0000 	mov.w	r0, #0
 8001e32:	f04f 0100 	mov.w	r1, #0
 8001e36:	1058      	asrs	r0, r3, #1
 8001e38:	17d9      	asrs	r1, r3, #31
 8001e3a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 8001e3e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001e42:	4313      	orrs	r3, r2
 8001e44:	d101      	bne.n	8001e4a <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8001e46:	2300      	movs	r3, #0
 8001e48:	e0e1      	b.n	800200e <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8001e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e4c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001e50:	461a      	mov	r2, r3
 8001e52:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e56:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8001e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e5c:	105b      	asrs	r3, r3, #1
 8001e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e62:	07db      	lsls	r3, r3, #31
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e6a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001e6e:	4621      	mov	r1, r4
 8001e70:	ebb1 0a02 	subs.w	sl, r1, r2
 8001e74:	4629      	mov	r1, r5
 8001e76:	eb61 0b03 	sbc.w	fp, r1, r3
 8001e7a:	4652      	mov	r2, sl
 8001e7c:	465b      	mov	r3, fp
 8001e7e:	1891      	adds	r1, r2, r2
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	415b      	adcs	r3, r3
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e8a:	eb12 020a 	adds.w	r2, r2, sl
 8001e8e:	eb43 030b 	adc.w	r3, r3, fp
 8001e92:	f04f 0000 	mov.w	r0, #0
 8001e96:	f04f 0100 	mov.w	r1, #0
 8001e9a:	0199      	lsls	r1, r3, #6
 8001e9c:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001ea0:	0190      	lsls	r0, r2, #6
 8001ea2:	1812      	adds	r2, r2, r0
 8001ea4:	eb41 0303 	adc.w	r3, r1, r3
 8001ea8:	f04f 0000 	mov.w	r0, #0
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	0099      	lsls	r1, r3, #2
 8001eb2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001eb6:	0090      	lsls	r0, r2, #2
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	eb12 020a 	adds.w	r2, r2, sl
 8001ec0:	eb43 030b 	adc.w	r3, r3, fp
 8001ec4:	f04f 0000 	mov.w	r0, #0
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	0099      	lsls	r1, r3, #2
 8001ece:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001ed2:	0090      	lsls	r0, r2, #2
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	eb12 010a 	adds.w	r1, r2, sl
 8001edc:	6339      	str	r1, [r7, #48]	; 0x30
 8001ede:	eb43 030b 	adc.w	r3, r3, fp
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ee4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001ee8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001eec:	f7ff f82a 	bl	8000f44 <__aeabi_ldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001efe:	b218      	sxth	r0, r3
 8001f00:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f04:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	0b62      	lsrs	r2, r4, #13
 8001f12:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001f16:	136b      	asrs	r3, r5, #13
 8001f18:	fb02 f501 	mul.w	r5, r2, r1
 8001f1c:	fb00 f403 	mul.w	r4, r0, r3
 8001f20:	442c      	add	r4, r5
 8001f22:	fba0 0102 	umull	r0, r1, r0, r2
 8001f26:	1863      	adds	r3, r4, r1
 8001f28:	4619      	mov	r1, r3
 8001f2a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	0b62      	lsrs	r2, r4, #13
 8001f38:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001f3c:	136b      	asrs	r3, r5, #13
 8001f3e:	fb02 f501 	mul.w	r5, r2, r1
 8001f42:	fb00 f403 	mul.w	r4, r0, r3
 8001f46:	442c      	add	r4, r5
 8001f48:	fba0 0102 	umull	r0, r1, r0, r2
 8001f4c:	1863      	adds	r3, r4, r1
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	0e42      	lsrs	r2, r0, #25
 8001f5a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001f5e:	164b      	asrs	r3, r1, #25
 8001f60:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f66:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f6a:	b21a      	sxth	r2, r3
 8001f6c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001f72:	fb03 f001 	mul.w	r0, r3, r1
 8001f76:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001f78:	fb02 f101 	mul.w	r1, r2, r1
 8001f7c:	1844      	adds	r4, r0, r1
 8001f7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001f80:	fba1 0102 	umull	r0, r1, r1, r2
 8001f84:	1863      	adds	r3, r4, r1
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	0cc2      	lsrs	r2, r0, #19
 8001f92:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001f96:	14cb      	asrs	r3, r1, #19
 8001f98:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001f9c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fa0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001fa4:	1884      	adds	r4, r0, r2
 8001fa6:	62bc      	str	r4, [r7, #40]	; 0x28
 8001fa8:	eb41 0303 	adc.w	r3, r1, r3
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001fb2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	1889      	adds	r1, r1, r2
 8001fba:	6239      	str	r1, [r7, #32]
 8001fbc:	4629      	mov	r1, r5
 8001fbe:	eb43 0101 	adc.w	r1, r3, r1
 8001fc2:	6279      	str	r1, [r7, #36]	; 0x24
 8001fc4:	f04f 0000 	mov.w	r0, #0
 8001fc8:	f04f 0100 	mov.w	r1, #0
 8001fcc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fd0:	4623      	mov	r3, r4
 8001fd2:	0a18      	lsrs	r0, r3, #8
 8001fd4:	462b      	mov	r3, r5
 8001fd6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001fda:	462b      	mov	r3, r5
 8001fdc:	1219      	asrs	r1, r3, #8
 8001fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001fe4:	b21c      	sxth	r4, r3
 8001fe6:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	012b      	lsls	r3, r5, #4
 8001ff4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ff8:	0122      	lsls	r2, r4, #4
 8001ffa:	1884      	adds	r4, r0, r2
 8001ffc:	603c      	str	r4, [r7, #0]
 8001ffe:	eb41 0303 	adc.w	r3, r1, r3
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002008:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 800200c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800200e:	4618      	mov	r0, r3
 8002010:	3770      	adds	r7, #112	; 0x70
 8002012:	46bd      	mov	sp, r7
 8002014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002018 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800202a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	039a      	lsls	r2, r3, #14
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002036:	051b      	lsls	r3, r3, #20
 8002038:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002040:	4619      	mov	r1, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	fb03 f301 	mul.w	r3, r3, r1
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800204e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8002056:	4611      	mov	r1, r2
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	fb02 f201 	mul.w	r2, r2, r1
 800205e:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002060:	68f9      	ldr	r1, [r7, #12]
 8002062:	7f09      	ldrb	r1, [r1, #28]
 8002064:	4608      	mov	r0, r1
 8002066:	6979      	ldr	r1, [r7, #20]
 8002068:	fb01 f100 	mul.w	r1, r1, r0
 800206c:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800206e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002072:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002076:	1292      	asrs	r2, r2, #10
 8002078:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800207c:	68f9      	ldr	r1, [r7, #12]
 800207e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002082:	fb01 f202 	mul.w	r2, r1, r2
 8002086:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800208a:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800208c:	fb02 f303 	mul.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	13db      	asrs	r3, r3, #15
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	13d2      	asrs	r2, r2, #15
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	7e12      	ldrb	r2, [r2, #24]
 80020a4:	fb02 f303 	mul.w	r3, r2, r3
 80020a8:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80020b6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80020be:	bfa8      	it	ge
 80020c0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80020c4:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	131b      	asrs	r3, r3, #12
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08c      	sub	sp, #48	; 0x30
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80020e8:	2b60      	cmp	r3, #96	; 0x60
 80020ea:	d007      	beq.n	80020fc <bmp280_read_fixed+0x28>
		if (humidity)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <bmp280_read_fixed+0x32>
 8002102:	2308      	movs	r3, #8
 8002104:	e000      	b.n	8002108 <bmp280_read_fixed+0x34>
 8002106:	2306      	movs	r3, #6
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f107 0218 	add.w	r2, r7, #24
 8002112:	21f7      	movs	r1, #247	; 0xf7
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7ff fba7 	bl	8001868 <read_data>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <bmp280_read_fixed+0x50>
		return false;
 8002120:	2300      	movs	r3, #0
 8002122:	e038      	b.n	8002196 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002124:	7e3b      	ldrb	r3, [r7, #24]
 8002126:	031a      	lsls	r2, r3, #12
 8002128:	7e7b      	ldrb	r3, [r7, #25]
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	4313      	orrs	r3, r2
 800212e:	7eba      	ldrb	r2, [r7, #26]
 8002130:	0912      	lsrs	r2, r2, #4
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	4313      	orrs	r3, r2
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002138:	7efb      	ldrb	r3, [r7, #27]
 800213a:	031a      	lsls	r2, r3, #12
 800213c:	7f3b      	ldrb	r3, [r7, #28]
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	4313      	orrs	r3, r2
 8002142:	7f7a      	ldrb	r2, [r7, #29]
 8002144:	0912      	lsrs	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	4313      	orrs	r3, r2
 800214a:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	461a      	mov	r2, r3
 8002152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7ff fd63 	bl	8001c20 <compensate_temperature>
 800215a:	4602      	mov	r2, r0
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	461a      	mov	r2, r3
 8002164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f7ff fd92 	bl	8001c90 <compensate_pressure>
 800216c:	4602      	mov	r2, r0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8002178:	7fbb      	ldrb	r3, [r7, #30]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	7ffa      	ldrb	r2, [r7, #31]
 800217e:	4313      	orrs	r3, r2
 8002180:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	461a      	mov	r2, r3
 8002186:	6a39      	ldr	r1, [r7, #32]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff ff45 	bl	8002018 <compensate_humidity>
 800218e:	4602      	mov	r2, r0
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002194:	2301      	movs	r3, #1
}
 8002196:	4618      	mov	r0, r3
 8002198:	3730      	adds	r7, #48	; 0x30
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <bmp280_read_float+0x1a>
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	e000      	b.n	80021bc <bmp280_read_float+0x1c>
 80021ba:	2300      	movs	r3, #0
 80021bc:	f107 0218 	add.w	r2, r7, #24
 80021c0:	f107 011c 	add.w	r1, r7, #28
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7ff ff85 	bl	80020d4 <bmp280_read_fixed>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02d      	beq.n	800222c <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fd12 	bl	8000bfc <__aeabi_i2f>
 80021d8:	4603      	mov	r3, r0
 80021da:	4917      	ldr	r1, [pc, #92]	; (8002238 <bmp280_read_float+0x98>)
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fe15 	bl	8000e0c <__aeabi_fdiv>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fd01 	bl	8000bf4 <__aeabi_ui2f>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fe07 	bl	8000e0c <__aeabi_fdiv>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	601a      	str	r2, [r3, #0]
		if (humidity)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00d      	beq.n	8002228 <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fcf0 	bl	8000bf4 <__aeabi_ui2f>
 8002214:	4603      	mov	r3, r0
 8002216:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fdf6 	bl	8000e0c <__aeabi_fdiv>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	601a      	str	r2, [r3, #0]
		return true;
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <bmp280_read_float+0x8e>
	}

	return false;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	42c80000 	.word	0x42c80000

0800223c <TIM3_IRQHandler>:

/*
 *  Send incoming sensor data every 30 seconds
 */
void TIM3_IRQHandler(void)
{
 800223c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af04      	add	r7, sp, #16
	TIM3->SR &= ~(TIM_SR_UIF);//timer3 clear flag
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <TIM3_IRQHandler+0x94>)
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <TIM3_IRQHandler+0x94>)
 800224a:	f023 0301 	bic.w	r3, r3, #1
 800224e:	6113      	str	r3, [r2, #16]
	timer3_disable();
 8002250:	f000 fcb8 	bl	8002bc4 <timer3_disable>
	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)); // Wait for sensor reading to finish
 8002254:	bf00      	nop
 8002256:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <TIM3_IRQHandler+0x98>)
 8002258:	4a1f      	ldr	r2, [pc, #124]	; (80022d8 <TIM3_IRQHandler+0x9c>)
 800225a:	4920      	ldr	r1, [pc, #128]	; (80022dc <TIM3_IRQHandler+0xa0>)
 800225c:	4820      	ldr	r0, [pc, #128]	; (80022e0 <TIM3_IRQHandler+0xa4>)
 800225e:	f7ff ff9f 	bl	80021a0 <bmp280_read_float>
 8002262:	4603      	mov	r3, r0
 8002264:	f083 0301 	eor.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f3      	bne.n	8002256 <TIM3_IRQHandler+0x1a>
	sprintf((char *)Data,"AT+S.HTTPGET=192.168.1.30,/node1/save?temperature=%.2f&pressure=%.2f&humidity=%.1f,3000\r",
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <TIM3_IRQHandler+0xa0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe f8d8 	bl	8000428 <__aeabi_f2d>
 8002278:	4680      	mov	r8, r0
 800227a:	4689      	mov	r9, r1
 800227c:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <TIM3_IRQHandler+0x9c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f8d1 	bl	8000428 <__aeabi_f2d>
 8002286:	4604      	mov	r4, r0
 8002288:	460d      	mov	r5, r1
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <TIM3_IRQHandler+0x98>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f8ca 	bl	8000428 <__aeabi_f2d>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800229c:	e9cd 4500 	strd	r4, r5, [sp]
 80022a0:	4642      	mov	r2, r8
 80022a2:	464b      	mov	r3, r9
 80022a4:	490f      	ldr	r1, [pc, #60]	; (80022e4 <TIM3_IRQHandler+0xa8>)
 80022a6:	4810      	ldr	r0, [pc, #64]	; (80022e8 <TIM3_IRQHandler+0xac>)
 80022a8:	f003 f990 	bl	80055cc <siprintf>
			temperature,pressure,humidity);
	Uart_sendstring(Data, lora_uart);
 80022ac:	490f      	ldr	r1, [pc, #60]	; (80022ec <TIM3_IRQHandler+0xb0>)
 80022ae:	480e      	ldr	r0, [pc, #56]	; (80022e8 <TIM3_IRQHandler+0xac>)
 80022b0:	f7ff f9ce 	bl	8001650 <Uart_sendstring>
	while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))); // wait for PA4 => AUX = 1
 80022b4:	bf00      	nop
 80022b6:	2110      	movs	r1, #16
 80022b8:	480d      	ldr	r0, [pc, #52]	; (80022f0 <TIM3_IRQHandler+0xb4>)
 80022ba:	f000 ffcf 	bl	800325c <HAL_GPIO_ReadPin>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f8      	beq.n	80022b6 <TIM3_IRQHandler+0x7a>
	timer3_enable();
 80022c4:	f000 fc70 	bl	8002ba8 <timer3_enable>
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022d0:	40000400 	.word	0x40000400
 80022d4:	20000f68 	.word	0x20000f68
 80022d8:	20000f64 	.word	0x20000f64
 80022dc:	20000f60 	.word	0x20000f60
 80022e0:	20001918 	.word	0x20001918
 80022e4:	08007a58 	.word	0x08007a58
 80022e8:	20000fac 	.word	0x20000fac
 80022ec:	20000ecc 	.word	0x20000ecc
 80022f0:	40010800 	.word	0x40010800

080022f4 <main>:
/* ---------------------------------------- */
int main(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0

  HAL_Init();
 80022fa:	f000 fc97 	bl	8002c2c <HAL_Init>
  SystemClock_Config();
 80022fe:	f000 f89d 	bl	800243c <SystemClock_Config>
  MX_GPIO_Init();
 8002302:	f000 f963 	bl	80025cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002306:	f000 f8df 	bl	80024c8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800230a:	f000 f90b 	bl	8002524 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800230e:	f000 f933 	bl	8002578 <MX_USART3_UART_Init>

  Ringbuf_init();
 8002312:	f7fe ffcb 	bl	80012ac <Ringbuf_init>

  bmp280_init_default_params(&bmp280.params);
 8002316:	4840      	ldr	r0, [pc, #256]	; (8002418 <main+0x124>)
 8002318:	f7ff fa5c 	bl	80017d4 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 800231c:	4b3f      	ldr	r3, [pc, #252]	; (800241c <main+0x128>)
 800231e:	2276      	movs	r2, #118	; 0x76
 8002320:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8002322:	4b3e      	ldr	r3, [pc, #248]	; (800241c <main+0x128>)
 8002324:	4a3e      	ldr	r2, [pc, #248]	; (8002420 <main+0x12c>)
 8002326:	629a      	str	r2, [r3, #40]	; 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)) ;
 8002328:	bf00      	nop
 800232a:	493b      	ldr	r1, [pc, #236]	; (8002418 <main+0x124>)
 800232c:	483b      	ldr	r0, [pc, #236]	; (800241c <main+0x128>)
 800232e:	f7ff fbca 	bl	8001ac6 <bmp280_init>
 8002332:	4603      	mov	r3, r0
 8002334:	f083 0301 	eor.w	r3, r3, #1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f5      	bne.n	800232a <main+0x36>

  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))); // wait for PA4 => AUX = 1
 800233e:	bf00      	nop
 8002340:	2110      	movs	r1, #16
 8002342:	4838      	ldr	r0, [pc, #224]	; (8002424 <main+0x130>)
 8002344:	f000 ff8a 	bl	800325c <HAL_GPIO_ReadPin>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f8      	beq.n	8002340 <main+0x4c>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //M0 = 0 NORMAL MODE
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002354:	4834      	ldr	r0, [pc, #208]	; (8002428 <main+0x134>)
 8002356:	f000 ff98 	bl	800328a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //M1 = 0
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002360:	4831      	ldr	r0, [pc, #196]	; (8002428 <main+0x134>)
 8002362:	f000 ff92 	bl	800328a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8002366:	200a      	movs	r0, #10
 8002368:	f000 fcc2 	bl	8002cf0 <HAL_Delay>
  timer3_init();
 800236c:	f000 fbf0 	bl	8002b50 <timer3_init>
  timer3_enable();
 8002370:	f000 fc1a 	bl	8002ba8 <timer3_enable>
	   * If there is incoming data, receive it
	   * Do the task if there is a relevant command
	   * Send with LoRa if not related command ( mesh networking )
	   *
	   */
	  if(IsDataAvailable(lora_uart))
 8002374:	482d      	ldr	r0, [pc, #180]	; (800242c <main+0x138>)
 8002376:	f7ff f92b 	bl	80015d0 <IsDataAvailable>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d03d      	beq.n	80023fc <main+0x108>
	  	  	{
	  	  		for(int i=0;i<95;++i)
 8002380:	2300      	movs	r3, #0
 8002382:	607b      	str	r3, [r7, #4]
 8002384:	e037      	b.n	80023f6 <main+0x102>
	  	  		{
	  	  			while (!(IsDataAvailable(lora_uart)));
 8002386:	bf00      	nop
 8002388:	4828      	ldr	r0, [pc, #160]	; (800242c <main+0x138>)
 800238a:	f7ff f921 	bl	80015d0 <IsDataAvailable>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f9      	beq.n	8002388 <main+0x94>
	  	  			buffertosave[i] = Uart_read(lora_uart);
 8002394:	4825      	ldr	r0, [pc, #148]	; (800242c <main+0x138>)
 8002396:	f7ff f851 	bl	800143c <Uart_read>
 800239a:	4603      	mov	r3, r0
 800239c:	b2d9      	uxtb	r1, r3
 800239e:	4a24      	ldr	r2, [pc, #144]	; (8002430 <main+0x13c>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	460a      	mov	r2, r1
 80023a6:	701a      	strb	r2, [r3, #0]
	  		  		if(Look_for("one-run",buffertosave) == 1) // If "one-run" command is received via LoRa, turn on the LED
 80023a8:	4921      	ldr	r1, [pc, #132]	; (8002430 <main+0x13c>)
 80023aa:	4822      	ldr	r0, [pc, #136]	; (8002434 <main+0x140>)
 80023ac:	f7fe fff4 	bl	8001398 <Look_for>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d10a      	bne.n	80023cc <main+0xd8>
	  		  		{
	  		  			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80023b6:	2201      	movs	r2, #1
 80023b8:	2180      	movs	r1, #128	; 0x80
 80023ba:	481a      	ldr	r0, [pc, #104]	; (8002424 <main+0x130>)
 80023bc:	f000 ff65 	bl	800328a <HAL_GPIO_WritePin>
	  		  			memset(buffertosave,0,95);
 80023c0:	225f      	movs	r2, #95	; 0x5f
 80023c2:	2100      	movs	r1, #0
 80023c4:	481a      	ldr	r0, [pc, #104]	; (8002430 <main+0x13c>)
 80023c6:	f002 fc99 	bl	8004cfc <memset>
	  		  			break;
 80023ca:	e017      	b.n	80023fc <main+0x108>
	  		  		}
	  		  		else if(Look_for("one-stop",buffertosave) == 1) // If "one-stop" command is received via LoRa, turn off the LED
 80023cc:	4918      	ldr	r1, [pc, #96]	; (8002430 <main+0x13c>)
 80023ce:	481a      	ldr	r0, [pc, #104]	; (8002438 <main+0x144>)
 80023d0:	f7fe ffe2 	bl	8001398 <Look_for>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10a      	bne.n	80023f0 <main+0xfc>
	  		  		{
	  		  			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	4811      	ldr	r0, [pc, #68]	; (8002424 <main+0x130>)
 80023e0:	f000 ff53 	bl	800328a <HAL_GPIO_WritePin>
	  		  			memset(buffertosave,0,95);
 80023e4:	225f      	movs	r2, #95	; 0x5f
 80023e6:	2100      	movs	r1, #0
 80023e8:	4811      	ldr	r0, [pc, #68]	; (8002430 <main+0x13c>)
 80023ea:	f002 fc87 	bl	8004cfc <memset>
	  		  			break;
 80023ee:	e005      	b.n	80023fc <main+0x108>
	  	  		for(int i=0;i<95;++i)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3301      	adds	r3, #1
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b5e      	cmp	r3, #94	; 0x5e
 80023fa:	ddc4      	ble.n	8002386 <main+0x92>
	  		  		}
	  	  		}
	  	  	}
	  Uart_sendstring(buffertosave, lora_uart);
 80023fc:	490b      	ldr	r1, [pc, #44]	; (800242c <main+0x138>)
 80023fe:	480c      	ldr	r0, [pc, #48]	; (8002430 <main+0x13c>)
 8002400:	f7ff f926 	bl	8001650 <Uart_sendstring>
	  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))); // wait for PA4 => AUX = 1
 8002404:	bf00      	nop
 8002406:	2110      	movs	r1, #16
 8002408:	4806      	ldr	r0, [pc, #24]	; (8002424 <main+0x130>)
 800240a:	f000 ff27 	bl	800325c <HAL_GPIO_ReadPin>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f8      	beq.n	8002406 <main+0x112>
	  if(IsDataAvailable(lora_uart))
 8002414:	e7ae      	b.n	8002374 <main+0x80>
 8002416:	bf00      	nop
 8002418:	20001944 	.word	0x20001944
 800241c:	20001918 	.word	0x20001918
 8002420:	20000f0c 	.word	0x20000f0c
 8002424:	40010800 	.word	0x40010800
 8002428:	40010c00 	.word	0x40010c00
 800242c:	20000ecc 	.word	0x20000ecc
 8002430:	20000e4c 	.word	0x20000e4c
 8002434:	08007ab4 	.word	0x08007ab4
 8002438:	08007abc 	.word	0x08007abc

0800243c <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b090      	sub	sp, #64	; 0x40
 8002440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002442:	f107 0318 	add.w	r3, r7, #24
 8002446:	2228      	movs	r2, #40	; 0x28
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f002 fc56 	bl	8004cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800245e:	2301      	movs	r3, #1
 8002460:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002466:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800246c:	2301      	movs	r3, #1
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002470:	2302      	movs	r3, #2
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002478:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800247a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002480:	f107 0318 	add.w	r3, r7, #24
 8002484:	4618      	mov	r0, r3
 8002486:	f001 ff19 	bl	80042bc <HAL_RCC_OscConfig>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002490:	f000 f908 	bl	80026a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002494:	230f      	movs	r3, #15
 8002496:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002498:	2302      	movs	r3, #2
 800249a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024a0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80024a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	2102      	movs	r1, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 f984 	bl	80047bc <HAL_RCC_ClockConfig>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80024ba:	f000 f8f3 	bl	80026a4 <Error_Handler>
  }
}
 80024be:	bf00      	nop
 80024c0:	3740      	adds	r7, #64	; 0x40
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <MX_I2C1_Init+0x50>)
 80024ce:	4a13      	ldr	r2, [pc, #76]	; (800251c <MX_I2C1_Init+0x54>)
 80024d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_I2C1_Init+0x50>)
 80024d4:	4a12      	ldr	r2, [pc, #72]	; (8002520 <MX_I2C1_Init+0x58>)
 80024d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <MX_I2C1_Init+0x50>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <MX_I2C1_Init+0x50>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <MX_I2C1_Init+0x50>)
 80024e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <MX_I2C1_Init+0x50>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_I2C1_Init+0x50>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <MX_I2C1_Init+0x50>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_I2C1_Init+0x50>)
 8002500:	2200      	movs	r2, #0
 8002502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002504:	4804      	ldr	r0, [pc, #16]	; (8002518 <MX_I2C1_Init+0x50>)
 8002506:	f000 fed9 	bl	80032bc <HAL_I2C_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002510:	f000 f8c8 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000f0c 	.word	0x20000f0c
 800251c:	40005400 	.word	0x40005400
 8002520:	000186a0 	.word	0x000186a0

08002524 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 800252a:	4a12      	ldr	r2, [pc, #72]	; (8002574 <MX_USART1_UART_Init+0x50>)
 800252c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002530:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 800254a:	220c      	movs	r2, #12
 800254c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800255a:	4805      	ldr	r0, [pc, #20]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 800255c:	f002 fac8 	bl	8004af0 <HAL_UART_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002566:	f000 f89d 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000f6c 	.word	0x20000f6c
 8002574:	40013800 	.word	0x40013800

08002578 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <MX_USART3_UART_Init+0x4c>)
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <MX_USART3_UART_Init+0x50>)
 8002580:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <MX_USART3_UART_Init+0x4c>)
 8002584:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002588:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <MX_USART3_UART_Init+0x4c>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <MX_USART3_UART_Init+0x4c>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <MX_USART3_UART_Init+0x4c>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <MX_USART3_UART_Init+0x4c>)
 800259e:	220c      	movs	r2, #12
 80025a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <MX_USART3_UART_Init+0x4c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <MX_USART3_UART_Init+0x4c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_USART3_UART_Init+0x4c>)
 80025b0:	f002 fa9e 	bl	8004af0 <HAL_UART_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025ba:	f000 f873 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000ecc 	.word	0x20000ecc
 80025c8:	40004800 	.word	0x40004800

080025cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d2:	f107 0310 	add.w	r3, r7, #16
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e0:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <MX_GPIO_Init+0xcc>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4a2c      	ldr	r2, [pc, #176]	; (8002698 <MX_GPIO_Init+0xcc>)
 80025e6:	f043 0320 	orr.w	r3, r3, #32
 80025ea:	6193      	str	r3, [r2, #24]
 80025ec:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <MX_GPIO_Init+0xcc>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <MX_GPIO_Init+0xcc>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4a26      	ldr	r2, [pc, #152]	; (8002698 <MX_GPIO_Init+0xcc>)
 80025fe:	f043 0304 	orr.w	r3, r3, #4
 8002602:	6193      	str	r3, [r2, #24]
 8002604:	4b24      	ldr	r3, [pc, #144]	; (8002698 <MX_GPIO_Init+0xcc>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <MX_GPIO_Init+0xcc>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4a20      	ldr	r2, [pc, #128]	; (8002698 <MX_GPIO_Init+0xcc>)
 8002616:	f043 0308 	orr.w	r3, r3, #8
 800261a:	6193      	str	r3, [r2, #24]
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <MX_GPIO_Init+0xcc>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002628:	2200      	movs	r2, #0
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	481b      	ldr	r0, [pc, #108]	; (800269c <MX_GPIO_Init+0xd0>)
 800262e:	f000 fe2c 	bl	800328a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002632:	2200      	movs	r2, #0
 8002634:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002638:	4819      	ldr	r0, [pc, #100]	; (80026a0 <MX_GPIO_Init+0xd4>)
 800263a:	f000 fe26 	bl	800328a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800263e:	2310      	movs	r3, #16
 8002640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264a:	f107 0310 	add.w	r3, r7, #16
 800264e:	4619      	mov	r1, r3
 8002650:	4812      	ldr	r0, [pc, #72]	; (800269c <MX_GPIO_Init+0xd0>)
 8002652:	f000 fc7f 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265a:	2301      	movs	r3, #1
 800265c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2302      	movs	r3, #2
 8002664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	4619      	mov	r1, r3
 800266c:	480b      	ldr	r0, [pc, #44]	; (800269c <MX_GPIO_Init+0xd0>)
 800266e:	f000 fc71 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002672:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002678:	2301      	movs	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2302      	movs	r3, #2
 8002682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	4619      	mov	r1, r3
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_GPIO_Init+0xd4>)
 800268c:	f000 fc62 	bl	8002f54 <HAL_GPIO_Init>

}
 8002690:	bf00      	nop
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	40010800 	.word	0x40010800
 80026a0:	40010c00 	.word	0x40010c00

080026a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a8:	b672      	cpsid	i
}
 80026aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026ac:	e7fe      	b.n	80026ac <Error_Handler+0x8>
	...

080026b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_MspInit+0x5c>)
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	4a14      	ldr	r2, [pc, #80]	; (800270c <HAL_MspInit+0x5c>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6193      	str	r3, [r2, #24]
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_MspInit+0x5c>)
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <HAL_MspInit+0x5c>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4a0e      	ldr	r2, [pc, #56]	; (800270c <HAL_MspInit+0x5c>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	61d3      	str	r3, [r2, #28]
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <HAL_MspInit+0x5c>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_MspInit+0x60>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_MspInit+0x60>)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	40021000 	.word	0x40021000
 8002710:	40010000 	.word	0x40010000

08002714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a15      	ldr	r2, [pc, #84]	; (8002784 <HAL_I2C_MspInit+0x70>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d123      	bne.n	800277c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_I2C_MspInit+0x74>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	4a13      	ldr	r2, [pc, #76]	; (8002788 <HAL_I2C_MspInit+0x74>)
 800273a:	f043 0308 	orr.w	r3, r3, #8
 800273e:	6193      	str	r3, [r2, #24]
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_I2C_MspInit+0x74>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800274c:	23c0      	movs	r3, #192	; 0xc0
 800274e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002750:	2312      	movs	r3, #18
 8002752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002754:	2303      	movs	r3, #3
 8002756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	4619      	mov	r1, r3
 800275e:	480b      	ldr	r0, [pc, #44]	; (800278c <HAL_I2C_MspInit+0x78>)
 8002760:	f000 fbf8 	bl	8002f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_I2C_MspInit+0x74>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	4a07      	ldr	r2, [pc, #28]	; (8002788 <HAL_I2C_MspInit+0x74>)
 800276a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800276e:	61d3      	str	r3, [r2, #28]
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_I2C_MspInit+0x74>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800277c:	bf00      	nop
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40005400 	.word	0x40005400
 8002788:	40021000 	.word	0x40021000
 800278c:	40010c00 	.word	0x40010c00

08002790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0318 	add.w	r3, r7, #24
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a40      	ldr	r2, [pc, #256]	; (80028ac <HAL_UART_MspInit+0x11c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d13a      	bne.n	8002826 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027b0:	4b3f      	ldr	r3, [pc, #252]	; (80028b0 <HAL_UART_MspInit+0x120>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	4a3e      	ldr	r2, [pc, #248]	; (80028b0 <HAL_UART_MspInit+0x120>)
 80027b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ba:	6193      	str	r3, [r2, #24]
 80027bc:	4b3c      	ldr	r3, [pc, #240]	; (80028b0 <HAL_UART_MspInit+0x120>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c8:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <HAL_UART_MspInit+0x120>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	4a38      	ldr	r2, [pc, #224]	; (80028b0 <HAL_UART_MspInit+0x120>)
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	6193      	str	r3, [r2, #24]
 80027d4:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <HAL_UART_MspInit+0x120>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	f107 0318 	add.w	r3, r7, #24
 80027f2:	4619      	mov	r1, r3
 80027f4:	482f      	ldr	r0, [pc, #188]	; (80028b4 <HAL_UART_MspInit+0x124>)
 80027f6:	f000 fbad 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 0318 	add.w	r3, r7, #24
 800280c:	4619      	mov	r1, r3
 800280e:	4829      	ldr	r0, [pc, #164]	; (80028b4 <HAL_UART_MspInit+0x124>)
 8002810:	f000 fba0 	bl	8002f54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002814:	2200      	movs	r2, #0
 8002816:	2101      	movs	r1, #1
 8002818:	2025      	movs	r0, #37	; 0x25
 800281a:	f000 fb64 	bl	8002ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800281e:	2025      	movs	r0, #37	; 0x25
 8002820:	f000 fb7d 	bl	8002f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002824:	e03e      	b.n	80028a4 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <HAL_UART_MspInit+0x128>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d139      	bne.n	80028a4 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002830:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <HAL_UART_MspInit+0x120>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	4a1e      	ldr	r2, [pc, #120]	; (80028b0 <HAL_UART_MspInit+0x120>)
 8002836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800283a:	61d3      	str	r3, [r2, #28]
 800283c:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <HAL_UART_MspInit+0x120>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_UART_MspInit+0x120>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_UART_MspInit+0x120>)
 800284e:	f043 0308 	orr.w	r3, r3, #8
 8002852:	6193      	str	r3, [r2, #24]
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_UART_MspInit+0x120>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800286a:	2303      	movs	r3, #3
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286e:	f107 0318 	add.w	r3, r7, #24
 8002872:	4619      	mov	r1, r3
 8002874:	4811      	ldr	r0, [pc, #68]	; (80028bc <HAL_UART_MspInit+0x12c>)
 8002876:	f000 fb6d 	bl	8002f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800287a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800287e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002888:	f107 0318 	add.w	r3, r7, #24
 800288c:	4619      	mov	r1, r3
 800288e:	480b      	ldr	r0, [pc, #44]	; (80028bc <HAL_UART_MspInit+0x12c>)
 8002890:	f000 fb60 	bl	8002f54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	2101      	movs	r1, #1
 8002898:	2027      	movs	r0, #39	; 0x27
 800289a:	f000 fb24 	bl	8002ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800289e:	2027      	movs	r0, #39	; 0x27
 80028a0:	f000 fb3d 	bl	8002f1e <HAL_NVIC_EnableIRQ>
}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40013800 	.word	0x40013800
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010800 	.word	0x40010800
 80028b8:	40004800 	.word	0x40004800
 80028bc:	40010c00 	.word	0x40010c00

080028c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <NMI_Handler+0x4>

080028c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ca:	e7fe      	b.n	80028ca <HardFault_Handler+0x4>

080028cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <MemManage_Handler+0x4>

080028d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <BusFault_Handler+0x4>

080028d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <UsageFault_Handler+0x4>

080028de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002906:	f000 f9d7 	bl	8002cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8002914:	4802      	ldr	r0, [pc, #8]	; (8002920 <USART1_IRQHandler+0x10>)
 8002916:	f7fe feb3 	bl	8001680 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000f6c 	.word	0x20000f6c

08002924 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <USART3_IRQHandler+0x10>)
 800292a:	f7fe fea9 	bl	8001680 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
 // HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000ecc 	.word	0x20000ecc

08002938 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
	return 1;
 800293c:	2301      	movs	r3, #1
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <_kill>:

int _kill(int pid, int sig)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002950:	f002 f9aa 	bl	8004ca8 <__errno>
 8002954:	4603      	mov	r3, r0
 8002956:	2216      	movs	r2, #22
 8002958:	601a      	str	r2, [r3, #0]
	return -1;
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <_exit>:

void _exit (int status)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800296e:	f04f 31ff 	mov.w	r1, #4294967295
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffe7 	bl	8002946 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002978:	e7fe      	b.n	8002978 <_exit+0x12>

0800297a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e00a      	b.n	80029a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800298c:	f3af 8000 	nop.w
 8002990:	4601      	mov	r1, r0
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	60ba      	str	r2, [r7, #8]
 8002998:	b2ca      	uxtb	r2, r1
 800299a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3301      	adds	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	dbf0      	blt.n	800298c <_read+0x12>
	}

return len;
 80029aa:	687b      	ldr	r3, [r7, #4]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	e009      	b.n	80029da <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	60ba      	str	r2, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3301      	adds	r3, #1
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	dbf1      	blt.n	80029c6 <_write+0x12>
	}
	return len;
 80029e2:	687b      	ldr	r3, [r7, #4]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <_close>:

int _close(int file)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	return -1;
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a12:	605a      	str	r2, [r3, #4]
	return 0;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <_isatty>:

int _isatty(int file)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	return 1;
 8002a28:	2301      	movs	r3, #1
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <_sbrk+0x5c>)
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <_sbrk+0x60>)
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d102      	bne.n	8002a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <_sbrk+0x64>)
 8002a6a:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <_sbrk+0x68>)
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <_sbrk+0x64>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d207      	bcs.n	8002a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a7c:	f002 f914 	bl	8004ca8 <__errno>
 8002a80:	4603      	mov	r3, r0
 8002a82:	220c      	movs	r2, #12
 8002a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e009      	b.n	8002aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <_sbrk+0x64>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <_sbrk+0x64>)
 8002a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20005000 	.word	0x20005000
 8002aac:	00000400 	.word	0x00000400
 8002ab0:	20000e28 	.word	0x20000e28
 8002ab4:	20001960 	.word	0x20001960

08002ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	db0b      	blt.n	8002aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	f003 021f 	and.w	r2, r3, #31
 8002adc:	4906      	ldr	r1, [pc, #24]	; (8002af8 <__NVIC_EnableIRQ+0x34>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	e000e100 	.word	0xe000e100

08002afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	db0a      	blt.n	8002b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	490c      	ldr	r1, [pc, #48]	; (8002b48 <__NVIC_SetPriority+0x4c>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b24:	e00a      	b.n	8002b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4908      	ldr	r1, [pc, #32]	; (8002b4c <__NVIC_SetPriority+0x50>)
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	3b04      	subs	r3, #4
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	440b      	add	r3, r1
 8002b3a:	761a      	strb	r2, [r3, #24]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000e100 	.word	0xe000e100
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <timer3_init>:
 */

#include "timer3.h"

void timer3_init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
	//Enable TIM2 clock
	__HAL_RCC_TIM3_CLK_ENABLE();
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <timer3_init+0x50>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a11      	ldr	r2, [pc, #68]	; (8002ba0 <timer3_init+0x50>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	61d3      	str	r3, [r2, #28]
 8002b62:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <timer3_init+0x50>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]

	//Timer clock = 36MHz / 36000= (1ms period)
	TIM3->PSC = 35999;
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <timer3_init+0x54>)
 8002b70:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002b74:	629a      	str	r2, [r3, #40]	; 0x28

	// Reload in every 30sec
	TIM3->ARR = 29999;
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <timer3_init+0x54>)
 8002b78:	f247 522f 	movw	r2, #29999	; 0x752f
 8002b7c:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer Update Interrupt
	TIM3->DIER |= TIM_DIER_UIE;
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <timer3_init+0x54>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <timer3_init+0x54>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM3_IRQn);
 8002b8a:	201d      	movs	r0, #29
 8002b8c:	f7ff ff9a 	bl	8002ac4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn,0);// 0.öncelikli
 8002b90:	2100      	movs	r1, #0
 8002b92:	201d      	movs	r0, #29
 8002b94:	f7ff ffb2 	bl	8002afc <__NVIC_SetPriority>

}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40000400 	.word	0x40000400

08002ba8 <timer3_enable>:

	return cnt;
}

void timer3_enable(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
	TIM3->CR1 |= TIM_CR1_CEN;
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <timer3_enable+0x18>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a03      	ldr	r2, [pc, #12]	; (8002bc0 <timer3_enable+0x18>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	40000400 	.word	0x40000400

08002bc4 <timer3_disable>:

void timer3_disable(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(TIM_CR1_CEN);
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <timer3_disable+0x18>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a03      	ldr	r2, [pc, #12]	; (8002bdc <timer3_disable+0x18>)
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	6013      	str	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	40000400 	.word	0x40000400

08002be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002be0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002be2:	e003      	b.n	8002bec <LoopCopyDataInit>

08002be4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002be6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002be8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002bea:	3104      	adds	r1, #4

08002bec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002bec:	480a      	ldr	r0, [pc, #40]	; (8002c18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002bf0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002bf2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002bf4:	d3f6      	bcc.n	8002be4 <CopyDataInit>
  ldr r2, =_sbss
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002bf8:	e002      	b.n	8002c00 <LoopFillZerobss>

08002bfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002bfa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002bfc:	f842 3b04 	str.w	r3, [r2], #4

08002c00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c04:	d3f9      	bcc.n	8002bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c06:	f7ff ff57 	bl	8002ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c0a:	f002 f853 	bl	8004cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c0e:	f7ff fb71 	bl	80022f4 <main>
  bx lr
 8002c12:	4770      	bx	lr
  ldr r3, =_sidata
 8002c14:	08007ee4 	.word	0x08007ee4
  ldr r0, =_sdata
 8002c18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002c1c:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002c20:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002c24:	20001960 	.word	0x20001960

08002c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c28:	e7fe      	b.n	8002c28 <ADC1_2_IRQHandler>
	...

08002c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_Init+0x28>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <HAL_Init+0x28>)
 8002c36:	f043 0310 	orr.w	r3, r3, #16
 8002c3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f000 f947 	bl	8002ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f000 f808 	bl	8002c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c48:	f7ff fd32 	bl	80026b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40022000 	.word	0x40022000

08002c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_InitTick+0x54>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_InitTick+0x58>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f95f 	bl	8002f3a <HAL_SYSTICK_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00e      	b.n	8002ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b0f      	cmp	r3, #15
 8002c8a:	d80a      	bhi.n	8002ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295
 8002c94:	f000 f927 	bl	8002ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c98:	4a06      	ldr	r2, [pc, #24]	; (8002cb4 <HAL_InitTick+0x5c>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_IncTick+0x1c>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_IncTick+0x20>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	4a03      	ldr	r2, [pc, #12]	; (8002cd8 <HAL_IncTick+0x20>)
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	20000008 	.word	0x20000008
 8002cd8:	2000194c 	.word	0x2000194c

08002cdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce0:	4b02      	ldr	r3, [pc, #8]	; (8002cec <HAL_GetTick+0x10>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	2000194c 	.word	0x2000194c

08002cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf8:	f7ff fff0 	bl	8002cdc <HAL_GetTick>
 8002cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d005      	beq.n	8002d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_Delay+0x44>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d16:	bf00      	nop
 8002d18:	f7ff ffe0 	bl	8002cdc <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d8f7      	bhi.n	8002d18 <HAL_Delay+0x28>
  {
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000008 	.word	0x20000008

08002d38 <__NVIC_SetPriorityGrouping>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d54:	4013      	ands	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_GetPriorityGrouping>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <__NVIC_GetPriorityGrouping+0x18>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0307 	and.w	r3, r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_EnableIRQ>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	db0b      	blt.n	8002dc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4906      	ldr	r1, [pc, #24]	; (8002dd0 <__NVIC_EnableIRQ+0x34>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100

08002dd4 <__NVIC_SetPriority>:
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	6039      	str	r1, [r7, #0]
 8002dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	db0a      	blt.n	8002dfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	490c      	ldr	r1, [pc, #48]	; (8002e20 <__NVIC_SetPriority+0x4c>)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	0112      	lsls	r2, r2, #4
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	440b      	add	r3, r1
 8002df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002dfc:	e00a      	b.n	8002e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4908      	ldr	r1, [pc, #32]	; (8002e24 <__NVIC_SetPriority+0x50>)
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	3b04      	subs	r3, #4
 8002e0c:	0112      	lsls	r2, r2, #4
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	440b      	add	r3, r1
 8002e12:	761a      	strb	r2, [r3, #24]
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e100 	.word	0xe000e100
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f1c3 0307 	rsb	r3, r3, #7
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	bf28      	it	cs
 8002e46:	2304      	movcs	r3, #4
 8002e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	2b06      	cmp	r3, #6
 8002e50:	d902      	bls.n	8002e58 <NVIC_EncodePriority+0x30>
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3b03      	subs	r3, #3
 8002e56:	e000      	b.n	8002e5a <NVIC_EncodePriority+0x32>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e70:	f04f 31ff 	mov.w	r1, #4294967295
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	43d9      	mvns	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e80:	4313      	orrs	r3, r2
         );
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3724      	adds	r7, #36	; 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e9c:	d301      	bcc.n	8002ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00f      	b.n	8002ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <SysTick_Config+0x40>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eaa:	210f      	movs	r1, #15
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb0:	f7ff ff90 	bl	8002dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <SysTick_Config+0x40>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eba:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <SysTick_Config+0x40>)
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	e000e010 	.word	0xe000e010

08002ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ff2d 	bl	8002d38 <__NVIC_SetPriorityGrouping>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef8:	f7ff ff42 	bl	8002d80 <__NVIC_GetPriorityGrouping>
 8002efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	6978      	ldr	r0, [r7, #20]
 8002f04:	f7ff ff90 	bl	8002e28 <NVIC_EncodePriority>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff5f 	bl	8002dd4 <__NVIC_SetPriority>
}
 8002f16:	bf00      	nop
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	4603      	mov	r3, r0
 8002f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff35 	bl	8002d9c <__NVIC_EnableIRQ>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ffa2 	bl	8002e8c <SysTick_Config>
 8002f48:	4603      	mov	r3, r0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b08b      	sub	sp, #44	; 0x2c
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f62:	2300      	movs	r3, #0
 8002f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f66:	e169      	b.n	800323c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f68:	2201      	movs	r2, #1
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	f040 8158 	bne.w	8003236 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a9a      	ldr	r2, [pc, #616]	; (80031f4 <HAL_GPIO_Init+0x2a0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d05e      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002f90:	4a98      	ldr	r2, [pc, #608]	; (80031f4 <HAL_GPIO_Init+0x2a0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d875      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002f96:	4a98      	ldr	r2, [pc, #608]	; (80031f8 <HAL_GPIO_Init+0x2a4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d058      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002f9c:	4a96      	ldr	r2, [pc, #600]	; (80031f8 <HAL_GPIO_Init+0x2a4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d86f      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fa2:	4a96      	ldr	r2, [pc, #600]	; (80031fc <HAL_GPIO_Init+0x2a8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d052      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002fa8:	4a94      	ldr	r2, [pc, #592]	; (80031fc <HAL_GPIO_Init+0x2a8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d869      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fae:	4a94      	ldr	r2, [pc, #592]	; (8003200 <HAL_GPIO_Init+0x2ac>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04c      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002fb4:	4a92      	ldr	r2, [pc, #584]	; (8003200 <HAL_GPIO_Init+0x2ac>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d863      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fba:	4a92      	ldr	r2, [pc, #584]	; (8003204 <HAL_GPIO_Init+0x2b0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d046      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002fc0:	4a90      	ldr	r2, [pc, #576]	; (8003204 <HAL_GPIO_Init+0x2b0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d85d      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fc6:	2b12      	cmp	r3, #18
 8002fc8:	d82a      	bhi.n	8003020 <HAL_GPIO_Init+0xcc>
 8002fca:	2b12      	cmp	r3, #18
 8002fcc:	d859      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fce:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <HAL_GPIO_Init+0x80>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	0800304f 	.word	0x0800304f
 8002fd8:	08003029 	.word	0x08003029
 8002fdc:	0800303b 	.word	0x0800303b
 8002fe0:	0800307d 	.word	0x0800307d
 8002fe4:	08003083 	.word	0x08003083
 8002fe8:	08003083 	.word	0x08003083
 8002fec:	08003083 	.word	0x08003083
 8002ff0:	08003083 	.word	0x08003083
 8002ff4:	08003083 	.word	0x08003083
 8002ff8:	08003083 	.word	0x08003083
 8002ffc:	08003083 	.word	0x08003083
 8003000:	08003083 	.word	0x08003083
 8003004:	08003083 	.word	0x08003083
 8003008:	08003083 	.word	0x08003083
 800300c:	08003083 	.word	0x08003083
 8003010:	08003083 	.word	0x08003083
 8003014:	08003083 	.word	0x08003083
 8003018:	08003031 	.word	0x08003031
 800301c:	08003045 	.word	0x08003045
 8003020:	4a79      	ldr	r2, [pc, #484]	; (8003208 <HAL_GPIO_Init+0x2b4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003026:	e02c      	b.n	8003082 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	623b      	str	r3, [r7, #32]
          break;
 800302e:	e029      	b.n	8003084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	3304      	adds	r3, #4
 8003036:	623b      	str	r3, [r7, #32]
          break;
 8003038:	e024      	b.n	8003084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	3308      	adds	r3, #8
 8003040:	623b      	str	r3, [r7, #32]
          break;
 8003042:	e01f      	b.n	8003084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	330c      	adds	r3, #12
 800304a:	623b      	str	r3, [r7, #32]
          break;
 800304c:	e01a      	b.n	8003084 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003056:	2304      	movs	r3, #4
 8003058:	623b      	str	r3, [r7, #32]
          break;
 800305a:	e013      	b.n	8003084 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003064:	2308      	movs	r3, #8
 8003066:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	611a      	str	r2, [r3, #16]
          break;
 800306e:	e009      	b.n	8003084 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003070:	2308      	movs	r3, #8
 8003072:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	615a      	str	r2, [r3, #20]
          break;
 800307a:	e003      	b.n	8003084 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800307c:	2300      	movs	r3, #0
 800307e:	623b      	str	r3, [r7, #32]
          break;
 8003080:	e000      	b.n	8003084 <HAL_GPIO_Init+0x130>
          break;
 8003082:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2bff      	cmp	r3, #255	; 0xff
 8003088:	d801      	bhi.n	800308e <HAL_GPIO_Init+0x13a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	e001      	b.n	8003092 <HAL_GPIO_Init+0x13e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2bff      	cmp	r3, #255	; 0xff
 8003098:	d802      	bhi.n	80030a0 <HAL_GPIO_Init+0x14c>
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	e002      	b.n	80030a6 <HAL_GPIO_Init+0x152>
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	3b08      	subs	r3, #8
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	210f      	movs	r1, #15
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	6a39      	ldr	r1, [r7, #32]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	431a      	orrs	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80b1 	beq.w	8003236 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030d4:	4b4d      	ldr	r3, [pc, #308]	; (800320c <HAL_GPIO_Init+0x2b8>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	4a4c      	ldr	r2, [pc, #304]	; (800320c <HAL_GPIO_Init+0x2b8>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6193      	str	r3, [r2, #24]
 80030e0:	4b4a      	ldr	r3, [pc, #296]	; (800320c <HAL_GPIO_Init+0x2b8>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030ec:	4a48      	ldr	r2, [pc, #288]	; (8003210 <HAL_GPIO_Init+0x2bc>)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	220f      	movs	r2, #15
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a40      	ldr	r2, [pc, #256]	; (8003214 <HAL_GPIO_Init+0x2c0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <HAL_GPIO_Init+0x1ec>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a3f      	ldr	r2, [pc, #252]	; (8003218 <HAL_GPIO_Init+0x2c4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00d      	beq.n	800313c <HAL_GPIO_Init+0x1e8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3e      	ldr	r2, [pc, #248]	; (800321c <HAL_GPIO_Init+0x2c8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d007      	beq.n	8003138 <HAL_GPIO_Init+0x1e4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a3d      	ldr	r2, [pc, #244]	; (8003220 <HAL_GPIO_Init+0x2cc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_GPIO_Init+0x1e0>
 8003130:	2303      	movs	r3, #3
 8003132:	e006      	b.n	8003142 <HAL_GPIO_Init+0x1ee>
 8003134:	2304      	movs	r3, #4
 8003136:	e004      	b.n	8003142 <HAL_GPIO_Init+0x1ee>
 8003138:	2302      	movs	r3, #2
 800313a:	e002      	b.n	8003142 <HAL_GPIO_Init+0x1ee>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_GPIO_Init+0x1ee>
 8003140:	2300      	movs	r3, #0
 8003142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003144:	f002 0203 	and.w	r2, r2, #3
 8003148:	0092      	lsls	r2, r2, #2
 800314a:	4093      	lsls	r3, r2
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003152:	492f      	ldr	r1, [pc, #188]	; (8003210 <HAL_GPIO_Init+0x2bc>)
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	3302      	adds	r3, #2
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d006      	beq.n	800317a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800316c:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	492c      	ldr	r1, [pc, #176]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	e006      	b.n	8003188 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800317a:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	43db      	mvns	r3, r3
 8003182:	4928      	ldr	r1, [pc, #160]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 8003184:	4013      	ands	r3, r2
 8003186:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d006      	beq.n	80031a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	4922      	ldr	r1, [pc, #136]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	604b      	str	r3, [r1, #4]
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	491e      	ldr	r1, [pc, #120]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d006      	beq.n	80031ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	4918      	ldr	r1, [pc, #96]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]
 80031c8:	e006      	b.n	80031d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4914      	ldr	r1, [pc, #80]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d021      	beq.n	8003228 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	490e      	ldr	r1, [pc, #56]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60cb      	str	r3, [r1, #12]
 80031f0:	e021      	b.n	8003236 <HAL_GPIO_Init+0x2e2>
 80031f2:	bf00      	nop
 80031f4:	10320000 	.word	0x10320000
 80031f8:	10310000 	.word	0x10310000
 80031fc:	10220000 	.word	0x10220000
 8003200:	10210000 	.word	0x10210000
 8003204:	10120000 	.word	0x10120000
 8003208:	10110000 	.word	0x10110000
 800320c:	40021000 	.word	0x40021000
 8003210:	40010000 	.word	0x40010000
 8003214:	40010800 	.word	0x40010800
 8003218:	40010c00 	.word	0x40010c00
 800321c:	40011000 	.word	0x40011000
 8003220:	40011400 	.word	0x40011400
 8003224:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_GPIO_Init+0x304>)
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	43db      	mvns	r3, r3
 8003230:	4909      	ldr	r1, [pc, #36]	; (8003258 <HAL_GPIO_Init+0x304>)
 8003232:	4013      	ands	r3, r2
 8003234:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	3301      	adds	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	f47f ae8e 	bne.w	8002f68 <HAL_GPIO_Init+0x14>
  }
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	372c      	adds	r7, #44	; 0x2c
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	40010400 	.word	0x40010400

0800325c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
 8003278:	e001      	b.n	800327e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	807b      	strh	r3, [r7, #2]
 8003296:	4613      	mov	r3, r2
 8003298:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800329a:	787b      	ldrb	r3, [r7, #1]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a0:	887a      	ldrh	r2, [r7, #2]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032a6:	e003      	b.n	80032b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032a8:	887b      	ldrh	r3, [r7, #2]
 80032aa:	041a      	lsls	r2, r3, #16
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	611a      	str	r2, [r3, #16]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e12b      	b.n	8003526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff fa16 	bl	8002714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800331e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003320:	f001 fba0 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8003324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4a81      	ldr	r2, [pc, #516]	; (8003530 <HAL_I2C_Init+0x274>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d807      	bhi.n	8003340 <HAL_I2C_Init+0x84>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a80      	ldr	r2, [pc, #512]	; (8003534 <HAL_I2C_Init+0x278>)
 8003334:	4293      	cmp	r3, r2
 8003336:	bf94      	ite	ls
 8003338:	2301      	movls	r3, #1
 800333a:	2300      	movhi	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e006      	b.n	800334e <HAL_I2C_Init+0x92>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a7d      	ldr	r2, [pc, #500]	; (8003538 <HAL_I2C_Init+0x27c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	bf94      	ite	ls
 8003348:	2301      	movls	r3, #1
 800334a:	2300      	movhi	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0e7      	b.n	8003526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4a78      	ldr	r2, [pc, #480]	; (800353c <HAL_I2C_Init+0x280>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	0c9b      	lsrs	r3, r3, #18
 8003360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a6a      	ldr	r2, [pc, #424]	; (8003530 <HAL_I2C_Init+0x274>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d802      	bhi.n	8003390 <HAL_I2C_Init+0xd4>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	3301      	adds	r3, #1
 800338e:	e009      	b.n	80033a4 <HAL_I2C_Init+0xe8>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	4a69      	ldr	r2, [pc, #420]	; (8003540 <HAL_I2C_Init+0x284>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	3301      	adds	r3, #1
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	495c      	ldr	r1, [pc, #368]	; (8003530 <HAL_I2C_Init+0x274>)
 80033c0:	428b      	cmp	r3, r1
 80033c2:	d819      	bhi.n	80033f8 <HAL_I2C_Init+0x13c>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1e59      	subs	r1, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d2:	1c59      	adds	r1, r3, #1
 80033d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033d8:	400b      	ands	r3, r1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_I2C_Init+0x138>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1e59      	subs	r1, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f2:	e051      	b.n	8003498 <HAL_I2C_Init+0x1dc>
 80033f4:	2304      	movs	r3, #4
 80033f6:	e04f      	b.n	8003498 <HAL_I2C_Init+0x1dc>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d111      	bne.n	8003424 <HAL_I2C_Init+0x168>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1e58      	subs	r0, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e012      	b.n	800344a <HAL_I2C_Init+0x18e>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1e58      	subs	r0, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	0099      	lsls	r1, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	fbb0 f3f3 	udiv	r3, r0, r3
 800343a:	3301      	adds	r3, #1
 800343c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Init+0x196>
 800344e:	2301      	movs	r3, #1
 8003450:	e022      	b.n	8003498 <HAL_I2C_Init+0x1dc>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10e      	bne.n	8003478 <HAL_I2C_Init+0x1bc>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1e58      	subs	r0, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	460b      	mov	r3, r1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	440b      	add	r3, r1
 8003468:	fbb0 f3f3 	udiv	r3, r0, r3
 800346c:	3301      	adds	r3, #1
 800346e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003476:	e00f      	b.n	8003498 <HAL_I2C_Init+0x1dc>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e58      	subs	r0, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	0099      	lsls	r1, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	fbb0 f3f3 	udiv	r3, r0, r3
 800348e:	3301      	adds	r3, #1
 8003490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6809      	ldr	r1, [r1, #0]
 800349c:	4313      	orrs	r3, r2
 800349e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6911      	ldr	r1, [r2, #16]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68d2      	ldr	r2, [r2, #12]
 80034d2:	4311      	orrs	r1, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	430b      	orrs	r3, r1
 80034da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	000186a0 	.word	0x000186a0
 8003534:	001e847f 	.word	0x001e847f
 8003538:	003d08ff 	.word	0x003d08ff
 800353c:	431bde83 	.word	0x431bde83
 8003540:	10624dd3 	.word	0x10624dd3

08003544 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	4608      	mov	r0, r1
 800354e:	4611      	mov	r1, r2
 8003550:	461a      	mov	r2, r3
 8003552:	4603      	mov	r3, r0
 8003554:	817b      	strh	r3, [r7, #10]
 8003556:	460b      	mov	r3, r1
 8003558:	813b      	strh	r3, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800355e:	f7ff fbbd 	bl	8002cdc <HAL_GetTick>
 8003562:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	f040 80d9 	bne.w	8003724 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2319      	movs	r3, #25
 8003578:	2201      	movs	r2, #1
 800357a:	496d      	ldr	r1, [pc, #436]	; (8003730 <HAL_I2C_Mem_Write+0x1ec>)
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fcc1 	bl	8003f04 <I2C_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003588:	2302      	movs	r3, #2
 800358a:	e0cc      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_I2C_Mem_Write+0x56>
 8003596:	2302      	movs	r3, #2
 8003598:	e0c5      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d007      	beq.n	80035c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2221      	movs	r2, #33	; 0x21
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2240      	movs	r2, #64	; 0x40
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a4d      	ldr	r2, [pc, #308]	; (8003734 <HAL_I2C_Mem_Write+0x1f0>)
 8003600:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003602:	88f8      	ldrh	r0, [r7, #6]
 8003604:	893a      	ldrh	r2, [r7, #8]
 8003606:	8979      	ldrh	r1, [r7, #10]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	4603      	mov	r3, r0
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 faf8 	bl	8003c08 <I2C_RequestMemoryWrite>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d052      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e081      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fd42 	bl	80040b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b04      	cmp	r3, #4
 8003638:	d107      	bne.n	800364a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06b      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b04      	cmp	r3, #4
 800368a:	d11b      	bne.n	80036c4 <HAL_I2C_Mem_Write+0x180>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	d017      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1aa      	bne.n	8003622 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fd2e 	bl	8004132 <I2C_WaitOnBTFFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d107      	bne.n	80036f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e016      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	00100002 	.word	0x00100002
 8003734:	ffff0000 	.word	0xffff0000

08003738 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	; 0x30
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	4608      	mov	r0, r1
 8003742:	4611      	mov	r1, r2
 8003744:	461a      	mov	r2, r3
 8003746:	4603      	mov	r3, r0
 8003748:	817b      	strh	r3, [r7, #10]
 800374a:	460b      	mov	r3, r1
 800374c:	813b      	strh	r3, [r7, #8]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003756:	f7ff fac1 	bl	8002cdc <HAL_GetTick>
 800375a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b20      	cmp	r3, #32
 8003766:	f040 8244 	bne.w	8003bf2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2319      	movs	r3, #25
 8003770:	2201      	movs	r2, #1
 8003772:	4982      	ldr	r1, [pc, #520]	; (800397c <HAL_I2C_Mem_Read+0x244>)
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fbc5 	bl	8003f04 <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
 8003782:	e237      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_I2C_Mem_Read+0x5a>
 800378e:	2302      	movs	r3, #2
 8003790:	e230      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x4bc>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d007      	beq.n	80037b8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2222      	movs	r2, #34	; 0x22
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2240      	movs	r2, #64	; 0x40
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a62      	ldr	r2, [pc, #392]	; (8003980 <HAL_I2C_Mem_Read+0x248>)
 80037f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037fa:	88f8      	ldrh	r0, [r7, #6]
 80037fc:	893a      	ldrh	r2, [r7, #8]
 80037fe:	8979      	ldrh	r1, [r7, #10]
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	4603      	mov	r3, r0
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fa92 	bl	8003d34 <I2C_RequestMemoryRead>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e1ec      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d113      	bne.n	800384a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e1c0      	b.n	8003bcc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384e:	2b01      	cmp	r3, #1
 8003850:	d11e      	bne.n	8003890 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003860:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003862:	b672      	cpsid	i
}
 8003864:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800388c:	b662      	cpsie	i
}
 800388e:	e035      	b.n	80038fc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	2b02      	cmp	r3, #2
 8003896:	d11e      	bne.n	80038d6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038a8:	b672      	cpsid	i
}
 80038aa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038d2:	b662      	cpsie	i
}
 80038d4:	e012      	b.n	80038fc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038e4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80038fc:	e166      	b.n	8003bcc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	2b03      	cmp	r3, #3
 8003904:	f200 811f 	bhi.w	8003b46 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390c:	2b01      	cmp	r3, #1
 800390e:	d123      	bne.n	8003958 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003912:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fc4d 	bl	80041b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e167      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003956:	e139      	b.n	8003bcc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395c:	2b02      	cmp	r3, #2
 800395e:	d152      	bne.n	8003a06 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	2200      	movs	r2, #0
 8003968:	4906      	ldr	r1, [pc, #24]	; (8003984 <HAL_I2C_Mem_Read+0x24c>)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 faca 	bl	8003f04 <I2C_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d008      	beq.n	8003988 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e13c      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x4bc>
 800397a:	bf00      	nop
 800397c:	00100002 	.word	0x00100002
 8003980:	ffff0000 	.word	0xffff0000
 8003984:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003988:	b672      	cpsid	i
}
 800398a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039ce:	b662      	cpsie	i
}
 80039d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a04:	e0e2      	b.n	8003bcc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	497b      	ldr	r1, [pc, #492]	; (8003bfc <HAL_I2C_Mem_Read+0x4c4>)
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fa77 	bl	8003f04 <I2C_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0e9      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a30:	b672      	cpsid	i
}
 8003a32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a66:	4b66      	ldr	r3, [pc, #408]	; (8003c00 <HAL_I2C_Mem_Read+0x4c8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	08db      	lsrs	r3, r3, #3
 8003a6c:	4a65      	ldr	r2, [pc, #404]	; (8003c04 <HAL_I2C_Mem_Read+0x4cc>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0a1a      	lsrs	r2, r3, #8
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	00da      	lsls	r2, r3, #3
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d118      	bne.n	8003abe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 0220 	orr.w	r2, r3, #32
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003aae:	b662      	cpsie	i
}
 8003ab0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e09a      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d1d9      	bne.n	8003a80 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b0e:	b662      	cpsie	i
}
 8003b10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b44:	e042      	b.n	8003bcc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fb32 	bl	80041b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e04c      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d118      	bne.n	8003bcc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f47f ae94 	bne.w	80038fe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e000      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
  }
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3728      	adds	r7, #40	; 0x28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	00010004 	.word	0x00010004
 8003c00:	20000000 	.word	0x20000000
 8003c04:	14f8b589 	.word	0x14f8b589

08003c08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	4608      	mov	r0, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	817b      	strh	r3, [r7, #10]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	813b      	strh	r3, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f960 	bl	8003f04 <I2C_WaitOnFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c58:	d103      	bne.n	8003c62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e05f      	b.n	8003d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c66:	897b      	ldrh	r3, [r7, #10]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	6a3a      	ldr	r2, [r7, #32]
 8003c7a:	492d      	ldr	r1, [pc, #180]	; (8003d30 <I2C_RequestMemoryWrite+0x128>)
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f998 	bl	8003fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e04c      	b.n	8003d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	6a39      	ldr	r1, [r7, #32]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fa02 	bl	80040b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d107      	bne.n	8003cca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e02b      	b.n	8003d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd4:	893b      	ldrh	r3, [r7, #8]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	611a      	str	r2, [r3, #16]
 8003cde:	e021      	b.n	8003d24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ce0:	893b      	ldrh	r3, [r7, #8]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf0:	6a39      	ldr	r1, [r7, #32]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f9dc 	bl	80040b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d107      	bne.n	8003d16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e005      	b.n	8003d26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d1a:	893b      	ldrh	r3, [r7, #8]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	00010002 	.word	0x00010002

08003d34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	461a      	mov	r2, r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	817b      	strh	r3, [r7, #10]
 8003d46:	460b      	mov	r3, r1
 8003d48:	813b      	strh	r3, [r7, #8]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f8c2 	bl	8003f04 <I2C_WaitOnFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00d      	beq.n	8003da2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d94:	d103      	bne.n	8003d9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0aa      	b.n	8003ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003da2:	897b      	ldrh	r3, [r7, #10]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003db0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	6a3a      	ldr	r2, [r7, #32]
 8003db6:	4952      	ldr	r1, [pc, #328]	; (8003f00 <I2C_RequestMemoryRead+0x1cc>)
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f8fa 	bl	8003fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e097      	b.n	8003ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de0:	6a39      	ldr	r1, [r7, #32]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f964 	bl	80040b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00d      	beq.n	8003e0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d107      	bne.n	8003e06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e076      	b.n	8003ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e10:	893b      	ldrh	r3, [r7, #8]
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	611a      	str	r2, [r3, #16]
 8003e1a:	e021      	b.n	8003e60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e1c:	893b      	ldrh	r3, [r7, #8]
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2c:	6a39      	ldr	r1, [r7, #32]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f93e 	bl	80040b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00d      	beq.n	8003e56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d107      	bne.n	8003e52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e050      	b.n	8003ef8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e56:	893b      	ldrh	r3, [r7, #8]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	6a39      	ldr	r1, [r7, #32]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f923 	bl	80040b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00d      	beq.n	8003e8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d107      	bne.n	8003e88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e035      	b.n	8003ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f82b 	bl	8003f04 <I2C_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00d      	beq.n	8003ed0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec2:	d103      	bne.n	8003ecc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e013      	b.n	8003ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ed0:	897b      	ldrh	r3, [r7, #10]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	6a3a      	ldr	r2, [r7, #32]
 8003ee4:	4906      	ldr	r1, [pc, #24]	; (8003f00 <I2C_RequestMemoryRead+0x1cc>)
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f863 	bl	8003fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	00010002 	.word	0x00010002

08003f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f14:	e025      	b.n	8003f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d021      	beq.n	8003f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1e:	f7fe fedd 	bl	8002cdc <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d302      	bcc.n	8003f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d116      	bne.n	8003f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e023      	b.n	8003faa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d10d      	bne.n	8003f88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	43da      	mvns	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	e00c      	b.n	8003fa2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4013      	ands	r3, r2
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf0c      	ite	eq
 8003f9a:	2301      	moveq	r3, #1
 8003f9c:	2300      	movne	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d0b6      	beq.n	8003f16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fc0:	e051      	b.n	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd0:	d123      	bne.n	800401a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f043 0204 	orr.w	r2, r3, #4
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e046      	b.n	80040a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d021      	beq.n	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004022:	f7fe fe5b 	bl	8002cdc <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d116      	bne.n	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f043 0220 	orr.w	r2, r3, #32
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e020      	b.n	80040a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d10c      	bne.n	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	43da      	mvns	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4013      	ands	r3, r2
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	bf14      	ite	ne
 8004082:	2301      	movne	r3, #1
 8004084:	2300      	moveq	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	e00b      	b.n	80040a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	43da      	mvns	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4013      	ands	r3, r2
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d18d      	bne.n	8003fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040bc:	e02d      	b.n	800411a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f8ce 	bl	8004260 <I2C_IsAcknowledgeFailed>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e02d      	b.n	800412a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d021      	beq.n	800411a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d6:	f7fe fe01 	bl	8002cdc <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d302      	bcc.n	80040ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d116      	bne.n	800411a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e007      	b.n	800412a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004124:	2b80      	cmp	r3, #128	; 0x80
 8004126:	d1ca      	bne.n	80040be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800413e:	e02d      	b.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f88d 	bl	8004260 <I2C_IsAcknowledgeFailed>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e02d      	b.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004156:	d021      	beq.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004158:	f7fe fdc0 	bl	8002cdc <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	429a      	cmp	r2, r3
 8004166:	d302      	bcc.n	800416e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d116      	bne.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e007      	b.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d1ca      	bne.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041c0:	e042      	b.n	8004248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d119      	bne.n	8004204 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0210 	mvn.w	r2, #16
 80041d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e029      	b.n	8004258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004204:	f7fe fd6a 	bl	8002cdc <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	d302      	bcc.n	800421a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d116      	bne.n	8004248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f043 0220 	orr.w	r2, r3, #32
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e007      	b.n	8004258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d1b5      	bne.n	80041c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004276:	d11b      	bne.n	80042b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004280:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	f043 0204 	orr.w	r2, r3, #4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e26c      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 8087 	beq.w	80043ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042dc:	4b92      	ldr	r3, [pc, #584]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d00c      	beq.n	8004302 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042e8:	4b8f      	ldr	r3, [pc, #572]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 030c 	and.w	r3, r3, #12
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d112      	bne.n	800431a <HAL_RCC_OscConfig+0x5e>
 80042f4:	4b8c      	ldr	r3, [pc, #560]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d10b      	bne.n	800431a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004302:	4b89      	ldr	r3, [pc, #548]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d06c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x12c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d168      	bne.n	80043e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e246      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004322:	d106      	bne.n	8004332 <HAL_RCC_OscConfig+0x76>
 8004324:	4b80      	ldr	r3, [pc, #512]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7f      	ldr	r2, [pc, #508]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800432a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e02e      	b.n	8004390 <HAL_RCC_OscConfig+0xd4>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x98>
 800433a:	4b7b      	ldr	r3, [pc, #492]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a7a      	ldr	r2, [pc, #488]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b78      	ldr	r3, [pc, #480]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a77      	ldr	r2, [pc, #476]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800434c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e01d      	b.n	8004390 <HAL_RCC_OscConfig+0xd4>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0xbc>
 800435e:	4b72      	ldr	r3, [pc, #456]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a71      	ldr	r2, [pc, #452]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b6f      	ldr	r3, [pc, #444]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6e      	ldr	r2, [pc, #440]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0xd4>
 8004378:	4b6b      	ldr	r3, [pc, #428]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a6a      	ldr	r2, [pc, #424]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800437e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b68      	ldr	r3, [pc, #416]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a67      	ldr	r2, [pc, #412]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800438a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d013      	beq.n	80043c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fe fca0 	bl	8002cdc <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fe fc9c 	bl	8002cdc <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e1fa      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	4b5d      	ldr	r3, [pc, #372]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0xe4>
 80043be:	e014      	b.n	80043ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fe fc8c 	bl	8002cdc <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fe fc88 	bl	8002cdc <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e1e6      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043da:	4b53      	ldr	r3, [pc, #332]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x10c>
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d063      	beq.n	80044be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043f6:	4b4c      	ldr	r3, [pc, #304]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004402:	4b49      	ldr	r3, [pc, #292]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b08      	cmp	r3, #8
 800440c:	d11c      	bne.n	8004448 <HAL_RCC_OscConfig+0x18c>
 800440e:	4b46      	ldr	r3, [pc, #280]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d116      	bne.n	8004448 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	4b43      	ldr	r3, [pc, #268]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_RCC_OscConfig+0x176>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e1ba      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004432:	4b3d      	ldr	r3, [pc, #244]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4939      	ldr	r1, [pc, #228]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004446:	e03a      	b.n	80044be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004450:	4b36      	ldr	r3, [pc, #216]	; (800452c <HAL_RCC_OscConfig+0x270>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004456:	f7fe fc41 	bl	8002cdc <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445e:	f7fe fc3d 	bl	8002cdc <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e19b      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004470:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447c:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4927      	ldr	r1, [pc, #156]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]
 8004490:	e015      	b.n	80044be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004492:	4b26      	ldr	r3, [pc, #152]	; (800452c <HAL_RCC_OscConfig+0x270>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fe fc20 	bl	8002cdc <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a0:	f7fe fc1c 	bl	8002cdc <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e17a      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b2:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d03a      	beq.n	8004540 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d019      	beq.n	8004506 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d2:	4b17      	ldr	r3, [pc, #92]	; (8004530 <HAL_RCC_OscConfig+0x274>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d8:	f7fe fc00 	bl	8002cdc <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e0:	f7fe fbfc 	bl	8002cdc <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e15a      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044fe:	2001      	movs	r0, #1
 8004500:	f000 fad8 	bl	8004ab4 <RCC_Delay>
 8004504:	e01c      	b.n	8004540 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <HAL_RCC_OscConfig+0x274>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450c:	f7fe fbe6 	bl	8002cdc <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004512:	e00f      	b.n	8004534 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004514:	f7fe fbe2 	bl	8002cdc <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d908      	bls.n	8004534 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e140      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	42420000 	.word	0x42420000
 8004530:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004534:	4b9e      	ldr	r3, [pc, #632]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e9      	bne.n	8004514 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80a6 	beq.w	800469a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004552:	4b97      	ldr	r3, [pc, #604]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10d      	bne.n	800457a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455e:	4b94      	ldr	r3, [pc, #592]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	4a93      	ldr	r2, [pc, #588]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004568:	61d3      	str	r3, [r2, #28]
 800456a:	4b91      	ldr	r3, [pc, #580]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457a:	4b8e      	ldr	r3, [pc, #568]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d118      	bne.n	80045b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004586:	4b8b      	ldr	r3, [pc, #556]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a8a      	ldr	r2, [pc, #552]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800458c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004592:	f7fe fba3 	bl	8002cdc <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459a:	f7fe fb9f 	bl	8002cdc <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b64      	cmp	r3, #100	; 0x64
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0fd      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ac:	4b81      	ldr	r3, [pc, #516]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d106      	bne.n	80045ce <HAL_RCC_OscConfig+0x312>
 80045c0:	4b7b      	ldr	r3, [pc, #492]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	4a7a      	ldr	r2, [pc, #488]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6213      	str	r3, [r2, #32]
 80045cc:	e02d      	b.n	800462a <HAL_RCC_OscConfig+0x36e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x334>
 80045d6:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	4a75      	ldr	r2, [pc, #468]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	6213      	str	r3, [r2, #32]
 80045e2:	4b73      	ldr	r3, [pc, #460]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	4a72      	ldr	r2, [pc, #456]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045e8:	f023 0304 	bic.w	r3, r3, #4
 80045ec:	6213      	str	r3, [r2, #32]
 80045ee:	e01c      	b.n	800462a <HAL_RCC_OscConfig+0x36e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2b05      	cmp	r3, #5
 80045f6:	d10c      	bne.n	8004612 <HAL_RCC_OscConfig+0x356>
 80045f8:	4b6d      	ldr	r3, [pc, #436]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	4a6c      	ldr	r2, [pc, #432]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80045fe:	f043 0304 	orr.w	r3, r3, #4
 8004602:	6213      	str	r3, [r2, #32]
 8004604:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4a69      	ldr	r2, [pc, #420]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	6213      	str	r3, [r2, #32]
 8004610:	e00b      	b.n	800462a <HAL_RCC_OscConfig+0x36e>
 8004612:	4b67      	ldr	r3, [pc, #412]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	4a66      	ldr	r2, [pc, #408]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	6213      	str	r3, [r2, #32]
 800461e:	4b64      	ldr	r3, [pc, #400]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	4a63      	ldr	r2, [pc, #396]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004624:	f023 0304 	bic.w	r3, r3, #4
 8004628:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d015      	beq.n	800465e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004632:	f7fe fb53 	bl	8002cdc <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004638:	e00a      	b.n	8004650 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463a:	f7fe fb4f 	bl	8002cdc <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f241 3288 	movw	r2, #5000	; 0x1388
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e0ab      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004650:	4b57      	ldr	r3, [pc, #348]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0ee      	beq.n	800463a <HAL_RCC_OscConfig+0x37e>
 800465c:	e014      	b.n	8004688 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465e:	f7fe fb3d 	bl	8002cdc <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004664:	e00a      	b.n	800467c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004666:	f7fe fb39 	bl	8002cdc <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f241 3288 	movw	r2, #5000	; 0x1388
 8004674:	4293      	cmp	r3, r2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e095      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467c:	4b4c      	ldr	r3, [pc, #304]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1ee      	bne.n	8004666 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004688:	7dfb      	ldrb	r3, [r7, #23]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d105      	bne.n	800469a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468e:	4b48      	ldr	r3, [pc, #288]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	4a47      	ldr	r2, [pc, #284]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004698:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8081 	beq.w	80047a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a4:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d061      	beq.n	8004774 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d146      	bne.n	8004746 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b8:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <HAL_RCC_OscConfig+0x4fc>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046be:	f7fe fb0d 	bl	8002cdc <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c6:	f7fe fb09 	bl	8002cdc <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e067      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d8:	4b35      	ldr	r3, [pc, #212]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f0      	bne.n	80046c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ec:	d108      	bne.n	8004700 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046ee:	4b30      	ldr	r3, [pc, #192]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	492d      	ldr	r1, [pc, #180]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a19      	ldr	r1, [r3, #32]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	430b      	orrs	r3, r1
 8004712:	4927      	ldr	r1, [pc, #156]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <HAL_RCC_OscConfig+0x4fc>)
 800471a:	2201      	movs	r2, #1
 800471c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471e:	f7fe fadd 	bl	8002cdc <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004726:	f7fe fad9 	bl	8002cdc <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e037      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCC_OscConfig+0x46a>
 8004744:	e02f      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004746:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <HAL_RCC_OscConfig+0x4fc>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fe fac6 	bl	8002cdc <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004754:	f7fe fac2 	bl	8002cdc <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e020      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004766:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x498>
 8004772:	e018      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e013      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCC_OscConfig+0x4f4>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	429a      	cmp	r2, r3
 8004792:	d106      	bne.n	80047a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d001      	beq.n	80047a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40007000 	.word	0x40007000
 80047b8:	42420060 	.word	0x42420060

080047bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0d0      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d0:	4b6a      	ldr	r3, [pc, #424]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d910      	bls.n	8004800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b67      	ldr	r3, [pc, #412]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 0207 	bic.w	r2, r3, #7
 80047e6:	4965      	ldr	r1, [pc, #404]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b63      	ldr	r3, [pc, #396]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0b8      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d020      	beq.n	800484e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004818:	4b59      	ldr	r3, [pc, #356]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a58      	ldr	r2, [pc, #352]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004822:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004830:	4b53      	ldr	r3, [pc, #332]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4a52      	ldr	r2, [pc, #328]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800483a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800483c:	4b50      	ldr	r3, [pc, #320]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	494d      	ldr	r1, [pc, #308]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800484a:	4313      	orrs	r3, r2
 800484c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d040      	beq.n	80048dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004862:	4b47      	ldr	r3, [pc, #284]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d115      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e07f      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d107      	bne.n	800488a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487a:	4b41      	ldr	r3, [pc, #260]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e073      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488a:	4b3d      	ldr	r3, [pc, #244]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e06b      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800489a:	4b39      	ldr	r3, [pc, #228]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f023 0203 	bic.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4936      	ldr	r1, [pc, #216]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ac:	f7fe fa16 	bl	8002cdc <HAL_GetTick>
 80048b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b4:	f7fe fa12 	bl	8002cdc <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e053      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ca:	4b2d      	ldr	r3, [pc, #180]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 020c 	and.w	r2, r3, #12
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	429a      	cmp	r2, r3
 80048da:	d1eb      	bne.n	80048b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048dc:	4b27      	ldr	r3, [pc, #156]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d210      	bcs.n	800490c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4b24      	ldr	r3, [pc, #144]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f023 0207 	bic.w	r2, r3, #7
 80048f2:	4922      	ldr	r1, [pc, #136]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fa:	4b20      	ldr	r3, [pc, #128]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e032      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004918:	4b19      	ldr	r3, [pc, #100]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4916      	ldr	r1, [pc, #88]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004936:	4b12      	ldr	r3, [pc, #72]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	490e      	ldr	r1, [pc, #56]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800494a:	f000 f821 	bl	8004990 <HAL_RCC_GetSysClockFreq>
 800494e:	4602      	mov	r2, r0
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	490a      	ldr	r1, [pc, #40]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 800495c:	5ccb      	ldrb	r3, [r1, r3]
 800495e:	fa22 f303 	lsr.w	r3, r2, r3
 8004962:	4a09      	ldr	r2, [pc, #36]	; (8004988 <HAL_RCC_ClockConfig+0x1cc>)
 8004964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004966:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_RCC_ClockConfig+0x1d0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe f974 	bl	8002c58 <HAL_InitTick>

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40022000 	.word	0x40022000
 8004980:	40021000 	.word	0x40021000
 8004984:	08007ad8 	.word	0x08007ad8
 8004988:	20000000 	.word	0x20000000
 800498c:	20000004 	.word	0x20000004

08004990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004990:	b490      	push	{r4, r7}
 8004992:	b08a      	sub	sp, #40	; 0x28
 8004994:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004996:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004998:	1d3c      	adds	r4, r7, #4
 800499a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800499c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049a0:	f240 2301 	movw	r3, #513	; 0x201
 80049a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	2300      	movs	r3, #0
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049ba:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d002      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0x40>
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d003      	beq.n	80049d6 <HAL_RCC_GetSysClockFreq+0x46>
 80049ce:	e02d      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049d0:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d2:	623b      	str	r3, [r7, #32]
      break;
 80049d4:	e02d      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	0c9b      	lsrs	r3, r3, #18
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049e2:	4413      	add	r3, r2
 80049e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d013      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049f4:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0c5b      	lsrs	r3, r3, #17
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a02:	4413      	add	r3, r2
 8004a04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4a0e      	ldr	r2, [pc, #56]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a0e:	fb02 f203 	mul.w	r2, r2, r3
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	e004      	b.n	8004a26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	4a0b      	ldr	r2, [pc, #44]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	623b      	str	r3, [r7, #32]
      break;
 8004a2a:	e002      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a2e:	623b      	str	r3, [r7, #32]
      break;
 8004a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a32:	6a3b      	ldr	r3, [r7, #32]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3728      	adds	r7, #40	; 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc90      	pop	{r4, r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	08007ac8 	.word	0x08007ac8
 8004a44:	40021000 	.word	0x40021000
 8004a48:	007a1200 	.word	0x007a1200
 8004a4c:	003d0900 	.word	0x003d0900

08004a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a54:	4b02      	ldr	r3, [pc, #8]	; (8004a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	20000000 	.word	0x20000000

08004a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a68:	f7ff fff2 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4903      	ldr	r1, [pc, #12]	; (8004a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a7a:	5ccb      	ldrb	r3, [r1, r3]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40021000 	.word	0x40021000
 8004a88:	08007ae8 	.word	0x08007ae8

08004a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a90:	f7ff ffde 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	0adb      	lsrs	r3, r3, #11
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	4903      	ldr	r1, [pc, #12]	; (8004ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aa2:	5ccb      	ldrb	r3, [r1, r3]
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	08007ae8 	.word	0x08007ae8

08004ab4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <RCC_Delay+0x34>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <RCC_Delay+0x38>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	0a5b      	lsrs	r3, r3, #9
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ad0:	bf00      	nop
  }
  while (Delay --);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1e5a      	subs	r2, r3, #1
 8004ad6:	60fa      	str	r2, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f9      	bne.n	8004ad0 <RCC_Delay+0x1c>
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr
 8004ae8:	20000000 	.word	0x20000000
 8004aec:	10624dd3 	.word	0x10624dd3

08004af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e03f      	b.n	8004b82 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fd fe3a 	bl	8002790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2224      	movs	r2, #36	; 0x24
 8004b20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f829 	bl	8004b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bc6:	f023 030c 	bic.w	r3, r3, #12
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699a      	ldr	r2, [r3, #24]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a2c      	ldr	r2, [pc, #176]	; (8004ca0 <UART_SetConfig+0x114>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d103      	bne.n	8004bfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004bf4:	f7ff ff4a 	bl	8004a8c <HAL_RCC_GetPCLK2Freq>
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	e002      	b.n	8004c02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bfc:	f7ff ff32 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8004c00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	009a      	lsls	r2, r3, #2
 8004c0c:	441a      	add	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	4a22      	ldr	r2, [pc, #136]	; (8004ca4 <UART_SetConfig+0x118>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	0119      	lsls	r1, r3, #4
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	009a      	lsls	r2, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c38:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <UART_SetConfig+0x118>)
 8004c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	2064      	movs	r0, #100	; 0x64
 8004c42:	fb00 f303 	mul.w	r3, r0, r3
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	3332      	adds	r3, #50	; 0x32
 8004c4c:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <UART_SetConfig+0x118>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c58:	4419      	add	r1, r3
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	009a      	lsls	r2, r3, #2
 8004c64:	441a      	add	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <UART_SetConfig+0x118>)
 8004c72:	fba3 0302 	umull	r0, r3, r3, r2
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	2064      	movs	r0, #100	; 0x64
 8004c7a:	fb00 f303 	mul.w	r3, r0, r3
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	3332      	adds	r3, #50	; 0x32
 8004c84:	4a07      	ldr	r2, [pc, #28]	; (8004ca4 <UART_SetConfig+0x118>)
 8004c86:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	f003 020f 	and.w	r2, r3, #15
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	440a      	add	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40013800 	.word	0x40013800
 8004ca4:	51eb851f 	.word	0x51eb851f

08004ca8 <__errno>:
 8004ca8:	4b01      	ldr	r3, [pc, #4]	; (8004cb0 <__errno+0x8>)
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	2000000c 	.word	0x2000000c

08004cb4 <__libc_init_array>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	2600      	movs	r6, #0
 8004cb8:	4d0c      	ldr	r5, [pc, #48]	; (8004cec <__libc_init_array+0x38>)
 8004cba:	4c0d      	ldr	r4, [pc, #52]	; (8004cf0 <__libc_init_array+0x3c>)
 8004cbc:	1b64      	subs	r4, r4, r5
 8004cbe:	10a4      	asrs	r4, r4, #2
 8004cc0:	42a6      	cmp	r6, r4
 8004cc2:	d109      	bne.n	8004cd8 <__libc_init_array+0x24>
 8004cc4:	f002 feba 	bl	8007a3c <_init>
 8004cc8:	2600      	movs	r6, #0
 8004cca:	4d0a      	ldr	r5, [pc, #40]	; (8004cf4 <__libc_init_array+0x40>)
 8004ccc:	4c0a      	ldr	r4, [pc, #40]	; (8004cf8 <__libc_init_array+0x44>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	42a6      	cmp	r6, r4
 8004cd4:	d105      	bne.n	8004ce2 <__libc_init_array+0x2e>
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cdc:	4798      	blx	r3
 8004cde:	3601      	adds	r6, #1
 8004ce0:	e7ee      	b.n	8004cc0 <__libc_init_array+0xc>
 8004ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce6:	4798      	blx	r3
 8004ce8:	3601      	adds	r6, #1
 8004cea:	e7f2      	b.n	8004cd2 <__libc_init_array+0x1e>
 8004cec:	08007edc 	.word	0x08007edc
 8004cf0:	08007edc 	.word	0x08007edc
 8004cf4:	08007edc 	.word	0x08007edc
 8004cf8:	08007ee0 	.word	0x08007ee0

08004cfc <memset>:
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4402      	add	r2, r0
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d100      	bne.n	8004d06 <memset+0xa>
 8004d04:	4770      	bx	lr
 8004d06:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0a:	e7f9      	b.n	8004d00 <memset+0x4>

08004d0c <__cvt>:
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d12:	461f      	mov	r7, r3
 8004d14:	bfbb      	ittet	lt
 8004d16:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d1a:	461f      	movlt	r7, r3
 8004d1c:	2300      	movge	r3, #0
 8004d1e:	232d      	movlt	r3, #45	; 0x2d
 8004d20:	b088      	sub	sp, #32
 8004d22:	4614      	mov	r4, r2
 8004d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d26:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d28:	7013      	strb	r3, [r2, #0]
 8004d2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d2c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d30:	f023 0820 	bic.w	r8, r3, #32
 8004d34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d38:	d005      	beq.n	8004d46 <__cvt+0x3a>
 8004d3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d3e:	d100      	bne.n	8004d42 <__cvt+0x36>
 8004d40:	3501      	adds	r5, #1
 8004d42:	2302      	movs	r3, #2
 8004d44:	e000      	b.n	8004d48 <__cvt+0x3c>
 8004d46:	2303      	movs	r3, #3
 8004d48:	aa07      	add	r2, sp, #28
 8004d4a:	9204      	str	r2, [sp, #16]
 8004d4c:	aa06      	add	r2, sp, #24
 8004d4e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d52:	e9cd 3500 	strd	r3, r5, [sp]
 8004d56:	4622      	mov	r2, r4
 8004d58:	463b      	mov	r3, r7
 8004d5a:	f000 fce5 	bl	8005728 <_dtoa_r>
 8004d5e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d62:	4606      	mov	r6, r0
 8004d64:	d102      	bne.n	8004d6c <__cvt+0x60>
 8004d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d68:	07db      	lsls	r3, r3, #31
 8004d6a:	d522      	bpl.n	8004db2 <__cvt+0xa6>
 8004d6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d70:	eb06 0905 	add.w	r9, r6, r5
 8004d74:	d110      	bne.n	8004d98 <__cvt+0x8c>
 8004d76:	7833      	ldrb	r3, [r6, #0]
 8004d78:	2b30      	cmp	r3, #48	; 0x30
 8004d7a:	d10a      	bne.n	8004d92 <__cvt+0x86>
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2300      	movs	r3, #0
 8004d80:	4620      	mov	r0, r4
 8004d82:	4639      	mov	r1, r7
 8004d84:	f7fb fe10 	bl	80009a8 <__aeabi_dcmpeq>
 8004d88:	b918      	cbnz	r0, 8004d92 <__cvt+0x86>
 8004d8a:	f1c5 0501 	rsb	r5, r5, #1
 8004d8e:	f8ca 5000 	str.w	r5, [sl]
 8004d92:	f8da 3000 	ldr.w	r3, [sl]
 8004d96:	4499      	add	r9, r3
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	4639      	mov	r1, r7
 8004da0:	f7fb fe02 	bl	80009a8 <__aeabi_dcmpeq>
 8004da4:	b108      	cbz	r0, 8004daa <__cvt+0x9e>
 8004da6:	f8cd 901c 	str.w	r9, [sp, #28]
 8004daa:	2230      	movs	r2, #48	; 0x30
 8004dac:	9b07      	ldr	r3, [sp, #28]
 8004dae:	454b      	cmp	r3, r9
 8004db0:	d307      	bcc.n	8004dc2 <__cvt+0xb6>
 8004db2:	4630      	mov	r0, r6
 8004db4:	9b07      	ldr	r3, [sp, #28]
 8004db6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004db8:	1b9b      	subs	r3, r3, r6
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	b008      	add	sp, #32
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc2:	1c59      	adds	r1, r3, #1
 8004dc4:	9107      	str	r1, [sp, #28]
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	e7f0      	b.n	8004dac <__cvt+0xa0>

08004dca <__exponent>:
 8004dca:	4603      	mov	r3, r0
 8004dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dce:	2900      	cmp	r1, #0
 8004dd0:	f803 2b02 	strb.w	r2, [r3], #2
 8004dd4:	bfb6      	itet	lt
 8004dd6:	222d      	movlt	r2, #45	; 0x2d
 8004dd8:	222b      	movge	r2, #43	; 0x2b
 8004dda:	4249      	neglt	r1, r1
 8004ddc:	2909      	cmp	r1, #9
 8004dde:	7042      	strb	r2, [r0, #1]
 8004de0:	dd2b      	ble.n	8004e3a <__exponent+0x70>
 8004de2:	f10d 0407 	add.w	r4, sp, #7
 8004de6:	46a4      	mov	ip, r4
 8004de8:	270a      	movs	r7, #10
 8004dea:	fb91 f6f7 	sdiv	r6, r1, r7
 8004dee:	460a      	mov	r2, r1
 8004df0:	46a6      	mov	lr, r4
 8004df2:	fb07 1516 	mls	r5, r7, r6, r1
 8004df6:	2a63      	cmp	r2, #99	; 0x63
 8004df8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e06:	dcf0      	bgt.n	8004dea <__exponent+0x20>
 8004e08:	3130      	adds	r1, #48	; 0x30
 8004e0a:	f1ae 0502 	sub.w	r5, lr, #2
 8004e0e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e12:	4629      	mov	r1, r5
 8004e14:	1c44      	adds	r4, r0, #1
 8004e16:	4561      	cmp	r1, ip
 8004e18:	d30a      	bcc.n	8004e30 <__exponent+0x66>
 8004e1a:	f10d 0209 	add.w	r2, sp, #9
 8004e1e:	eba2 020e 	sub.w	r2, r2, lr
 8004e22:	4565      	cmp	r5, ip
 8004e24:	bf88      	it	hi
 8004e26:	2200      	movhi	r2, #0
 8004e28:	4413      	add	r3, r2
 8004e2a:	1a18      	subs	r0, r3, r0
 8004e2c:	b003      	add	sp, #12
 8004e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e34:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e38:	e7ed      	b.n	8004e16 <__exponent+0x4c>
 8004e3a:	2330      	movs	r3, #48	; 0x30
 8004e3c:	3130      	adds	r1, #48	; 0x30
 8004e3e:	7083      	strb	r3, [r0, #2]
 8004e40:	70c1      	strb	r1, [r0, #3]
 8004e42:	1d03      	adds	r3, r0, #4
 8004e44:	e7f1      	b.n	8004e2a <__exponent+0x60>
	...

08004e48 <_printf_float>:
 8004e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4c:	b091      	sub	sp, #68	; 0x44
 8004e4e:	460c      	mov	r4, r1
 8004e50:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004e54:	4616      	mov	r6, r2
 8004e56:	461f      	mov	r7, r3
 8004e58:	4605      	mov	r5, r0
 8004e5a:	f001 fa53 	bl	8006304 <_localeconv_r>
 8004e5e:	6803      	ldr	r3, [r0, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	9309      	str	r3, [sp, #36]	; 0x24
 8004e64:	f7fb f974 	bl	8000150 <strlen>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	930e      	str	r3, [sp, #56]	; 0x38
 8004e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e70:	900a      	str	r0, [sp, #40]	; 0x28
 8004e72:	3307      	adds	r3, #7
 8004e74:	f023 0307 	bic.w	r3, r3, #7
 8004e78:	f103 0208 	add.w	r2, r3, #8
 8004e7c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e80:	f8d4 b000 	ldr.w	fp, [r4]
 8004e84:	f8c8 2000 	str.w	r2, [r8]
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e90:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004e94:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e98:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	4b9c      	ldr	r3, [pc, #624]	; (8005114 <_printf_float+0x2cc>)
 8004ea2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ea4:	f7fb fdb2 	bl	8000a0c <__aeabi_dcmpun>
 8004ea8:	bb70      	cbnz	r0, 8004f08 <_printf_float+0xc0>
 8004eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004eae:	4640      	mov	r0, r8
 8004eb0:	4b98      	ldr	r3, [pc, #608]	; (8005114 <_printf_float+0x2cc>)
 8004eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eb4:	f7fb fd8c 	bl	80009d0 <__aeabi_dcmple>
 8004eb8:	bb30      	cbnz	r0, 8004f08 <_printf_float+0xc0>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	4651      	mov	r1, sl
 8004ec2:	f7fb fd7b 	bl	80009bc <__aeabi_dcmplt>
 8004ec6:	b110      	cbz	r0, 8004ece <_printf_float+0x86>
 8004ec8:	232d      	movs	r3, #45	; 0x2d
 8004eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ece:	4b92      	ldr	r3, [pc, #584]	; (8005118 <_printf_float+0x2d0>)
 8004ed0:	4892      	ldr	r0, [pc, #584]	; (800511c <_printf_float+0x2d4>)
 8004ed2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004ed6:	bf94      	ite	ls
 8004ed8:	4698      	movls	r8, r3
 8004eda:	4680      	movhi	r8, r0
 8004edc:	2303      	movs	r3, #3
 8004ede:	f04f 0a00 	mov.w	sl, #0
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	f02b 0304 	bic.w	r3, fp, #4
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	4633      	mov	r3, r6
 8004eec:	4621      	mov	r1, r4
 8004eee:	4628      	mov	r0, r5
 8004ef0:	9700      	str	r7, [sp, #0]
 8004ef2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ef4:	f000 f9d4 	bl	80052a0 <_printf_common>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	f040 8090 	bne.w	800501e <_printf_float+0x1d6>
 8004efe:	f04f 30ff 	mov.w	r0, #4294967295
 8004f02:	b011      	add	sp, #68	; 0x44
 8004f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f08:	4642      	mov	r2, r8
 8004f0a:	4653      	mov	r3, sl
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	4651      	mov	r1, sl
 8004f10:	f7fb fd7c 	bl	8000a0c <__aeabi_dcmpun>
 8004f14:	b148      	cbz	r0, 8004f2a <_printf_float+0xe2>
 8004f16:	f1ba 0f00 	cmp.w	sl, #0
 8004f1a:	bfb8      	it	lt
 8004f1c:	232d      	movlt	r3, #45	; 0x2d
 8004f1e:	4880      	ldr	r0, [pc, #512]	; (8005120 <_printf_float+0x2d8>)
 8004f20:	bfb8      	it	lt
 8004f22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f26:	4b7f      	ldr	r3, [pc, #508]	; (8005124 <_printf_float+0x2dc>)
 8004f28:	e7d3      	b.n	8004ed2 <_printf_float+0x8a>
 8004f2a:	6863      	ldr	r3, [r4, #4]
 8004f2c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	d142      	bne.n	8004fba <_printf_float+0x172>
 8004f34:	2306      	movs	r3, #6
 8004f36:	6063      	str	r3, [r4, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	9206      	str	r2, [sp, #24]
 8004f3c:	aa0e      	add	r2, sp, #56	; 0x38
 8004f3e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f42:	aa0d      	add	r2, sp, #52	; 0x34
 8004f44:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f48:	9203      	str	r2, [sp, #12]
 8004f4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f52:	6023      	str	r3, [r4, #0]
 8004f54:	6863      	ldr	r3, [r4, #4]
 8004f56:	4642      	mov	r2, r8
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	4653      	mov	r3, sl
 8004f5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f60:	f7ff fed4 	bl	8004d0c <__cvt>
 8004f64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f66:	4680      	mov	r8, r0
 8004f68:	2947      	cmp	r1, #71	; 0x47
 8004f6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f6c:	d108      	bne.n	8004f80 <_printf_float+0x138>
 8004f6e:	1cc8      	adds	r0, r1, #3
 8004f70:	db02      	blt.n	8004f78 <_printf_float+0x130>
 8004f72:	6863      	ldr	r3, [r4, #4]
 8004f74:	4299      	cmp	r1, r3
 8004f76:	dd40      	ble.n	8004ffa <_printf_float+0x1b2>
 8004f78:	f1a9 0902 	sub.w	r9, r9, #2
 8004f7c:	fa5f f989 	uxtb.w	r9, r9
 8004f80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f84:	d81f      	bhi.n	8004fc6 <_printf_float+0x17e>
 8004f86:	464a      	mov	r2, r9
 8004f88:	3901      	subs	r1, #1
 8004f8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f8e:	910d      	str	r1, [sp, #52]	; 0x34
 8004f90:	f7ff ff1b 	bl	8004dca <__exponent>
 8004f94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f96:	4682      	mov	sl, r0
 8004f98:	1813      	adds	r3, r2, r0
 8004f9a:	2a01      	cmp	r2, #1
 8004f9c:	6123      	str	r3, [r4, #16]
 8004f9e:	dc02      	bgt.n	8004fa6 <_printf_float+0x15e>
 8004fa0:	6822      	ldr	r2, [r4, #0]
 8004fa2:	07d2      	lsls	r2, r2, #31
 8004fa4:	d501      	bpl.n	8004faa <_printf_float+0x162>
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d09b      	beq.n	8004eea <_printf_float+0xa2>
 8004fb2:	232d      	movs	r3, #45	; 0x2d
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb8:	e797      	b.n	8004eea <_printf_float+0xa2>
 8004fba:	2947      	cmp	r1, #71	; 0x47
 8004fbc:	d1bc      	bne.n	8004f38 <_printf_float+0xf0>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1ba      	bne.n	8004f38 <_printf_float+0xf0>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e7b7      	b.n	8004f36 <_printf_float+0xee>
 8004fc6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004fca:	d118      	bne.n	8004ffe <_printf_float+0x1b6>
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	6863      	ldr	r3, [r4, #4]
 8004fd0:	dd0b      	ble.n	8004fea <_printf_float+0x1a2>
 8004fd2:	6121      	str	r1, [r4, #16]
 8004fd4:	b913      	cbnz	r3, 8004fdc <_printf_float+0x194>
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	07d0      	lsls	r0, r2, #31
 8004fda:	d502      	bpl.n	8004fe2 <_printf_float+0x19a>
 8004fdc:	3301      	adds	r3, #1
 8004fde:	440b      	add	r3, r1
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	f04f 0a00 	mov.w	sl, #0
 8004fe6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fe8:	e7df      	b.n	8004faa <_printf_float+0x162>
 8004fea:	b913      	cbnz	r3, 8004ff2 <_printf_float+0x1aa>
 8004fec:	6822      	ldr	r2, [r4, #0]
 8004fee:	07d2      	lsls	r2, r2, #31
 8004ff0:	d501      	bpl.n	8004ff6 <_printf_float+0x1ae>
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	e7f4      	b.n	8004fe0 <_printf_float+0x198>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e7f2      	b.n	8004fe0 <_printf_float+0x198>
 8004ffa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005000:	4299      	cmp	r1, r3
 8005002:	db05      	blt.n	8005010 <_printf_float+0x1c8>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	6121      	str	r1, [r4, #16]
 8005008:	07d8      	lsls	r0, r3, #31
 800500a:	d5ea      	bpl.n	8004fe2 <_printf_float+0x19a>
 800500c:	1c4b      	adds	r3, r1, #1
 800500e:	e7e7      	b.n	8004fe0 <_printf_float+0x198>
 8005010:	2900      	cmp	r1, #0
 8005012:	bfcc      	ite	gt
 8005014:	2201      	movgt	r2, #1
 8005016:	f1c1 0202 	rsble	r2, r1, #2
 800501a:	4413      	add	r3, r2
 800501c:	e7e0      	b.n	8004fe0 <_printf_float+0x198>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	055a      	lsls	r2, r3, #21
 8005022:	d407      	bmi.n	8005034 <_printf_float+0x1ec>
 8005024:	6923      	ldr	r3, [r4, #16]
 8005026:	4642      	mov	r2, r8
 8005028:	4631      	mov	r1, r6
 800502a:	4628      	mov	r0, r5
 800502c:	47b8      	blx	r7
 800502e:	3001      	adds	r0, #1
 8005030:	d12b      	bne.n	800508a <_printf_float+0x242>
 8005032:	e764      	b.n	8004efe <_printf_float+0xb6>
 8005034:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005038:	f240 80dd 	bls.w	80051f6 <_printf_float+0x3ae>
 800503c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005040:	2200      	movs	r2, #0
 8005042:	2300      	movs	r3, #0
 8005044:	f7fb fcb0 	bl	80009a8 <__aeabi_dcmpeq>
 8005048:	2800      	cmp	r0, #0
 800504a:	d033      	beq.n	80050b4 <_printf_float+0x26c>
 800504c:	2301      	movs	r3, #1
 800504e:	4631      	mov	r1, r6
 8005050:	4628      	mov	r0, r5
 8005052:	4a35      	ldr	r2, [pc, #212]	; (8005128 <_printf_float+0x2e0>)
 8005054:	47b8      	blx	r7
 8005056:	3001      	adds	r0, #1
 8005058:	f43f af51 	beq.w	8004efe <_printf_float+0xb6>
 800505c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005060:	429a      	cmp	r2, r3
 8005062:	db02      	blt.n	800506a <_printf_float+0x222>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	07d8      	lsls	r0, r3, #31
 8005068:	d50f      	bpl.n	800508a <_printf_float+0x242>
 800506a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800506e:	4631      	mov	r1, r6
 8005070:	4628      	mov	r0, r5
 8005072:	47b8      	blx	r7
 8005074:	3001      	adds	r0, #1
 8005076:	f43f af42 	beq.w	8004efe <_printf_float+0xb6>
 800507a:	f04f 0800 	mov.w	r8, #0
 800507e:	f104 091a 	add.w	r9, r4, #26
 8005082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005084:	3b01      	subs	r3, #1
 8005086:	4543      	cmp	r3, r8
 8005088:	dc09      	bgt.n	800509e <_printf_float+0x256>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	079b      	lsls	r3, r3, #30
 800508e:	f100 8102 	bmi.w	8005296 <_printf_float+0x44e>
 8005092:	68e0      	ldr	r0, [r4, #12]
 8005094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005096:	4298      	cmp	r0, r3
 8005098:	bfb8      	it	lt
 800509a:	4618      	movlt	r0, r3
 800509c:	e731      	b.n	8004f02 <_printf_float+0xba>
 800509e:	2301      	movs	r3, #1
 80050a0:	464a      	mov	r2, r9
 80050a2:	4631      	mov	r1, r6
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b8      	blx	r7
 80050a8:	3001      	adds	r0, #1
 80050aa:	f43f af28 	beq.w	8004efe <_printf_float+0xb6>
 80050ae:	f108 0801 	add.w	r8, r8, #1
 80050b2:	e7e6      	b.n	8005082 <_printf_float+0x23a>
 80050b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	dc38      	bgt.n	800512c <_printf_float+0x2e4>
 80050ba:	2301      	movs	r3, #1
 80050bc:	4631      	mov	r1, r6
 80050be:	4628      	mov	r0, r5
 80050c0:	4a19      	ldr	r2, [pc, #100]	; (8005128 <_printf_float+0x2e0>)
 80050c2:	47b8      	blx	r7
 80050c4:	3001      	adds	r0, #1
 80050c6:	f43f af1a 	beq.w	8004efe <_printf_float+0xb6>
 80050ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050ce:	4313      	orrs	r3, r2
 80050d0:	d102      	bne.n	80050d8 <_printf_float+0x290>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	07d9      	lsls	r1, r3, #31
 80050d6:	d5d8      	bpl.n	800508a <_printf_float+0x242>
 80050d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050dc:	4631      	mov	r1, r6
 80050de:	4628      	mov	r0, r5
 80050e0:	47b8      	blx	r7
 80050e2:	3001      	adds	r0, #1
 80050e4:	f43f af0b 	beq.w	8004efe <_printf_float+0xb6>
 80050e8:	f04f 0900 	mov.w	r9, #0
 80050ec:	f104 0a1a 	add.w	sl, r4, #26
 80050f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050f2:	425b      	negs	r3, r3
 80050f4:	454b      	cmp	r3, r9
 80050f6:	dc01      	bgt.n	80050fc <_printf_float+0x2b4>
 80050f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050fa:	e794      	b.n	8005026 <_printf_float+0x1de>
 80050fc:	2301      	movs	r3, #1
 80050fe:	4652      	mov	r2, sl
 8005100:	4631      	mov	r1, r6
 8005102:	4628      	mov	r0, r5
 8005104:	47b8      	blx	r7
 8005106:	3001      	adds	r0, #1
 8005108:	f43f aef9 	beq.w	8004efe <_printf_float+0xb6>
 800510c:	f109 0901 	add.w	r9, r9, #1
 8005110:	e7ee      	b.n	80050f0 <_printf_float+0x2a8>
 8005112:	bf00      	nop
 8005114:	7fefffff 	.word	0x7fefffff
 8005118:	08007af4 	.word	0x08007af4
 800511c:	08007af8 	.word	0x08007af8
 8005120:	08007b00 	.word	0x08007b00
 8005124:	08007afc 	.word	0x08007afc
 8005128:	08007b04 	.word	0x08007b04
 800512c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800512e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005130:	429a      	cmp	r2, r3
 8005132:	bfa8      	it	ge
 8005134:	461a      	movge	r2, r3
 8005136:	2a00      	cmp	r2, #0
 8005138:	4691      	mov	r9, r2
 800513a:	dc37      	bgt.n	80051ac <_printf_float+0x364>
 800513c:	f04f 0b00 	mov.w	fp, #0
 8005140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005144:	f104 021a 	add.w	r2, r4, #26
 8005148:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800514c:	ebaa 0309 	sub.w	r3, sl, r9
 8005150:	455b      	cmp	r3, fp
 8005152:	dc33      	bgt.n	80051bc <_printf_float+0x374>
 8005154:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005158:	429a      	cmp	r2, r3
 800515a:	db3b      	blt.n	80051d4 <_printf_float+0x38c>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	07da      	lsls	r2, r3, #31
 8005160:	d438      	bmi.n	80051d4 <_printf_float+0x38c>
 8005162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005164:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005166:	eba2 030a 	sub.w	r3, r2, sl
 800516a:	eba2 0901 	sub.w	r9, r2, r1
 800516e:	4599      	cmp	r9, r3
 8005170:	bfa8      	it	ge
 8005172:	4699      	movge	r9, r3
 8005174:	f1b9 0f00 	cmp.w	r9, #0
 8005178:	dc34      	bgt.n	80051e4 <_printf_float+0x39c>
 800517a:	f04f 0800 	mov.w	r8, #0
 800517e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005182:	f104 0a1a 	add.w	sl, r4, #26
 8005186:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	eba3 0309 	sub.w	r3, r3, r9
 8005190:	4543      	cmp	r3, r8
 8005192:	f77f af7a 	ble.w	800508a <_printf_float+0x242>
 8005196:	2301      	movs	r3, #1
 8005198:	4652      	mov	r2, sl
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	47b8      	blx	r7
 80051a0:	3001      	adds	r0, #1
 80051a2:	f43f aeac 	beq.w	8004efe <_printf_float+0xb6>
 80051a6:	f108 0801 	add.w	r8, r8, #1
 80051aa:	e7ec      	b.n	8005186 <_printf_float+0x33e>
 80051ac:	4613      	mov	r3, r2
 80051ae:	4631      	mov	r1, r6
 80051b0:	4642      	mov	r2, r8
 80051b2:	4628      	mov	r0, r5
 80051b4:	47b8      	blx	r7
 80051b6:	3001      	adds	r0, #1
 80051b8:	d1c0      	bne.n	800513c <_printf_float+0x2f4>
 80051ba:	e6a0      	b.n	8004efe <_printf_float+0xb6>
 80051bc:	2301      	movs	r3, #1
 80051be:	4631      	mov	r1, r6
 80051c0:	4628      	mov	r0, r5
 80051c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f ae99 	beq.w	8004efe <_printf_float+0xb6>
 80051cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051ce:	f10b 0b01 	add.w	fp, fp, #1
 80051d2:	e7b9      	b.n	8005148 <_printf_float+0x300>
 80051d4:	4631      	mov	r1, r6
 80051d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051da:	4628      	mov	r0, r5
 80051dc:	47b8      	blx	r7
 80051de:	3001      	adds	r0, #1
 80051e0:	d1bf      	bne.n	8005162 <_printf_float+0x31a>
 80051e2:	e68c      	b.n	8004efe <_printf_float+0xb6>
 80051e4:	464b      	mov	r3, r9
 80051e6:	4631      	mov	r1, r6
 80051e8:	4628      	mov	r0, r5
 80051ea:	eb08 020a 	add.w	r2, r8, sl
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	d1c2      	bne.n	800517a <_printf_float+0x332>
 80051f4:	e683      	b.n	8004efe <_printf_float+0xb6>
 80051f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051f8:	2a01      	cmp	r2, #1
 80051fa:	dc01      	bgt.n	8005200 <_printf_float+0x3b8>
 80051fc:	07db      	lsls	r3, r3, #31
 80051fe:	d537      	bpl.n	8005270 <_printf_float+0x428>
 8005200:	2301      	movs	r3, #1
 8005202:	4642      	mov	r2, r8
 8005204:	4631      	mov	r1, r6
 8005206:	4628      	mov	r0, r5
 8005208:	47b8      	blx	r7
 800520a:	3001      	adds	r0, #1
 800520c:	f43f ae77 	beq.w	8004efe <_printf_float+0xb6>
 8005210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005214:	4631      	mov	r1, r6
 8005216:	4628      	mov	r0, r5
 8005218:	47b8      	blx	r7
 800521a:	3001      	adds	r0, #1
 800521c:	f43f ae6f 	beq.w	8004efe <_printf_float+0xb6>
 8005220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005224:	2200      	movs	r2, #0
 8005226:	2300      	movs	r3, #0
 8005228:	f7fb fbbe 	bl	80009a8 <__aeabi_dcmpeq>
 800522c:	b9d8      	cbnz	r0, 8005266 <_printf_float+0x41e>
 800522e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005230:	f108 0201 	add.w	r2, r8, #1
 8005234:	3b01      	subs	r3, #1
 8005236:	4631      	mov	r1, r6
 8005238:	4628      	mov	r0, r5
 800523a:	47b8      	blx	r7
 800523c:	3001      	adds	r0, #1
 800523e:	d10e      	bne.n	800525e <_printf_float+0x416>
 8005240:	e65d      	b.n	8004efe <_printf_float+0xb6>
 8005242:	2301      	movs	r3, #1
 8005244:	464a      	mov	r2, r9
 8005246:	4631      	mov	r1, r6
 8005248:	4628      	mov	r0, r5
 800524a:	47b8      	blx	r7
 800524c:	3001      	adds	r0, #1
 800524e:	f43f ae56 	beq.w	8004efe <_printf_float+0xb6>
 8005252:	f108 0801 	add.w	r8, r8, #1
 8005256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005258:	3b01      	subs	r3, #1
 800525a:	4543      	cmp	r3, r8
 800525c:	dcf1      	bgt.n	8005242 <_printf_float+0x3fa>
 800525e:	4653      	mov	r3, sl
 8005260:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005264:	e6e0      	b.n	8005028 <_printf_float+0x1e0>
 8005266:	f04f 0800 	mov.w	r8, #0
 800526a:	f104 091a 	add.w	r9, r4, #26
 800526e:	e7f2      	b.n	8005256 <_printf_float+0x40e>
 8005270:	2301      	movs	r3, #1
 8005272:	4642      	mov	r2, r8
 8005274:	e7df      	b.n	8005236 <_printf_float+0x3ee>
 8005276:	2301      	movs	r3, #1
 8005278:	464a      	mov	r2, r9
 800527a:	4631      	mov	r1, r6
 800527c:	4628      	mov	r0, r5
 800527e:	47b8      	blx	r7
 8005280:	3001      	adds	r0, #1
 8005282:	f43f ae3c 	beq.w	8004efe <_printf_float+0xb6>
 8005286:	f108 0801 	add.w	r8, r8, #1
 800528a:	68e3      	ldr	r3, [r4, #12]
 800528c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800528e:	1a5b      	subs	r3, r3, r1
 8005290:	4543      	cmp	r3, r8
 8005292:	dcf0      	bgt.n	8005276 <_printf_float+0x42e>
 8005294:	e6fd      	b.n	8005092 <_printf_float+0x24a>
 8005296:	f04f 0800 	mov.w	r8, #0
 800529a:	f104 0919 	add.w	r9, r4, #25
 800529e:	e7f4      	b.n	800528a <_printf_float+0x442>

080052a0 <_printf_common>:
 80052a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a4:	4616      	mov	r6, r2
 80052a6:	4699      	mov	r9, r3
 80052a8:	688a      	ldr	r2, [r1, #8]
 80052aa:	690b      	ldr	r3, [r1, #16]
 80052ac:	4607      	mov	r7, r0
 80052ae:	4293      	cmp	r3, r2
 80052b0:	bfb8      	it	lt
 80052b2:	4613      	movlt	r3, r2
 80052b4:	6033      	str	r3, [r6, #0]
 80052b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052ba:	460c      	mov	r4, r1
 80052bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052c0:	b10a      	cbz	r2, 80052c6 <_printf_common+0x26>
 80052c2:	3301      	adds	r3, #1
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	0699      	lsls	r1, r3, #26
 80052ca:	bf42      	ittt	mi
 80052cc:	6833      	ldrmi	r3, [r6, #0]
 80052ce:	3302      	addmi	r3, #2
 80052d0:	6033      	strmi	r3, [r6, #0]
 80052d2:	6825      	ldr	r5, [r4, #0]
 80052d4:	f015 0506 	ands.w	r5, r5, #6
 80052d8:	d106      	bne.n	80052e8 <_printf_common+0x48>
 80052da:	f104 0a19 	add.w	sl, r4, #25
 80052de:	68e3      	ldr	r3, [r4, #12]
 80052e0:	6832      	ldr	r2, [r6, #0]
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	42ab      	cmp	r3, r5
 80052e6:	dc28      	bgt.n	800533a <_printf_common+0x9a>
 80052e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052ec:	1e13      	subs	r3, r2, #0
 80052ee:	6822      	ldr	r2, [r4, #0]
 80052f0:	bf18      	it	ne
 80052f2:	2301      	movne	r3, #1
 80052f4:	0692      	lsls	r2, r2, #26
 80052f6:	d42d      	bmi.n	8005354 <_printf_common+0xb4>
 80052f8:	4649      	mov	r1, r9
 80052fa:	4638      	mov	r0, r7
 80052fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005300:	47c0      	blx	r8
 8005302:	3001      	adds	r0, #1
 8005304:	d020      	beq.n	8005348 <_printf_common+0xa8>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	68e5      	ldr	r5, [r4, #12]
 800530a:	f003 0306 	and.w	r3, r3, #6
 800530e:	2b04      	cmp	r3, #4
 8005310:	bf18      	it	ne
 8005312:	2500      	movne	r5, #0
 8005314:	6832      	ldr	r2, [r6, #0]
 8005316:	f04f 0600 	mov.w	r6, #0
 800531a:	68a3      	ldr	r3, [r4, #8]
 800531c:	bf08      	it	eq
 800531e:	1aad      	subeq	r5, r5, r2
 8005320:	6922      	ldr	r2, [r4, #16]
 8005322:	bf08      	it	eq
 8005324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005328:	4293      	cmp	r3, r2
 800532a:	bfc4      	itt	gt
 800532c:	1a9b      	subgt	r3, r3, r2
 800532e:	18ed      	addgt	r5, r5, r3
 8005330:	341a      	adds	r4, #26
 8005332:	42b5      	cmp	r5, r6
 8005334:	d11a      	bne.n	800536c <_printf_common+0xcc>
 8005336:	2000      	movs	r0, #0
 8005338:	e008      	b.n	800534c <_printf_common+0xac>
 800533a:	2301      	movs	r3, #1
 800533c:	4652      	mov	r2, sl
 800533e:	4649      	mov	r1, r9
 8005340:	4638      	mov	r0, r7
 8005342:	47c0      	blx	r8
 8005344:	3001      	adds	r0, #1
 8005346:	d103      	bne.n	8005350 <_printf_common+0xb0>
 8005348:	f04f 30ff 	mov.w	r0, #4294967295
 800534c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005350:	3501      	adds	r5, #1
 8005352:	e7c4      	b.n	80052de <_printf_common+0x3e>
 8005354:	2030      	movs	r0, #48	; 0x30
 8005356:	18e1      	adds	r1, r4, r3
 8005358:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005362:	4422      	add	r2, r4
 8005364:	3302      	adds	r3, #2
 8005366:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800536a:	e7c5      	b.n	80052f8 <_printf_common+0x58>
 800536c:	2301      	movs	r3, #1
 800536e:	4622      	mov	r2, r4
 8005370:	4649      	mov	r1, r9
 8005372:	4638      	mov	r0, r7
 8005374:	47c0      	blx	r8
 8005376:	3001      	adds	r0, #1
 8005378:	d0e6      	beq.n	8005348 <_printf_common+0xa8>
 800537a:	3601      	adds	r6, #1
 800537c:	e7d9      	b.n	8005332 <_printf_common+0x92>
	...

08005380 <_printf_i>:
 8005380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005384:	460c      	mov	r4, r1
 8005386:	7e27      	ldrb	r7, [r4, #24]
 8005388:	4691      	mov	r9, r2
 800538a:	2f78      	cmp	r7, #120	; 0x78
 800538c:	4680      	mov	r8, r0
 800538e:	469a      	mov	sl, r3
 8005390:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005396:	d807      	bhi.n	80053a8 <_printf_i+0x28>
 8005398:	2f62      	cmp	r7, #98	; 0x62
 800539a:	d80a      	bhi.n	80053b2 <_printf_i+0x32>
 800539c:	2f00      	cmp	r7, #0
 800539e:	f000 80d9 	beq.w	8005554 <_printf_i+0x1d4>
 80053a2:	2f58      	cmp	r7, #88	; 0x58
 80053a4:	f000 80a4 	beq.w	80054f0 <_printf_i+0x170>
 80053a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053b0:	e03a      	b.n	8005428 <_printf_i+0xa8>
 80053b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053b6:	2b15      	cmp	r3, #21
 80053b8:	d8f6      	bhi.n	80053a8 <_printf_i+0x28>
 80053ba:	a001      	add	r0, pc, #4	; (adr r0, 80053c0 <_printf_i+0x40>)
 80053bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053c0:	08005419 	.word	0x08005419
 80053c4:	0800542d 	.word	0x0800542d
 80053c8:	080053a9 	.word	0x080053a9
 80053cc:	080053a9 	.word	0x080053a9
 80053d0:	080053a9 	.word	0x080053a9
 80053d4:	080053a9 	.word	0x080053a9
 80053d8:	0800542d 	.word	0x0800542d
 80053dc:	080053a9 	.word	0x080053a9
 80053e0:	080053a9 	.word	0x080053a9
 80053e4:	080053a9 	.word	0x080053a9
 80053e8:	080053a9 	.word	0x080053a9
 80053ec:	0800553b 	.word	0x0800553b
 80053f0:	0800545d 	.word	0x0800545d
 80053f4:	0800551d 	.word	0x0800551d
 80053f8:	080053a9 	.word	0x080053a9
 80053fc:	080053a9 	.word	0x080053a9
 8005400:	0800555d 	.word	0x0800555d
 8005404:	080053a9 	.word	0x080053a9
 8005408:	0800545d 	.word	0x0800545d
 800540c:	080053a9 	.word	0x080053a9
 8005410:	080053a9 	.word	0x080053a9
 8005414:	08005525 	.word	0x08005525
 8005418:	680b      	ldr	r3, [r1, #0]
 800541a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800541e:	1d1a      	adds	r2, r3, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	600a      	str	r2, [r1, #0]
 8005424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005428:	2301      	movs	r3, #1
 800542a:	e0a4      	b.n	8005576 <_printf_i+0x1f6>
 800542c:	6825      	ldr	r5, [r4, #0]
 800542e:	6808      	ldr	r0, [r1, #0]
 8005430:	062e      	lsls	r6, r5, #24
 8005432:	f100 0304 	add.w	r3, r0, #4
 8005436:	d50a      	bpl.n	800544e <_printf_i+0xce>
 8005438:	6805      	ldr	r5, [r0, #0]
 800543a:	600b      	str	r3, [r1, #0]
 800543c:	2d00      	cmp	r5, #0
 800543e:	da03      	bge.n	8005448 <_printf_i+0xc8>
 8005440:	232d      	movs	r3, #45	; 0x2d
 8005442:	426d      	negs	r5, r5
 8005444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005448:	230a      	movs	r3, #10
 800544a:	485e      	ldr	r0, [pc, #376]	; (80055c4 <_printf_i+0x244>)
 800544c:	e019      	b.n	8005482 <_printf_i+0x102>
 800544e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005452:	6805      	ldr	r5, [r0, #0]
 8005454:	600b      	str	r3, [r1, #0]
 8005456:	bf18      	it	ne
 8005458:	b22d      	sxthne	r5, r5
 800545a:	e7ef      	b.n	800543c <_printf_i+0xbc>
 800545c:	680b      	ldr	r3, [r1, #0]
 800545e:	6825      	ldr	r5, [r4, #0]
 8005460:	1d18      	adds	r0, r3, #4
 8005462:	6008      	str	r0, [r1, #0]
 8005464:	0628      	lsls	r0, r5, #24
 8005466:	d501      	bpl.n	800546c <_printf_i+0xec>
 8005468:	681d      	ldr	r5, [r3, #0]
 800546a:	e002      	b.n	8005472 <_printf_i+0xf2>
 800546c:	0669      	lsls	r1, r5, #25
 800546e:	d5fb      	bpl.n	8005468 <_printf_i+0xe8>
 8005470:	881d      	ldrh	r5, [r3, #0]
 8005472:	2f6f      	cmp	r7, #111	; 0x6f
 8005474:	bf0c      	ite	eq
 8005476:	2308      	moveq	r3, #8
 8005478:	230a      	movne	r3, #10
 800547a:	4852      	ldr	r0, [pc, #328]	; (80055c4 <_printf_i+0x244>)
 800547c:	2100      	movs	r1, #0
 800547e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005482:	6866      	ldr	r6, [r4, #4]
 8005484:	2e00      	cmp	r6, #0
 8005486:	bfa8      	it	ge
 8005488:	6821      	ldrge	r1, [r4, #0]
 800548a:	60a6      	str	r6, [r4, #8]
 800548c:	bfa4      	itt	ge
 800548e:	f021 0104 	bicge.w	r1, r1, #4
 8005492:	6021      	strge	r1, [r4, #0]
 8005494:	b90d      	cbnz	r5, 800549a <_printf_i+0x11a>
 8005496:	2e00      	cmp	r6, #0
 8005498:	d04d      	beq.n	8005536 <_printf_i+0x1b6>
 800549a:	4616      	mov	r6, r2
 800549c:	fbb5 f1f3 	udiv	r1, r5, r3
 80054a0:	fb03 5711 	mls	r7, r3, r1, r5
 80054a4:	5dc7      	ldrb	r7, [r0, r7]
 80054a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054aa:	462f      	mov	r7, r5
 80054ac:	42bb      	cmp	r3, r7
 80054ae:	460d      	mov	r5, r1
 80054b0:	d9f4      	bls.n	800549c <_printf_i+0x11c>
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d10b      	bne.n	80054ce <_printf_i+0x14e>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	07df      	lsls	r7, r3, #31
 80054ba:	d508      	bpl.n	80054ce <_printf_i+0x14e>
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	6861      	ldr	r1, [r4, #4]
 80054c0:	4299      	cmp	r1, r3
 80054c2:	bfde      	ittt	le
 80054c4:	2330      	movle	r3, #48	; 0x30
 80054c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054ce:	1b92      	subs	r2, r2, r6
 80054d0:	6122      	str	r2, [r4, #16]
 80054d2:	464b      	mov	r3, r9
 80054d4:	4621      	mov	r1, r4
 80054d6:	4640      	mov	r0, r8
 80054d8:	f8cd a000 	str.w	sl, [sp]
 80054dc:	aa03      	add	r2, sp, #12
 80054de:	f7ff fedf 	bl	80052a0 <_printf_common>
 80054e2:	3001      	adds	r0, #1
 80054e4:	d14c      	bne.n	8005580 <_printf_i+0x200>
 80054e6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ea:	b004      	add	sp, #16
 80054ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f0:	4834      	ldr	r0, [pc, #208]	; (80055c4 <_printf_i+0x244>)
 80054f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054f6:	680e      	ldr	r6, [r1, #0]
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80054fe:	061f      	lsls	r7, r3, #24
 8005500:	600e      	str	r6, [r1, #0]
 8005502:	d514      	bpl.n	800552e <_printf_i+0x1ae>
 8005504:	07d9      	lsls	r1, r3, #31
 8005506:	bf44      	itt	mi
 8005508:	f043 0320 	orrmi.w	r3, r3, #32
 800550c:	6023      	strmi	r3, [r4, #0]
 800550e:	b91d      	cbnz	r5, 8005518 <_printf_i+0x198>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	f023 0320 	bic.w	r3, r3, #32
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	2310      	movs	r3, #16
 800551a:	e7af      	b.n	800547c <_printf_i+0xfc>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	f043 0320 	orr.w	r3, r3, #32
 8005522:	6023      	str	r3, [r4, #0]
 8005524:	2378      	movs	r3, #120	; 0x78
 8005526:	4828      	ldr	r0, [pc, #160]	; (80055c8 <_printf_i+0x248>)
 8005528:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800552c:	e7e3      	b.n	80054f6 <_printf_i+0x176>
 800552e:	065e      	lsls	r6, r3, #25
 8005530:	bf48      	it	mi
 8005532:	b2ad      	uxthmi	r5, r5
 8005534:	e7e6      	b.n	8005504 <_printf_i+0x184>
 8005536:	4616      	mov	r6, r2
 8005538:	e7bb      	b.n	80054b2 <_printf_i+0x132>
 800553a:	680b      	ldr	r3, [r1, #0]
 800553c:	6826      	ldr	r6, [r4, #0]
 800553e:	1d1d      	adds	r5, r3, #4
 8005540:	6960      	ldr	r0, [r4, #20]
 8005542:	600d      	str	r5, [r1, #0]
 8005544:	0635      	lsls	r5, r6, #24
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	d501      	bpl.n	800554e <_printf_i+0x1ce>
 800554a:	6018      	str	r0, [r3, #0]
 800554c:	e002      	b.n	8005554 <_printf_i+0x1d4>
 800554e:	0671      	lsls	r1, r6, #25
 8005550:	d5fb      	bpl.n	800554a <_printf_i+0x1ca>
 8005552:	8018      	strh	r0, [r3, #0]
 8005554:	2300      	movs	r3, #0
 8005556:	4616      	mov	r6, r2
 8005558:	6123      	str	r3, [r4, #16]
 800555a:	e7ba      	b.n	80054d2 <_printf_i+0x152>
 800555c:	680b      	ldr	r3, [r1, #0]
 800555e:	1d1a      	adds	r2, r3, #4
 8005560:	600a      	str	r2, [r1, #0]
 8005562:	681e      	ldr	r6, [r3, #0]
 8005564:	2100      	movs	r1, #0
 8005566:	4630      	mov	r0, r6
 8005568:	6862      	ldr	r2, [r4, #4]
 800556a:	f000 fed7 	bl	800631c <memchr>
 800556e:	b108      	cbz	r0, 8005574 <_printf_i+0x1f4>
 8005570:	1b80      	subs	r0, r0, r6
 8005572:	6060      	str	r0, [r4, #4]
 8005574:	6863      	ldr	r3, [r4, #4]
 8005576:	6123      	str	r3, [r4, #16]
 8005578:	2300      	movs	r3, #0
 800557a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800557e:	e7a8      	b.n	80054d2 <_printf_i+0x152>
 8005580:	4632      	mov	r2, r6
 8005582:	4649      	mov	r1, r9
 8005584:	4640      	mov	r0, r8
 8005586:	6923      	ldr	r3, [r4, #16]
 8005588:	47d0      	blx	sl
 800558a:	3001      	adds	r0, #1
 800558c:	d0ab      	beq.n	80054e6 <_printf_i+0x166>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	079b      	lsls	r3, r3, #30
 8005592:	d413      	bmi.n	80055bc <_printf_i+0x23c>
 8005594:	68e0      	ldr	r0, [r4, #12]
 8005596:	9b03      	ldr	r3, [sp, #12]
 8005598:	4298      	cmp	r0, r3
 800559a:	bfb8      	it	lt
 800559c:	4618      	movlt	r0, r3
 800559e:	e7a4      	b.n	80054ea <_printf_i+0x16a>
 80055a0:	2301      	movs	r3, #1
 80055a2:	4632      	mov	r2, r6
 80055a4:	4649      	mov	r1, r9
 80055a6:	4640      	mov	r0, r8
 80055a8:	47d0      	blx	sl
 80055aa:	3001      	adds	r0, #1
 80055ac:	d09b      	beq.n	80054e6 <_printf_i+0x166>
 80055ae:	3501      	adds	r5, #1
 80055b0:	68e3      	ldr	r3, [r4, #12]
 80055b2:	9903      	ldr	r1, [sp, #12]
 80055b4:	1a5b      	subs	r3, r3, r1
 80055b6:	42ab      	cmp	r3, r5
 80055b8:	dcf2      	bgt.n	80055a0 <_printf_i+0x220>
 80055ba:	e7eb      	b.n	8005594 <_printf_i+0x214>
 80055bc:	2500      	movs	r5, #0
 80055be:	f104 0619 	add.w	r6, r4, #25
 80055c2:	e7f5      	b.n	80055b0 <_printf_i+0x230>
 80055c4:	08007b06 	.word	0x08007b06
 80055c8:	08007b17 	.word	0x08007b17

080055cc <siprintf>:
 80055cc:	b40e      	push	{r1, r2, r3}
 80055ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055d2:	b500      	push	{lr}
 80055d4:	b09c      	sub	sp, #112	; 0x70
 80055d6:	ab1d      	add	r3, sp, #116	; 0x74
 80055d8:	9002      	str	r0, [sp, #8]
 80055da:	9006      	str	r0, [sp, #24]
 80055dc:	9107      	str	r1, [sp, #28]
 80055de:	9104      	str	r1, [sp, #16]
 80055e0:	4808      	ldr	r0, [pc, #32]	; (8005604 <siprintf+0x38>)
 80055e2:	4909      	ldr	r1, [pc, #36]	; (8005608 <siprintf+0x3c>)
 80055e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055e8:	9105      	str	r1, [sp, #20]
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	a902      	add	r1, sp, #8
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	f001 fb42 	bl	8006c78 <_svfiprintf_r>
 80055f4:	2200      	movs	r2, #0
 80055f6:	9b02      	ldr	r3, [sp, #8]
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	b01c      	add	sp, #112	; 0x70
 80055fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005600:	b003      	add	sp, #12
 8005602:	4770      	bx	lr
 8005604:	2000000c 	.word	0x2000000c
 8005608:	ffff0208 	.word	0xffff0208

0800560c <quorem>:
 800560c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005610:	6903      	ldr	r3, [r0, #16]
 8005612:	690c      	ldr	r4, [r1, #16]
 8005614:	4607      	mov	r7, r0
 8005616:	42a3      	cmp	r3, r4
 8005618:	f2c0 8083 	blt.w	8005722 <quorem+0x116>
 800561c:	3c01      	subs	r4, #1
 800561e:	f100 0514 	add.w	r5, r0, #20
 8005622:	f101 0814 	add.w	r8, r1, #20
 8005626:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800562a:	9301      	str	r3, [sp, #4]
 800562c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005630:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005634:	3301      	adds	r3, #1
 8005636:	429a      	cmp	r2, r3
 8005638:	fbb2 f6f3 	udiv	r6, r2, r3
 800563c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005640:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005644:	d332      	bcc.n	80056ac <quorem+0xa0>
 8005646:	f04f 0e00 	mov.w	lr, #0
 800564a:	4640      	mov	r0, r8
 800564c:	46ac      	mov	ip, r5
 800564e:	46f2      	mov	sl, lr
 8005650:	f850 2b04 	ldr.w	r2, [r0], #4
 8005654:	b293      	uxth	r3, r2
 8005656:	fb06 e303 	mla	r3, r6, r3, lr
 800565a:	0c12      	lsrs	r2, r2, #16
 800565c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005660:	fb06 e202 	mla	r2, r6, r2, lr
 8005664:	b29b      	uxth	r3, r3
 8005666:	ebaa 0303 	sub.w	r3, sl, r3
 800566a:	f8dc a000 	ldr.w	sl, [ip]
 800566e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005672:	fa1f fa8a 	uxth.w	sl, sl
 8005676:	4453      	add	r3, sl
 8005678:	fa1f fa82 	uxth.w	sl, r2
 800567c:	f8dc 2000 	ldr.w	r2, [ip]
 8005680:	4581      	cmp	r9, r0
 8005682:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005686:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800568a:	b29b      	uxth	r3, r3
 800568c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005690:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005694:	f84c 3b04 	str.w	r3, [ip], #4
 8005698:	d2da      	bcs.n	8005650 <quorem+0x44>
 800569a:	f855 300b 	ldr.w	r3, [r5, fp]
 800569e:	b92b      	cbnz	r3, 80056ac <quorem+0xa0>
 80056a0:	9b01      	ldr	r3, [sp, #4]
 80056a2:	3b04      	subs	r3, #4
 80056a4:	429d      	cmp	r5, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	d32f      	bcc.n	800570a <quorem+0xfe>
 80056aa:	613c      	str	r4, [r7, #16]
 80056ac:	4638      	mov	r0, r7
 80056ae:	f001 f8cb 	bl	8006848 <__mcmp>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	db25      	blt.n	8005702 <quorem+0xf6>
 80056b6:	4628      	mov	r0, r5
 80056b8:	f04f 0c00 	mov.w	ip, #0
 80056bc:	3601      	adds	r6, #1
 80056be:	f858 1b04 	ldr.w	r1, [r8], #4
 80056c2:	f8d0 e000 	ldr.w	lr, [r0]
 80056c6:	b28b      	uxth	r3, r1
 80056c8:	ebac 0303 	sub.w	r3, ip, r3
 80056cc:	fa1f f28e 	uxth.w	r2, lr
 80056d0:	4413      	add	r3, r2
 80056d2:	0c0a      	lsrs	r2, r1, #16
 80056d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056dc:	b29b      	uxth	r3, r3
 80056de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056e2:	45c1      	cmp	r9, r8
 80056e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056e8:	f840 3b04 	str.w	r3, [r0], #4
 80056ec:	d2e7      	bcs.n	80056be <quorem+0xb2>
 80056ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056f6:	b922      	cbnz	r2, 8005702 <quorem+0xf6>
 80056f8:	3b04      	subs	r3, #4
 80056fa:	429d      	cmp	r5, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	d30a      	bcc.n	8005716 <quorem+0x10a>
 8005700:	613c      	str	r4, [r7, #16]
 8005702:	4630      	mov	r0, r6
 8005704:	b003      	add	sp, #12
 8005706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	3b04      	subs	r3, #4
 800570e:	2a00      	cmp	r2, #0
 8005710:	d1cb      	bne.n	80056aa <quorem+0x9e>
 8005712:	3c01      	subs	r4, #1
 8005714:	e7c6      	b.n	80056a4 <quorem+0x98>
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	3b04      	subs	r3, #4
 800571a:	2a00      	cmp	r2, #0
 800571c:	d1f0      	bne.n	8005700 <quorem+0xf4>
 800571e:	3c01      	subs	r4, #1
 8005720:	e7eb      	b.n	80056fa <quorem+0xee>
 8005722:	2000      	movs	r0, #0
 8005724:	e7ee      	b.n	8005704 <quorem+0xf8>
	...

08005728 <_dtoa_r>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	4616      	mov	r6, r2
 800572e:	461f      	mov	r7, r3
 8005730:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005732:	b099      	sub	sp, #100	; 0x64
 8005734:	4605      	mov	r5, r0
 8005736:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800573a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800573e:	b974      	cbnz	r4, 800575e <_dtoa_r+0x36>
 8005740:	2010      	movs	r0, #16
 8005742:	f000 fde3 	bl	800630c <malloc>
 8005746:	4602      	mov	r2, r0
 8005748:	6268      	str	r0, [r5, #36]	; 0x24
 800574a:	b920      	cbnz	r0, 8005756 <_dtoa_r+0x2e>
 800574c:	21ea      	movs	r1, #234	; 0xea
 800574e:	4bae      	ldr	r3, [pc, #696]	; (8005a08 <_dtoa_r+0x2e0>)
 8005750:	48ae      	ldr	r0, [pc, #696]	; (8005a0c <_dtoa_r+0x2e4>)
 8005752:	f001 fba1 	bl	8006e98 <__assert_func>
 8005756:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800575a:	6004      	str	r4, [r0, #0]
 800575c:	60c4      	str	r4, [r0, #12]
 800575e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	b151      	cbz	r1, 800577a <_dtoa_r+0x52>
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	2301      	movs	r3, #1
 8005768:	4093      	lsls	r3, r2
 800576a:	604a      	str	r2, [r1, #4]
 800576c:	608b      	str	r3, [r1, #8]
 800576e:	4628      	mov	r0, r5
 8005770:	f000 fe30 	bl	80063d4 <_Bfree>
 8005774:	2200      	movs	r2, #0
 8005776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	1e3b      	subs	r3, r7, #0
 800577c:	bfaf      	iteee	ge
 800577e:	2300      	movge	r3, #0
 8005780:	2201      	movlt	r2, #1
 8005782:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005786:	9305      	strlt	r3, [sp, #20]
 8005788:	bfa8      	it	ge
 800578a:	f8c8 3000 	strge.w	r3, [r8]
 800578e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005792:	4b9f      	ldr	r3, [pc, #636]	; (8005a10 <_dtoa_r+0x2e8>)
 8005794:	bfb8      	it	lt
 8005796:	f8c8 2000 	strlt.w	r2, [r8]
 800579a:	ea33 0309 	bics.w	r3, r3, r9
 800579e:	d119      	bne.n	80057d4 <_dtoa_r+0xac>
 80057a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80057a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057ac:	4333      	orrs	r3, r6
 80057ae:	f000 8580 	beq.w	80062b2 <_dtoa_r+0xb8a>
 80057b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057b4:	b953      	cbnz	r3, 80057cc <_dtoa_r+0xa4>
 80057b6:	4b97      	ldr	r3, [pc, #604]	; (8005a14 <_dtoa_r+0x2ec>)
 80057b8:	e022      	b.n	8005800 <_dtoa_r+0xd8>
 80057ba:	4b97      	ldr	r3, [pc, #604]	; (8005a18 <_dtoa_r+0x2f0>)
 80057bc:	9308      	str	r3, [sp, #32]
 80057be:	3308      	adds	r3, #8
 80057c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	9808      	ldr	r0, [sp, #32]
 80057c6:	b019      	add	sp, #100	; 0x64
 80057c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057cc:	4b91      	ldr	r3, [pc, #580]	; (8005a14 <_dtoa_r+0x2ec>)
 80057ce:	9308      	str	r3, [sp, #32]
 80057d0:	3303      	adds	r3, #3
 80057d2:	e7f5      	b.n	80057c0 <_dtoa_r+0x98>
 80057d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80057d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80057dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057e0:	2200      	movs	r2, #0
 80057e2:	2300      	movs	r3, #0
 80057e4:	f7fb f8e0 	bl	80009a8 <__aeabi_dcmpeq>
 80057e8:	4680      	mov	r8, r0
 80057ea:	b158      	cbz	r0, 8005804 <_dtoa_r+0xdc>
 80057ec:	2301      	movs	r3, #1
 80057ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8559 	beq.w	80062ac <_dtoa_r+0xb84>
 80057fa:	4888      	ldr	r0, [pc, #544]	; (8005a1c <_dtoa_r+0x2f4>)
 80057fc:	6018      	str	r0, [r3, #0]
 80057fe:	1e43      	subs	r3, r0, #1
 8005800:	9308      	str	r3, [sp, #32]
 8005802:	e7df      	b.n	80057c4 <_dtoa_r+0x9c>
 8005804:	ab16      	add	r3, sp, #88	; 0x58
 8005806:	9301      	str	r3, [sp, #4]
 8005808:	ab17      	add	r3, sp, #92	; 0x5c
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	4628      	mov	r0, r5
 800580e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005812:	f001 f8c5 	bl	80069a0 <__d2b>
 8005816:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800581a:	4682      	mov	sl, r0
 800581c:	2c00      	cmp	r4, #0
 800581e:	d07e      	beq.n	800591e <_dtoa_r+0x1f6>
 8005820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005826:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800582a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800582e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005832:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005836:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800583a:	2200      	movs	r2, #0
 800583c:	4b78      	ldr	r3, [pc, #480]	; (8005a20 <_dtoa_r+0x2f8>)
 800583e:	f7fa fc93 	bl	8000168 <__aeabi_dsub>
 8005842:	a36b      	add	r3, pc, #428	; (adr r3, 80059f0 <_dtoa_r+0x2c8>)
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f7fa fe46 	bl	80004d8 <__aeabi_dmul>
 800584c:	a36a      	add	r3, pc, #424	; (adr r3, 80059f8 <_dtoa_r+0x2d0>)
 800584e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005852:	f7fa fc8b 	bl	800016c <__adddf3>
 8005856:	4606      	mov	r6, r0
 8005858:	4620      	mov	r0, r4
 800585a:	460f      	mov	r7, r1
 800585c:	f7fa fdd2 	bl	8000404 <__aeabi_i2d>
 8005860:	a367      	add	r3, pc, #412	; (adr r3, 8005a00 <_dtoa_r+0x2d8>)
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f7fa fe37 	bl	80004d8 <__aeabi_dmul>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4630      	mov	r0, r6
 8005870:	4639      	mov	r1, r7
 8005872:	f7fa fc7b 	bl	800016c <__adddf3>
 8005876:	4606      	mov	r6, r0
 8005878:	460f      	mov	r7, r1
 800587a:	f7fb f8dd 	bl	8000a38 <__aeabi_d2iz>
 800587e:	2200      	movs	r2, #0
 8005880:	4681      	mov	r9, r0
 8005882:	2300      	movs	r3, #0
 8005884:	4630      	mov	r0, r6
 8005886:	4639      	mov	r1, r7
 8005888:	f7fb f898 	bl	80009bc <__aeabi_dcmplt>
 800588c:	b148      	cbz	r0, 80058a2 <_dtoa_r+0x17a>
 800588e:	4648      	mov	r0, r9
 8005890:	f7fa fdb8 	bl	8000404 <__aeabi_i2d>
 8005894:	4632      	mov	r2, r6
 8005896:	463b      	mov	r3, r7
 8005898:	f7fb f886 	bl	80009a8 <__aeabi_dcmpeq>
 800589c:	b908      	cbnz	r0, 80058a2 <_dtoa_r+0x17a>
 800589e:	f109 39ff 	add.w	r9, r9, #4294967295
 80058a2:	f1b9 0f16 	cmp.w	r9, #22
 80058a6:	d857      	bhi.n	8005958 <_dtoa_r+0x230>
 80058a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058ac:	4b5d      	ldr	r3, [pc, #372]	; (8005a24 <_dtoa_r+0x2fc>)
 80058ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	f7fb f881 	bl	80009bc <__aeabi_dcmplt>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d04e      	beq.n	800595c <_dtoa_r+0x234>
 80058be:	2300      	movs	r3, #0
 80058c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80058c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80058c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80058c8:	1b1c      	subs	r4, r3, r4
 80058ca:	1e63      	subs	r3, r4, #1
 80058cc:	9309      	str	r3, [sp, #36]	; 0x24
 80058ce:	bf49      	itett	mi
 80058d0:	f1c4 0301 	rsbmi	r3, r4, #1
 80058d4:	2300      	movpl	r3, #0
 80058d6:	9306      	strmi	r3, [sp, #24]
 80058d8:	2300      	movmi	r3, #0
 80058da:	bf54      	ite	pl
 80058dc:	9306      	strpl	r3, [sp, #24]
 80058de:	9309      	strmi	r3, [sp, #36]	; 0x24
 80058e0:	f1b9 0f00 	cmp.w	r9, #0
 80058e4:	db3c      	blt.n	8005960 <_dtoa_r+0x238>
 80058e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80058ec:	444b      	add	r3, r9
 80058ee:	9309      	str	r3, [sp, #36]	; 0x24
 80058f0:	2300      	movs	r3, #0
 80058f2:	930a      	str	r3, [sp, #40]	; 0x28
 80058f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058f6:	2b09      	cmp	r3, #9
 80058f8:	d86c      	bhi.n	80059d4 <_dtoa_r+0x2ac>
 80058fa:	2b05      	cmp	r3, #5
 80058fc:	bfc4      	itt	gt
 80058fe:	3b04      	subgt	r3, #4
 8005900:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005904:	bfc8      	it	gt
 8005906:	2400      	movgt	r4, #0
 8005908:	f1a3 0302 	sub.w	r3, r3, #2
 800590c:	bfd8      	it	le
 800590e:	2401      	movle	r4, #1
 8005910:	2b03      	cmp	r3, #3
 8005912:	f200 808b 	bhi.w	8005a2c <_dtoa_r+0x304>
 8005916:	e8df f003 	tbb	[pc, r3]
 800591a:	4f2d      	.short	0x4f2d
 800591c:	5b4d      	.short	0x5b4d
 800591e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005922:	441c      	add	r4, r3
 8005924:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005928:	2b20      	cmp	r3, #32
 800592a:	bfc3      	ittte	gt
 800592c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005930:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005934:	fa09 f303 	lslgt.w	r3, r9, r3
 8005938:	f1c3 0320 	rsble	r3, r3, #32
 800593c:	bfc6      	itte	gt
 800593e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005942:	4318      	orrgt	r0, r3
 8005944:	fa06 f003 	lslle.w	r0, r6, r3
 8005948:	f7fa fd4c 	bl	80003e4 <__aeabi_ui2d>
 800594c:	2301      	movs	r3, #1
 800594e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005952:	3c01      	subs	r4, #1
 8005954:	9313      	str	r3, [sp, #76]	; 0x4c
 8005956:	e770      	b.n	800583a <_dtoa_r+0x112>
 8005958:	2301      	movs	r3, #1
 800595a:	e7b3      	b.n	80058c4 <_dtoa_r+0x19c>
 800595c:	900f      	str	r0, [sp, #60]	; 0x3c
 800595e:	e7b2      	b.n	80058c6 <_dtoa_r+0x19e>
 8005960:	9b06      	ldr	r3, [sp, #24]
 8005962:	eba3 0309 	sub.w	r3, r3, r9
 8005966:	9306      	str	r3, [sp, #24]
 8005968:	f1c9 0300 	rsb	r3, r9, #0
 800596c:	930a      	str	r3, [sp, #40]	; 0x28
 800596e:	2300      	movs	r3, #0
 8005970:	930e      	str	r3, [sp, #56]	; 0x38
 8005972:	e7bf      	b.n	80058f4 <_dtoa_r+0x1cc>
 8005974:	2300      	movs	r3, #0
 8005976:	930b      	str	r3, [sp, #44]	; 0x2c
 8005978:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800597a:	2b00      	cmp	r3, #0
 800597c:	dc59      	bgt.n	8005a32 <_dtoa_r+0x30a>
 800597e:	f04f 0b01 	mov.w	fp, #1
 8005982:	465b      	mov	r3, fp
 8005984:	f8cd b008 	str.w	fp, [sp, #8]
 8005988:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800598c:	2200      	movs	r2, #0
 800598e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005990:	6042      	str	r2, [r0, #4]
 8005992:	2204      	movs	r2, #4
 8005994:	f102 0614 	add.w	r6, r2, #20
 8005998:	429e      	cmp	r6, r3
 800599a:	6841      	ldr	r1, [r0, #4]
 800599c:	d94f      	bls.n	8005a3e <_dtoa_r+0x316>
 800599e:	4628      	mov	r0, r5
 80059a0:	f000 fcd8 	bl	8006354 <_Balloc>
 80059a4:	9008      	str	r0, [sp, #32]
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d14d      	bne.n	8005a46 <_dtoa_r+0x31e>
 80059aa:	4602      	mov	r2, r0
 80059ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80059b0:	4b1d      	ldr	r3, [pc, #116]	; (8005a28 <_dtoa_r+0x300>)
 80059b2:	e6cd      	b.n	8005750 <_dtoa_r+0x28>
 80059b4:	2301      	movs	r3, #1
 80059b6:	e7de      	b.n	8005976 <_dtoa_r+0x24e>
 80059b8:	2300      	movs	r3, #0
 80059ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80059bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059be:	eb09 0b03 	add.w	fp, r9, r3
 80059c2:	f10b 0301 	add.w	r3, fp, #1
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	9302      	str	r3, [sp, #8]
 80059ca:	bfb8      	it	lt
 80059cc:	2301      	movlt	r3, #1
 80059ce:	e7dd      	b.n	800598c <_dtoa_r+0x264>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e7f2      	b.n	80059ba <_dtoa_r+0x292>
 80059d4:	2401      	movs	r4, #1
 80059d6:	2300      	movs	r3, #0
 80059d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80059da:	9322      	str	r3, [sp, #136]	; 0x88
 80059dc:	f04f 3bff 	mov.w	fp, #4294967295
 80059e0:	2200      	movs	r2, #0
 80059e2:	2312      	movs	r3, #18
 80059e4:	f8cd b008 	str.w	fp, [sp, #8]
 80059e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80059ea:	e7cf      	b.n	800598c <_dtoa_r+0x264>
 80059ec:	f3af 8000 	nop.w
 80059f0:	636f4361 	.word	0x636f4361
 80059f4:	3fd287a7 	.word	0x3fd287a7
 80059f8:	8b60c8b3 	.word	0x8b60c8b3
 80059fc:	3fc68a28 	.word	0x3fc68a28
 8005a00:	509f79fb 	.word	0x509f79fb
 8005a04:	3fd34413 	.word	0x3fd34413
 8005a08:	08007b35 	.word	0x08007b35
 8005a0c:	08007b4c 	.word	0x08007b4c
 8005a10:	7ff00000 	.word	0x7ff00000
 8005a14:	08007b31 	.word	0x08007b31
 8005a18:	08007b28 	.word	0x08007b28
 8005a1c:	08007b05 	.word	0x08007b05
 8005a20:	3ff80000 	.word	0x3ff80000
 8005a24:	08007c48 	.word	0x08007c48
 8005a28:	08007bab 	.word	0x08007bab
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a30:	e7d4      	b.n	80059dc <_dtoa_r+0x2b4>
 8005a32:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005a36:	465b      	mov	r3, fp
 8005a38:	f8cd b008 	str.w	fp, [sp, #8]
 8005a3c:	e7a6      	b.n	800598c <_dtoa_r+0x264>
 8005a3e:	3101      	adds	r1, #1
 8005a40:	6041      	str	r1, [r0, #4]
 8005a42:	0052      	lsls	r2, r2, #1
 8005a44:	e7a6      	b.n	8005994 <_dtoa_r+0x26c>
 8005a46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a48:	9a08      	ldr	r2, [sp, #32]
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	9b02      	ldr	r3, [sp, #8]
 8005a4e:	2b0e      	cmp	r3, #14
 8005a50:	f200 80a8 	bhi.w	8005ba4 <_dtoa_r+0x47c>
 8005a54:	2c00      	cmp	r4, #0
 8005a56:	f000 80a5 	beq.w	8005ba4 <_dtoa_r+0x47c>
 8005a5a:	f1b9 0f00 	cmp.w	r9, #0
 8005a5e:	dd34      	ble.n	8005aca <_dtoa_r+0x3a2>
 8005a60:	4a9a      	ldr	r2, [pc, #616]	; (8005ccc <_dtoa_r+0x5a4>)
 8005a62:	f009 030f 	and.w	r3, r9, #15
 8005a66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a6a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005a6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005a76:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005a7a:	d016      	beq.n	8005aaa <_dtoa_r+0x382>
 8005a7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a80:	4b93      	ldr	r3, [pc, #588]	; (8005cd0 <_dtoa_r+0x5a8>)
 8005a82:	2703      	movs	r7, #3
 8005a84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a88:	f7fa fe50 	bl	800072c <__aeabi_ddiv>
 8005a8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a90:	f004 040f 	and.w	r4, r4, #15
 8005a94:	4e8e      	ldr	r6, [pc, #568]	; (8005cd0 <_dtoa_r+0x5a8>)
 8005a96:	b954      	cbnz	r4, 8005aae <_dtoa_r+0x386>
 8005a98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aa0:	f7fa fe44 	bl	800072c <__aeabi_ddiv>
 8005aa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005aa8:	e029      	b.n	8005afe <_dtoa_r+0x3d6>
 8005aaa:	2702      	movs	r7, #2
 8005aac:	e7f2      	b.n	8005a94 <_dtoa_r+0x36c>
 8005aae:	07e1      	lsls	r1, r4, #31
 8005ab0:	d508      	bpl.n	8005ac4 <_dtoa_r+0x39c>
 8005ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ab6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005aba:	f7fa fd0d 	bl	80004d8 <__aeabi_dmul>
 8005abe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ac2:	3701      	adds	r7, #1
 8005ac4:	1064      	asrs	r4, r4, #1
 8005ac6:	3608      	adds	r6, #8
 8005ac8:	e7e5      	b.n	8005a96 <_dtoa_r+0x36e>
 8005aca:	f000 80a5 	beq.w	8005c18 <_dtoa_r+0x4f0>
 8005ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ad2:	f1c9 0400 	rsb	r4, r9, #0
 8005ad6:	4b7d      	ldr	r3, [pc, #500]	; (8005ccc <_dtoa_r+0x5a4>)
 8005ad8:	f004 020f 	and.w	r2, r4, #15
 8005adc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	f7fa fcf8 	bl	80004d8 <__aeabi_dmul>
 8005ae8:	2702      	movs	r7, #2
 8005aea:	2300      	movs	r3, #0
 8005aec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005af0:	4e77      	ldr	r6, [pc, #476]	; (8005cd0 <_dtoa_r+0x5a8>)
 8005af2:	1124      	asrs	r4, r4, #4
 8005af4:	2c00      	cmp	r4, #0
 8005af6:	f040 8084 	bne.w	8005c02 <_dtoa_r+0x4da>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1d2      	bne.n	8005aa4 <_dtoa_r+0x37c>
 8005afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 808b 	beq.w	8005c1c <_dtoa_r+0x4f4>
 8005b06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b12:	2200      	movs	r2, #0
 8005b14:	4b6f      	ldr	r3, [pc, #444]	; (8005cd4 <_dtoa_r+0x5ac>)
 8005b16:	f7fa ff51 	bl	80009bc <__aeabi_dcmplt>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d07e      	beq.n	8005c1c <_dtoa_r+0x4f4>
 8005b1e:	9b02      	ldr	r3, [sp, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d07b      	beq.n	8005c1c <_dtoa_r+0x4f4>
 8005b24:	f1bb 0f00 	cmp.w	fp, #0
 8005b28:	dd38      	ble.n	8005b9c <_dtoa_r+0x474>
 8005b2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b2e:	2200      	movs	r2, #0
 8005b30:	4b69      	ldr	r3, [pc, #420]	; (8005cd8 <_dtoa_r+0x5b0>)
 8005b32:	f7fa fcd1 	bl	80004d8 <__aeabi_dmul>
 8005b36:	465c      	mov	r4, fp
 8005b38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b3c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005b40:	3701      	adds	r7, #1
 8005b42:	4638      	mov	r0, r7
 8005b44:	f7fa fc5e 	bl	8000404 <__aeabi_i2d>
 8005b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b4c:	f7fa fcc4 	bl	80004d8 <__aeabi_dmul>
 8005b50:	2200      	movs	r2, #0
 8005b52:	4b62      	ldr	r3, [pc, #392]	; (8005cdc <_dtoa_r+0x5b4>)
 8005b54:	f7fa fb0a 	bl	800016c <__adddf3>
 8005b58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005b5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b60:	9611      	str	r6, [sp, #68]	; 0x44
 8005b62:	2c00      	cmp	r4, #0
 8005b64:	d15d      	bne.n	8005c22 <_dtoa_r+0x4fa>
 8005b66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	4b5c      	ldr	r3, [pc, #368]	; (8005ce0 <_dtoa_r+0x5b8>)
 8005b6e:	f7fa fafb 	bl	8000168 <__aeabi_dsub>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b7a:	4633      	mov	r3, r6
 8005b7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b7e:	f7fa ff3b 	bl	80009f8 <__aeabi_dcmpgt>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	f040 829e 	bne.w	80060c4 <_dtoa_r+0x99c>
 8005b88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005b92:	f7fa ff13 	bl	80009bc <__aeabi_dcmplt>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	f040 8292 	bne.w	80060c0 <_dtoa_r+0x998>
 8005b9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005ba0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ba4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f2c0 8153 	blt.w	8005e52 <_dtoa_r+0x72a>
 8005bac:	f1b9 0f0e 	cmp.w	r9, #14
 8005bb0:	f300 814f 	bgt.w	8005e52 <_dtoa_r+0x72a>
 8005bb4:	4b45      	ldr	r3, [pc, #276]	; (8005ccc <_dtoa_r+0x5a4>)
 8005bb6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005bba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bbe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005bc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f280 80db 	bge.w	8005d80 <_dtoa_r+0x658>
 8005bca:	9b02      	ldr	r3, [sp, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f300 80d7 	bgt.w	8005d80 <_dtoa_r+0x658>
 8005bd2:	f040 8274 	bne.w	80060be <_dtoa_r+0x996>
 8005bd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	4b40      	ldr	r3, [pc, #256]	; (8005ce0 <_dtoa_r+0x5b8>)
 8005bde:	f7fa fc7b 	bl	80004d8 <__aeabi_dmul>
 8005be2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005be6:	f7fa fefd 	bl	80009e4 <__aeabi_dcmpge>
 8005bea:	9c02      	ldr	r4, [sp, #8]
 8005bec:	4626      	mov	r6, r4
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f040 824a 	bne.w	8006088 <_dtoa_r+0x960>
 8005bf4:	2331      	movs	r3, #49	; 0x31
 8005bf6:	9f08      	ldr	r7, [sp, #32]
 8005bf8:	f109 0901 	add.w	r9, r9, #1
 8005bfc:	f807 3b01 	strb.w	r3, [r7], #1
 8005c00:	e246      	b.n	8006090 <_dtoa_r+0x968>
 8005c02:	07e2      	lsls	r2, r4, #31
 8005c04:	d505      	bpl.n	8005c12 <_dtoa_r+0x4ea>
 8005c06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c0a:	f7fa fc65 	bl	80004d8 <__aeabi_dmul>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	3701      	adds	r7, #1
 8005c12:	1064      	asrs	r4, r4, #1
 8005c14:	3608      	adds	r6, #8
 8005c16:	e76d      	b.n	8005af4 <_dtoa_r+0x3cc>
 8005c18:	2702      	movs	r7, #2
 8005c1a:	e770      	b.n	8005afe <_dtoa_r+0x3d6>
 8005c1c:	46c8      	mov	r8, r9
 8005c1e:	9c02      	ldr	r4, [sp, #8]
 8005c20:	e78f      	b.n	8005b42 <_dtoa_r+0x41a>
 8005c22:	9908      	ldr	r1, [sp, #32]
 8005c24:	4b29      	ldr	r3, [pc, #164]	; (8005ccc <_dtoa_r+0x5a4>)
 8005c26:	4421      	add	r1, r4
 8005c28:	9112      	str	r1, [sp, #72]	; 0x48
 8005c2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005c34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c38:	2900      	cmp	r1, #0
 8005c3a:	d055      	beq.n	8005ce8 <_dtoa_r+0x5c0>
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	4929      	ldr	r1, [pc, #164]	; (8005ce4 <_dtoa_r+0x5bc>)
 8005c40:	f7fa fd74 	bl	800072c <__aeabi_ddiv>
 8005c44:	463b      	mov	r3, r7
 8005c46:	4632      	mov	r2, r6
 8005c48:	f7fa fa8e 	bl	8000168 <__aeabi_dsub>
 8005c4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c50:	9f08      	ldr	r7, [sp, #32]
 8005c52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c56:	f7fa feef 	bl	8000a38 <__aeabi_d2iz>
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	f7fa fbd2 	bl	8000404 <__aeabi_i2d>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c68:	f7fa fa7e 	bl	8000168 <__aeabi_dsub>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	3430      	adds	r4, #48	; 0x30
 8005c72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c7a:	f807 4b01 	strb.w	r4, [r7], #1
 8005c7e:	f7fa fe9d 	bl	80009bc <__aeabi_dcmplt>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d174      	bne.n	8005d70 <_dtoa_r+0x648>
 8005c86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	4911      	ldr	r1, [pc, #68]	; (8005cd4 <_dtoa_r+0x5ac>)
 8005c8e:	f7fa fa6b 	bl	8000168 <__aeabi_dsub>
 8005c92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c96:	f7fa fe91 	bl	80009bc <__aeabi_dcmplt>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	f040 80b6 	bne.w	8005e0c <_dtoa_r+0x6e4>
 8005ca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ca2:	429f      	cmp	r7, r3
 8005ca4:	f43f af7a 	beq.w	8005b9c <_dtoa_r+0x474>
 8005ca8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cac:	2200      	movs	r2, #0
 8005cae:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <_dtoa_r+0x5b0>)
 8005cb0:	f7fa fc12 	bl	80004d8 <__aeabi_dmul>
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cbe:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <_dtoa_r+0x5b0>)
 8005cc0:	f7fa fc0a 	bl	80004d8 <__aeabi_dmul>
 8005cc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cc8:	e7c3      	b.n	8005c52 <_dtoa_r+0x52a>
 8005cca:	bf00      	nop
 8005ccc:	08007c48 	.word	0x08007c48
 8005cd0:	08007c20 	.word	0x08007c20
 8005cd4:	3ff00000 	.word	0x3ff00000
 8005cd8:	40240000 	.word	0x40240000
 8005cdc:	401c0000 	.word	0x401c0000
 8005ce0:	40140000 	.word	0x40140000
 8005ce4:	3fe00000 	.word	0x3fe00000
 8005ce8:	4630      	mov	r0, r6
 8005cea:	4639      	mov	r1, r7
 8005cec:	f7fa fbf4 	bl	80004d8 <__aeabi_dmul>
 8005cf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cf2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cf6:	9c08      	ldr	r4, [sp, #32]
 8005cf8:	9314      	str	r3, [sp, #80]	; 0x50
 8005cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cfe:	f7fa fe9b 	bl	8000a38 <__aeabi_d2iz>
 8005d02:	9015      	str	r0, [sp, #84]	; 0x54
 8005d04:	f7fa fb7e 	bl	8000404 <__aeabi_i2d>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d10:	f7fa fa2a 	bl	8000168 <__aeabi_dsub>
 8005d14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d16:	4606      	mov	r6, r0
 8005d18:	3330      	adds	r3, #48	; 0x30
 8005d1a:	f804 3b01 	strb.w	r3, [r4], #1
 8005d1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d20:	460f      	mov	r7, r1
 8005d22:	429c      	cmp	r4, r3
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	d124      	bne.n	8005d74 <_dtoa_r+0x64c>
 8005d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d2e:	4bb3      	ldr	r3, [pc, #716]	; (8005ffc <_dtoa_r+0x8d4>)
 8005d30:	f7fa fa1c 	bl	800016c <__adddf3>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4630      	mov	r0, r6
 8005d3a:	4639      	mov	r1, r7
 8005d3c:	f7fa fe5c 	bl	80009f8 <__aeabi_dcmpgt>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d162      	bne.n	8005e0a <_dtoa_r+0x6e2>
 8005d44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d48:	2000      	movs	r0, #0
 8005d4a:	49ac      	ldr	r1, [pc, #688]	; (8005ffc <_dtoa_r+0x8d4>)
 8005d4c:	f7fa fa0c 	bl	8000168 <__aeabi_dsub>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4630      	mov	r0, r6
 8005d56:	4639      	mov	r1, r7
 8005d58:	f7fa fe30 	bl	80009bc <__aeabi_dcmplt>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	f43f af1d 	beq.w	8005b9c <_dtoa_r+0x474>
 8005d62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005d64:	1e7b      	subs	r3, r7, #1
 8005d66:	9314      	str	r3, [sp, #80]	; 0x50
 8005d68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005d6c:	2b30      	cmp	r3, #48	; 0x30
 8005d6e:	d0f8      	beq.n	8005d62 <_dtoa_r+0x63a>
 8005d70:	46c1      	mov	r9, r8
 8005d72:	e03a      	b.n	8005dea <_dtoa_r+0x6c2>
 8005d74:	4ba2      	ldr	r3, [pc, #648]	; (8006000 <_dtoa_r+0x8d8>)
 8005d76:	f7fa fbaf 	bl	80004d8 <__aeabi_dmul>
 8005d7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d7e:	e7bc      	b.n	8005cfa <_dtoa_r+0x5d2>
 8005d80:	9f08      	ldr	r7, [sp, #32]
 8005d82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d8a:	f7fa fccf 	bl	800072c <__aeabi_ddiv>
 8005d8e:	f7fa fe53 	bl	8000a38 <__aeabi_d2iz>
 8005d92:	4604      	mov	r4, r0
 8005d94:	f7fa fb36 	bl	8000404 <__aeabi_i2d>
 8005d98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d9c:	f7fa fb9c 	bl	80004d8 <__aeabi_dmul>
 8005da0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005da4:	460b      	mov	r3, r1
 8005da6:	4602      	mov	r2, r0
 8005da8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dac:	f7fa f9dc 	bl	8000168 <__aeabi_dsub>
 8005db0:	f807 6b01 	strb.w	r6, [r7], #1
 8005db4:	9e08      	ldr	r6, [sp, #32]
 8005db6:	9b02      	ldr	r3, [sp, #8]
 8005db8:	1bbe      	subs	r6, r7, r6
 8005dba:	42b3      	cmp	r3, r6
 8005dbc:	d13a      	bne.n	8005e34 <_dtoa_r+0x70c>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	f7fa f9d3 	bl	800016c <__adddf3>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dd2:	f7fa fe11 	bl	80009f8 <__aeabi_dcmpgt>
 8005dd6:	bb58      	cbnz	r0, 8005e30 <_dtoa_r+0x708>
 8005dd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005de0:	f7fa fde2 	bl	80009a8 <__aeabi_dcmpeq>
 8005de4:	b108      	cbz	r0, 8005dea <_dtoa_r+0x6c2>
 8005de6:	07e1      	lsls	r1, r4, #31
 8005de8:	d422      	bmi.n	8005e30 <_dtoa_r+0x708>
 8005dea:	4628      	mov	r0, r5
 8005dec:	4651      	mov	r1, sl
 8005dee:	f000 faf1 	bl	80063d4 <_Bfree>
 8005df2:	2300      	movs	r3, #0
 8005df4:	703b      	strb	r3, [r7, #0]
 8005df6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005df8:	f109 0001 	add.w	r0, r9, #1
 8005dfc:	6018      	str	r0, [r3, #0]
 8005dfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f43f acdf 	beq.w	80057c4 <_dtoa_r+0x9c>
 8005e06:	601f      	str	r7, [r3, #0]
 8005e08:	e4dc      	b.n	80057c4 <_dtoa_r+0x9c>
 8005e0a:	4627      	mov	r7, r4
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	461f      	mov	r7, r3
 8005e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e14:	2a39      	cmp	r2, #57	; 0x39
 8005e16:	d107      	bne.n	8005e28 <_dtoa_r+0x700>
 8005e18:	9a08      	ldr	r2, [sp, #32]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d1f7      	bne.n	8005e0e <_dtoa_r+0x6e6>
 8005e1e:	2230      	movs	r2, #48	; 0x30
 8005e20:	9908      	ldr	r1, [sp, #32]
 8005e22:	f108 0801 	add.w	r8, r8, #1
 8005e26:	700a      	strb	r2, [r1, #0]
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	3201      	adds	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e79f      	b.n	8005d70 <_dtoa_r+0x648>
 8005e30:	46c8      	mov	r8, r9
 8005e32:	e7eb      	b.n	8005e0c <_dtoa_r+0x6e4>
 8005e34:	2200      	movs	r2, #0
 8005e36:	4b72      	ldr	r3, [pc, #456]	; (8006000 <_dtoa_r+0x8d8>)
 8005e38:	f7fa fb4e 	bl	80004d8 <__aeabi_dmul>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e44:	2200      	movs	r2, #0
 8005e46:	2300      	movs	r3, #0
 8005e48:	f7fa fdae 	bl	80009a8 <__aeabi_dcmpeq>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d098      	beq.n	8005d82 <_dtoa_r+0x65a>
 8005e50:	e7cb      	b.n	8005dea <_dtoa_r+0x6c2>
 8005e52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e54:	2a00      	cmp	r2, #0
 8005e56:	f000 80cd 	beq.w	8005ff4 <_dtoa_r+0x8cc>
 8005e5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e5c:	2a01      	cmp	r2, #1
 8005e5e:	f300 80af 	bgt.w	8005fc0 <_dtoa_r+0x898>
 8005e62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e64:	2a00      	cmp	r2, #0
 8005e66:	f000 80a7 	beq.w	8005fb8 <_dtoa_r+0x890>
 8005e6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e70:	9f06      	ldr	r7, [sp, #24]
 8005e72:	9a06      	ldr	r2, [sp, #24]
 8005e74:	2101      	movs	r1, #1
 8005e76:	441a      	add	r2, r3
 8005e78:	9206      	str	r2, [sp, #24]
 8005e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	441a      	add	r2, r3
 8005e80:	9209      	str	r2, [sp, #36]	; 0x24
 8005e82:	f000 fb61 	bl	8006548 <__i2b>
 8005e86:	4606      	mov	r6, r0
 8005e88:	2f00      	cmp	r7, #0
 8005e8a:	dd0c      	ble.n	8005ea6 <_dtoa_r+0x77e>
 8005e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	dd09      	ble.n	8005ea6 <_dtoa_r+0x77e>
 8005e92:	42bb      	cmp	r3, r7
 8005e94:	bfa8      	it	ge
 8005e96:	463b      	movge	r3, r7
 8005e98:	9a06      	ldr	r2, [sp, #24]
 8005e9a:	1aff      	subs	r7, r7, r3
 8005e9c:	1ad2      	subs	r2, r2, r3
 8005e9e:	9206      	str	r2, [sp, #24]
 8005ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea8:	b1f3      	cbz	r3, 8005ee8 <_dtoa_r+0x7c0>
 8005eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 80a9 	beq.w	8006004 <_dtoa_r+0x8dc>
 8005eb2:	2c00      	cmp	r4, #0
 8005eb4:	dd10      	ble.n	8005ed8 <_dtoa_r+0x7b0>
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4622      	mov	r2, r4
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 fbfe 	bl	80066bc <__pow5mult>
 8005ec0:	4652      	mov	r2, sl
 8005ec2:	4601      	mov	r1, r0
 8005ec4:	4606      	mov	r6, r0
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 fb54 	bl	8006574 <__multiply>
 8005ecc:	4680      	mov	r8, r0
 8005ece:	4651      	mov	r1, sl
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f000 fa7f 	bl	80063d4 <_Bfree>
 8005ed6:	46c2      	mov	sl, r8
 8005ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eda:	1b1a      	subs	r2, r3, r4
 8005edc:	d004      	beq.n	8005ee8 <_dtoa_r+0x7c0>
 8005ede:	4651      	mov	r1, sl
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 fbeb 	bl	80066bc <__pow5mult>
 8005ee6:	4682      	mov	sl, r0
 8005ee8:	2101      	movs	r1, #1
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 fb2c 	bl	8006548 <__i2b>
 8005ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f340 8087 	ble.w	8006008 <_dtoa_r+0x8e0>
 8005efa:	461a      	mov	r2, r3
 8005efc:	4601      	mov	r1, r0
 8005efe:	4628      	mov	r0, r5
 8005f00:	f000 fbdc 	bl	80066bc <__pow5mult>
 8005f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f06:	4604      	mov	r4, r0
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	f340 8080 	ble.w	800600e <_dtoa_r+0x8e6>
 8005f0e:	f04f 0800 	mov.w	r8, #0
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f18:	6918      	ldr	r0, [r3, #16]
 8005f1a:	f000 fac7 	bl	80064ac <__hi0bits>
 8005f1e:	f1c0 0020 	rsb	r0, r0, #32
 8005f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f24:	4418      	add	r0, r3
 8005f26:	f010 001f 	ands.w	r0, r0, #31
 8005f2a:	f000 8092 	beq.w	8006052 <_dtoa_r+0x92a>
 8005f2e:	f1c0 0320 	rsb	r3, r0, #32
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	f340 808a 	ble.w	800604c <_dtoa_r+0x924>
 8005f38:	f1c0 001c 	rsb	r0, r0, #28
 8005f3c:	9b06      	ldr	r3, [sp, #24]
 8005f3e:	4407      	add	r7, r0
 8005f40:	4403      	add	r3, r0
 8005f42:	9306      	str	r3, [sp, #24]
 8005f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f46:	4403      	add	r3, r0
 8005f48:	9309      	str	r3, [sp, #36]	; 0x24
 8005f4a:	9b06      	ldr	r3, [sp, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	dd05      	ble.n	8005f5c <_dtoa_r+0x834>
 8005f50:	4651      	mov	r1, sl
 8005f52:	461a      	mov	r2, r3
 8005f54:	4628      	mov	r0, r5
 8005f56:	f000 fc0b 	bl	8006770 <__lshift>
 8005f5a:	4682      	mov	sl, r0
 8005f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	dd05      	ble.n	8005f6e <_dtoa_r+0x846>
 8005f62:	4621      	mov	r1, r4
 8005f64:	461a      	mov	r2, r3
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 fc02 	bl	8006770 <__lshift>
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d070      	beq.n	8006056 <_dtoa_r+0x92e>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4650      	mov	r0, sl
 8005f78:	f000 fc66 	bl	8006848 <__mcmp>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	da6a      	bge.n	8006056 <_dtoa_r+0x92e>
 8005f80:	2300      	movs	r3, #0
 8005f82:	4651      	mov	r1, sl
 8005f84:	220a      	movs	r2, #10
 8005f86:	4628      	mov	r0, r5
 8005f88:	f000 fa46 	bl	8006418 <__multadd>
 8005f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f8e:	4682      	mov	sl, r0
 8005f90:	f109 39ff 	add.w	r9, r9, #4294967295
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8193 	beq.w	80062c0 <_dtoa_r+0xb98>
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	220a      	movs	r2, #10
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f000 fa39 	bl	8006418 <__multadd>
 8005fa6:	f1bb 0f00 	cmp.w	fp, #0
 8005faa:	4606      	mov	r6, r0
 8005fac:	f300 8093 	bgt.w	80060d6 <_dtoa_r+0x9ae>
 8005fb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	dc57      	bgt.n	8006066 <_dtoa_r+0x93e>
 8005fb6:	e08e      	b.n	80060d6 <_dtoa_r+0x9ae>
 8005fb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005fba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fbe:	e756      	b.n	8005e6e <_dtoa_r+0x746>
 8005fc0:	9b02      	ldr	r3, [sp, #8]
 8005fc2:	1e5c      	subs	r4, r3, #1
 8005fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc6:	42a3      	cmp	r3, r4
 8005fc8:	bfb7      	itett	lt
 8005fca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005fcc:	1b1c      	subge	r4, r3, r4
 8005fce:	1ae2      	sublt	r2, r4, r3
 8005fd0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005fd2:	bfbe      	ittt	lt
 8005fd4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005fd6:	189b      	addlt	r3, r3, r2
 8005fd8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005fda:	9b02      	ldr	r3, [sp, #8]
 8005fdc:	bfb8      	it	lt
 8005fde:	2400      	movlt	r4, #0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	bfbb      	ittet	lt
 8005fe4:	9b06      	ldrlt	r3, [sp, #24]
 8005fe6:	9a02      	ldrlt	r2, [sp, #8]
 8005fe8:	9f06      	ldrge	r7, [sp, #24]
 8005fea:	1a9f      	sublt	r7, r3, r2
 8005fec:	bfac      	ite	ge
 8005fee:	9b02      	ldrge	r3, [sp, #8]
 8005ff0:	2300      	movlt	r3, #0
 8005ff2:	e73e      	b.n	8005e72 <_dtoa_r+0x74a>
 8005ff4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ff6:	9f06      	ldr	r7, [sp, #24]
 8005ff8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005ffa:	e745      	b.n	8005e88 <_dtoa_r+0x760>
 8005ffc:	3fe00000 	.word	0x3fe00000
 8006000:	40240000 	.word	0x40240000
 8006004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006006:	e76a      	b.n	8005ede <_dtoa_r+0x7b6>
 8006008:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800600a:	2b01      	cmp	r3, #1
 800600c:	dc19      	bgt.n	8006042 <_dtoa_r+0x91a>
 800600e:	9b04      	ldr	r3, [sp, #16]
 8006010:	b9bb      	cbnz	r3, 8006042 <_dtoa_r+0x91a>
 8006012:	9b05      	ldr	r3, [sp, #20]
 8006014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006018:	b99b      	cbnz	r3, 8006042 <_dtoa_r+0x91a>
 800601a:	9b05      	ldr	r3, [sp, #20]
 800601c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006020:	0d1b      	lsrs	r3, r3, #20
 8006022:	051b      	lsls	r3, r3, #20
 8006024:	b183      	cbz	r3, 8006048 <_dtoa_r+0x920>
 8006026:	f04f 0801 	mov.w	r8, #1
 800602a:	9b06      	ldr	r3, [sp, #24]
 800602c:	3301      	adds	r3, #1
 800602e:	9306      	str	r3, [sp, #24]
 8006030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006032:	3301      	adds	r3, #1
 8006034:	9309      	str	r3, [sp, #36]	; 0x24
 8006036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006038:	2b00      	cmp	r3, #0
 800603a:	f47f af6a 	bne.w	8005f12 <_dtoa_r+0x7ea>
 800603e:	2001      	movs	r0, #1
 8006040:	e76f      	b.n	8005f22 <_dtoa_r+0x7fa>
 8006042:	f04f 0800 	mov.w	r8, #0
 8006046:	e7f6      	b.n	8006036 <_dtoa_r+0x90e>
 8006048:	4698      	mov	r8, r3
 800604a:	e7f4      	b.n	8006036 <_dtoa_r+0x90e>
 800604c:	f43f af7d 	beq.w	8005f4a <_dtoa_r+0x822>
 8006050:	4618      	mov	r0, r3
 8006052:	301c      	adds	r0, #28
 8006054:	e772      	b.n	8005f3c <_dtoa_r+0x814>
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	dc36      	bgt.n	80060ca <_dtoa_r+0x9a2>
 800605c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800605e:	2b02      	cmp	r3, #2
 8006060:	dd33      	ble.n	80060ca <_dtoa_r+0x9a2>
 8006062:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006066:	f1bb 0f00 	cmp.w	fp, #0
 800606a:	d10d      	bne.n	8006088 <_dtoa_r+0x960>
 800606c:	4621      	mov	r1, r4
 800606e:	465b      	mov	r3, fp
 8006070:	2205      	movs	r2, #5
 8006072:	4628      	mov	r0, r5
 8006074:	f000 f9d0 	bl	8006418 <__multadd>
 8006078:	4601      	mov	r1, r0
 800607a:	4604      	mov	r4, r0
 800607c:	4650      	mov	r0, sl
 800607e:	f000 fbe3 	bl	8006848 <__mcmp>
 8006082:	2800      	cmp	r0, #0
 8006084:	f73f adb6 	bgt.w	8005bf4 <_dtoa_r+0x4cc>
 8006088:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800608a:	9f08      	ldr	r7, [sp, #32]
 800608c:	ea6f 0903 	mvn.w	r9, r3
 8006090:	f04f 0800 	mov.w	r8, #0
 8006094:	4621      	mov	r1, r4
 8006096:	4628      	mov	r0, r5
 8006098:	f000 f99c 	bl	80063d4 <_Bfree>
 800609c:	2e00      	cmp	r6, #0
 800609e:	f43f aea4 	beq.w	8005dea <_dtoa_r+0x6c2>
 80060a2:	f1b8 0f00 	cmp.w	r8, #0
 80060a6:	d005      	beq.n	80060b4 <_dtoa_r+0x98c>
 80060a8:	45b0      	cmp	r8, r6
 80060aa:	d003      	beq.n	80060b4 <_dtoa_r+0x98c>
 80060ac:	4641      	mov	r1, r8
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 f990 	bl	80063d4 <_Bfree>
 80060b4:	4631      	mov	r1, r6
 80060b6:	4628      	mov	r0, r5
 80060b8:	f000 f98c 	bl	80063d4 <_Bfree>
 80060bc:	e695      	b.n	8005dea <_dtoa_r+0x6c2>
 80060be:	2400      	movs	r4, #0
 80060c0:	4626      	mov	r6, r4
 80060c2:	e7e1      	b.n	8006088 <_dtoa_r+0x960>
 80060c4:	46c1      	mov	r9, r8
 80060c6:	4626      	mov	r6, r4
 80060c8:	e594      	b.n	8005bf4 <_dtoa_r+0x4cc>
 80060ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060cc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80fc 	beq.w	80062ce <_dtoa_r+0xba6>
 80060d6:	2f00      	cmp	r7, #0
 80060d8:	dd05      	ble.n	80060e6 <_dtoa_r+0x9be>
 80060da:	4631      	mov	r1, r6
 80060dc:	463a      	mov	r2, r7
 80060de:	4628      	mov	r0, r5
 80060e0:	f000 fb46 	bl	8006770 <__lshift>
 80060e4:	4606      	mov	r6, r0
 80060e6:	f1b8 0f00 	cmp.w	r8, #0
 80060ea:	d05c      	beq.n	80061a6 <_dtoa_r+0xa7e>
 80060ec:	4628      	mov	r0, r5
 80060ee:	6871      	ldr	r1, [r6, #4]
 80060f0:	f000 f930 	bl	8006354 <_Balloc>
 80060f4:	4607      	mov	r7, r0
 80060f6:	b928      	cbnz	r0, 8006104 <_dtoa_r+0x9dc>
 80060f8:	4602      	mov	r2, r0
 80060fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80060fe:	4b7e      	ldr	r3, [pc, #504]	; (80062f8 <_dtoa_r+0xbd0>)
 8006100:	f7ff bb26 	b.w	8005750 <_dtoa_r+0x28>
 8006104:	6932      	ldr	r2, [r6, #16]
 8006106:	f106 010c 	add.w	r1, r6, #12
 800610a:	3202      	adds	r2, #2
 800610c:	0092      	lsls	r2, r2, #2
 800610e:	300c      	adds	r0, #12
 8006110:	f000 f912 	bl	8006338 <memcpy>
 8006114:	2201      	movs	r2, #1
 8006116:	4639      	mov	r1, r7
 8006118:	4628      	mov	r0, r5
 800611a:	f000 fb29 	bl	8006770 <__lshift>
 800611e:	46b0      	mov	r8, r6
 8006120:	4606      	mov	r6, r0
 8006122:	9b08      	ldr	r3, [sp, #32]
 8006124:	3301      	adds	r3, #1
 8006126:	9302      	str	r3, [sp, #8]
 8006128:	9b08      	ldr	r3, [sp, #32]
 800612a:	445b      	add	r3, fp
 800612c:	930a      	str	r3, [sp, #40]	; 0x28
 800612e:	9b04      	ldr	r3, [sp, #16]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	9309      	str	r3, [sp, #36]	; 0x24
 8006136:	9b02      	ldr	r3, [sp, #8]
 8006138:	4621      	mov	r1, r4
 800613a:	4650      	mov	r0, sl
 800613c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006140:	f7ff fa64 	bl	800560c <quorem>
 8006144:	4603      	mov	r3, r0
 8006146:	4641      	mov	r1, r8
 8006148:	3330      	adds	r3, #48	; 0x30
 800614a:	9004      	str	r0, [sp, #16]
 800614c:	4650      	mov	r0, sl
 800614e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006150:	f000 fb7a 	bl	8006848 <__mcmp>
 8006154:	4632      	mov	r2, r6
 8006156:	9006      	str	r0, [sp, #24]
 8006158:	4621      	mov	r1, r4
 800615a:	4628      	mov	r0, r5
 800615c:	f000 fb90 	bl	8006880 <__mdiff>
 8006160:	68c2      	ldr	r2, [r0, #12]
 8006162:	4607      	mov	r7, r0
 8006164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006166:	bb02      	cbnz	r2, 80061aa <_dtoa_r+0xa82>
 8006168:	4601      	mov	r1, r0
 800616a:	4650      	mov	r0, sl
 800616c:	f000 fb6c 	bl	8006848 <__mcmp>
 8006170:	4602      	mov	r2, r0
 8006172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006174:	4639      	mov	r1, r7
 8006176:	4628      	mov	r0, r5
 8006178:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800617c:	f000 f92a 	bl	80063d4 <_Bfree>
 8006180:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006184:	9f02      	ldr	r7, [sp, #8]
 8006186:	ea43 0102 	orr.w	r1, r3, r2
 800618a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618c:	430b      	orrs	r3, r1
 800618e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006190:	d10d      	bne.n	80061ae <_dtoa_r+0xa86>
 8006192:	2b39      	cmp	r3, #57	; 0x39
 8006194:	d027      	beq.n	80061e6 <_dtoa_r+0xabe>
 8006196:	9a06      	ldr	r2, [sp, #24]
 8006198:	2a00      	cmp	r2, #0
 800619a:	dd01      	ble.n	80061a0 <_dtoa_r+0xa78>
 800619c:	9b04      	ldr	r3, [sp, #16]
 800619e:	3331      	adds	r3, #49	; 0x31
 80061a0:	f88b 3000 	strb.w	r3, [fp]
 80061a4:	e776      	b.n	8006094 <_dtoa_r+0x96c>
 80061a6:	4630      	mov	r0, r6
 80061a8:	e7b9      	b.n	800611e <_dtoa_r+0x9f6>
 80061aa:	2201      	movs	r2, #1
 80061ac:	e7e2      	b.n	8006174 <_dtoa_r+0xa4c>
 80061ae:	9906      	ldr	r1, [sp, #24]
 80061b0:	2900      	cmp	r1, #0
 80061b2:	db04      	blt.n	80061be <_dtoa_r+0xa96>
 80061b4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80061b6:	4301      	orrs	r1, r0
 80061b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061ba:	4301      	orrs	r1, r0
 80061bc:	d120      	bne.n	8006200 <_dtoa_r+0xad8>
 80061be:	2a00      	cmp	r2, #0
 80061c0:	ddee      	ble.n	80061a0 <_dtoa_r+0xa78>
 80061c2:	4651      	mov	r1, sl
 80061c4:	2201      	movs	r2, #1
 80061c6:	4628      	mov	r0, r5
 80061c8:	9302      	str	r3, [sp, #8]
 80061ca:	f000 fad1 	bl	8006770 <__lshift>
 80061ce:	4621      	mov	r1, r4
 80061d0:	4682      	mov	sl, r0
 80061d2:	f000 fb39 	bl	8006848 <__mcmp>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	9b02      	ldr	r3, [sp, #8]
 80061da:	dc02      	bgt.n	80061e2 <_dtoa_r+0xaba>
 80061dc:	d1e0      	bne.n	80061a0 <_dtoa_r+0xa78>
 80061de:	07da      	lsls	r2, r3, #31
 80061e0:	d5de      	bpl.n	80061a0 <_dtoa_r+0xa78>
 80061e2:	2b39      	cmp	r3, #57	; 0x39
 80061e4:	d1da      	bne.n	800619c <_dtoa_r+0xa74>
 80061e6:	2339      	movs	r3, #57	; 0x39
 80061e8:	f88b 3000 	strb.w	r3, [fp]
 80061ec:	463b      	mov	r3, r7
 80061ee:	461f      	mov	r7, r3
 80061f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	2a39      	cmp	r2, #57	; 0x39
 80061f8:	d050      	beq.n	800629c <_dtoa_r+0xb74>
 80061fa:	3201      	adds	r2, #1
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e749      	b.n	8006094 <_dtoa_r+0x96c>
 8006200:	2a00      	cmp	r2, #0
 8006202:	dd03      	ble.n	800620c <_dtoa_r+0xae4>
 8006204:	2b39      	cmp	r3, #57	; 0x39
 8006206:	d0ee      	beq.n	80061e6 <_dtoa_r+0xabe>
 8006208:	3301      	adds	r3, #1
 800620a:	e7c9      	b.n	80061a0 <_dtoa_r+0xa78>
 800620c:	9a02      	ldr	r2, [sp, #8]
 800620e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006210:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006214:	428a      	cmp	r2, r1
 8006216:	d02a      	beq.n	800626e <_dtoa_r+0xb46>
 8006218:	4651      	mov	r1, sl
 800621a:	2300      	movs	r3, #0
 800621c:	220a      	movs	r2, #10
 800621e:	4628      	mov	r0, r5
 8006220:	f000 f8fa 	bl	8006418 <__multadd>
 8006224:	45b0      	cmp	r8, r6
 8006226:	4682      	mov	sl, r0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	f04f 020a 	mov.w	r2, #10
 8006230:	4641      	mov	r1, r8
 8006232:	4628      	mov	r0, r5
 8006234:	d107      	bne.n	8006246 <_dtoa_r+0xb1e>
 8006236:	f000 f8ef 	bl	8006418 <__multadd>
 800623a:	4680      	mov	r8, r0
 800623c:	4606      	mov	r6, r0
 800623e:	9b02      	ldr	r3, [sp, #8]
 8006240:	3301      	adds	r3, #1
 8006242:	9302      	str	r3, [sp, #8]
 8006244:	e777      	b.n	8006136 <_dtoa_r+0xa0e>
 8006246:	f000 f8e7 	bl	8006418 <__multadd>
 800624a:	4631      	mov	r1, r6
 800624c:	4680      	mov	r8, r0
 800624e:	2300      	movs	r3, #0
 8006250:	220a      	movs	r2, #10
 8006252:	4628      	mov	r0, r5
 8006254:	f000 f8e0 	bl	8006418 <__multadd>
 8006258:	4606      	mov	r6, r0
 800625a:	e7f0      	b.n	800623e <_dtoa_r+0xb16>
 800625c:	f1bb 0f00 	cmp.w	fp, #0
 8006260:	bfcc      	ite	gt
 8006262:	465f      	movgt	r7, fp
 8006264:	2701      	movle	r7, #1
 8006266:	f04f 0800 	mov.w	r8, #0
 800626a:	9a08      	ldr	r2, [sp, #32]
 800626c:	4417      	add	r7, r2
 800626e:	4651      	mov	r1, sl
 8006270:	2201      	movs	r2, #1
 8006272:	4628      	mov	r0, r5
 8006274:	9302      	str	r3, [sp, #8]
 8006276:	f000 fa7b 	bl	8006770 <__lshift>
 800627a:	4621      	mov	r1, r4
 800627c:	4682      	mov	sl, r0
 800627e:	f000 fae3 	bl	8006848 <__mcmp>
 8006282:	2800      	cmp	r0, #0
 8006284:	dcb2      	bgt.n	80061ec <_dtoa_r+0xac4>
 8006286:	d102      	bne.n	800628e <_dtoa_r+0xb66>
 8006288:	9b02      	ldr	r3, [sp, #8]
 800628a:	07db      	lsls	r3, r3, #31
 800628c:	d4ae      	bmi.n	80061ec <_dtoa_r+0xac4>
 800628e:	463b      	mov	r3, r7
 8006290:	461f      	mov	r7, r3
 8006292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006296:	2a30      	cmp	r2, #48	; 0x30
 8006298:	d0fa      	beq.n	8006290 <_dtoa_r+0xb68>
 800629a:	e6fb      	b.n	8006094 <_dtoa_r+0x96c>
 800629c:	9a08      	ldr	r2, [sp, #32]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d1a5      	bne.n	80061ee <_dtoa_r+0xac6>
 80062a2:	2331      	movs	r3, #49	; 0x31
 80062a4:	f109 0901 	add.w	r9, r9, #1
 80062a8:	7013      	strb	r3, [r2, #0]
 80062aa:	e6f3      	b.n	8006094 <_dtoa_r+0x96c>
 80062ac:	4b13      	ldr	r3, [pc, #76]	; (80062fc <_dtoa_r+0xbd4>)
 80062ae:	f7ff baa7 	b.w	8005800 <_dtoa_r+0xd8>
 80062b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f47f aa80 	bne.w	80057ba <_dtoa_r+0x92>
 80062ba:	4b11      	ldr	r3, [pc, #68]	; (8006300 <_dtoa_r+0xbd8>)
 80062bc:	f7ff baa0 	b.w	8005800 <_dtoa_r+0xd8>
 80062c0:	f1bb 0f00 	cmp.w	fp, #0
 80062c4:	dc03      	bgt.n	80062ce <_dtoa_r+0xba6>
 80062c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	f73f aecc 	bgt.w	8006066 <_dtoa_r+0x93e>
 80062ce:	9f08      	ldr	r7, [sp, #32]
 80062d0:	4621      	mov	r1, r4
 80062d2:	4650      	mov	r0, sl
 80062d4:	f7ff f99a 	bl	800560c <quorem>
 80062d8:	9a08      	ldr	r2, [sp, #32]
 80062da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80062de:	f807 3b01 	strb.w	r3, [r7], #1
 80062e2:	1aba      	subs	r2, r7, r2
 80062e4:	4593      	cmp	fp, r2
 80062e6:	ddb9      	ble.n	800625c <_dtoa_r+0xb34>
 80062e8:	4651      	mov	r1, sl
 80062ea:	2300      	movs	r3, #0
 80062ec:	220a      	movs	r2, #10
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 f892 	bl	8006418 <__multadd>
 80062f4:	4682      	mov	sl, r0
 80062f6:	e7eb      	b.n	80062d0 <_dtoa_r+0xba8>
 80062f8:	08007bab 	.word	0x08007bab
 80062fc:	08007b04 	.word	0x08007b04
 8006300:	08007b28 	.word	0x08007b28

08006304 <_localeconv_r>:
 8006304:	4800      	ldr	r0, [pc, #0]	; (8006308 <_localeconv_r+0x4>)
 8006306:	4770      	bx	lr
 8006308:	20000160 	.word	0x20000160

0800630c <malloc>:
 800630c:	4b02      	ldr	r3, [pc, #8]	; (8006318 <malloc+0xc>)
 800630e:	4601      	mov	r1, r0
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	f000 bbfb 	b.w	8006b0c <_malloc_r>
 8006316:	bf00      	nop
 8006318:	2000000c 	.word	0x2000000c

0800631c <memchr>:
 800631c:	4603      	mov	r3, r0
 800631e:	b510      	push	{r4, lr}
 8006320:	b2c9      	uxtb	r1, r1
 8006322:	4402      	add	r2, r0
 8006324:	4293      	cmp	r3, r2
 8006326:	4618      	mov	r0, r3
 8006328:	d101      	bne.n	800632e <memchr+0x12>
 800632a:	2000      	movs	r0, #0
 800632c:	e003      	b.n	8006336 <memchr+0x1a>
 800632e:	7804      	ldrb	r4, [r0, #0]
 8006330:	3301      	adds	r3, #1
 8006332:	428c      	cmp	r4, r1
 8006334:	d1f6      	bne.n	8006324 <memchr+0x8>
 8006336:	bd10      	pop	{r4, pc}

08006338 <memcpy>:
 8006338:	440a      	add	r2, r1
 800633a:	4291      	cmp	r1, r2
 800633c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006340:	d100      	bne.n	8006344 <memcpy+0xc>
 8006342:	4770      	bx	lr
 8006344:	b510      	push	{r4, lr}
 8006346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800634a:	4291      	cmp	r1, r2
 800634c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006350:	d1f9      	bne.n	8006346 <memcpy+0xe>
 8006352:	bd10      	pop	{r4, pc}

08006354 <_Balloc>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006358:	4604      	mov	r4, r0
 800635a:	460d      	mov	r5, r1
 800635c:	b976      	cbnz	r6, 800637c <_Balloc+0x28>
 800635e:	2010      	movs	r0, #16
 8006360:	f7ff ffd4 	bl	800630c <malloc>
 8006364:	4602      	mov	r2, r0
 8006366:	6260      	str	r0, [r4, #36]	; 0x24
 8006368:	b920      	cbnz	r0, 8006374 <_Balloc+0x20>
 800636a:	2166      	movs	r1, #102	; 0x66
 800636c:	4b17      	ldr	r3, [pc, #92]	; (80063cc <_Balloc+0x78>)
 800636e:	4818      	ldr	r0, [pc, #96]	; (80063d0 <_Balloc+0x7c>)
 8006370:	f000 fd92 	bl	8006e98 <__assert_func>
 8006374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006378:	6006      	str	r6, [r0, #0]
 800637a:	60c6      	str	r6, [r0, #12]
 800637c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800637e:	68f3      	ldr	r3, [r6, #12]
 8006380:	b183      	cbz	r3, 80063a4 <_Balloc+0x50>
 8006382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800638a:	b9b8      	cbnz	r0, 80063bc <_Balloc+0x68>
 800638c:	2101      	movs	r1, #1
 800638e:	fa01 f605 	lsl.w	r6, r1, r5
 8006392:	1d72      	adds	r2, r6, #5
 8006394:	4620      	mov	r0, r4
 8006396:	0092      	lsls	r2, r2, #2
 8006398:	f000 fb5e 	bl	8006a58 <_calloc_r>
 800639c:	b160      	cbz	r0, 80063b8 <_Balloc+0x64>
 800639e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063a2:	e00e      	b.n	80063c2 <_Balloc+0x6e>
 80063a4:	2221      	movs	r2, #33	; 0x21
 80063a6:	2104      	movs	r1, #4
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 fb55 	bl	8006a58 <_calloc_r>
 80063ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063b0:	60f0      	str	r0, [r6, #12]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e4      	bne.n	8006382 <_Balloc+0x2e>
 80063b8:	2000      	movs	r0, #0
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	6802      	ldr	r2, [r0, #0]
 80063be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063c2:	2300      	movs	r3, #0
 80063c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063c8:	e7f7      	b.n	80063ba <_Balloc+0x66>
 80063ca:	bf00      	nop
 80063cc:	08007b35 	.word	0x08007b35
 80063d0:	08007bbc 	.word	0x08007bbc

080063d4 <_Bfree>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063d8:	4605      	mov	r5, r0
 80063da:	460c      	mov	r4, r1
 80063dc:	b976      	cbnz	r6, 80063fc <_Bfree+0x28>
 80063de:	2010      	movs	r0, #16
 80063e0:	f7ff ff94 	bl	800630c <malloc>
 80063e4:	4602      	mov	r2, r0
 80063e6:	6268      	str	r0, [r5, #36]	; 0x24
 80063e8:	b920      	cbnz	r0, 80063f4 <_Bfree+0x20>
 80063ea:	218a      	movs	r1, #138	; 0x8a
 80063ec:	4b08      	ldr	r3, [pc, #32]	; (8006410 <_Bfree+0x3c>)
 80063ee:	4809      	ldr	r0, [pc, #36]	; (8006414 <_Bfree+0x40>)
 80063f0:	f000 fd52 	bl	8006e98 <__assert_func>
 80063f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063f8:	6006      	str	r6, [r0, #0]
 80063fa:	60c6      	str	r6, [r0, #12]
 80063fc:	b13c      	cbz	r4, 800640e <_Bfree+0x3a>
 80063fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006400:	6862      	ldr	r2, [r4, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006408:	6021      	str	r1, [r4, #0]
 800640a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800640e:	bd70      	pop	{r4, r5, r6, pc}
 8006410:	08007b35 	.word	0x08007b35
 8006414:	08007bbc 	.word	0x08007bbc

08006418 <__multadd>:
 8006418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800641c:	4698      	mov	r8, r3
 800641e:	460c      	mov	r4, r1
 8006420:	2300      	movs	r3, #0
 8006422:	690e      	ldr	r6, [r1, #16]
 8006424:	4607      	mov	r7, r0
 8006426:	f101 0014 	add.w	r0, r1, #20
 800642a:	6805      	ldr	r5, [r0, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	b2a9      	uxth	r1, r5
 8006430:	fb02 8101 	mla	r1, r2, r1, r8
 8006434:	0c2d      	lsrs	r5, r5, #16
 8006436:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800643a:	fb02 c505 	mla	r5, r2, r5, ip
 800643e:	b289      	uxth	r1, r1
 8006440:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006444:	429e      	cmp	r6, r3
 8006446:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800644a:	f840 1b04 	str.w	r1, [r0], #4
 800644e:	dcec      	bgt.n	800642a <__multadd+0x12>
 8006450:	f1b8 0f00 	cmp.w	r8, #0
 8006454:	d022      	beq.n	800649c <__multadd+0x84>
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	42b3      	cmp	r3, r6
 800645a:	dc19      	bgt.n	8006490 <__multadd+0x78>
 800645c:	6861      	ldr	r1, [r4, #4]
 800645e:	4638      	mov	r0, r7
 8006460:	3101      	adds	r1, #1
 8006462:	f7ff ff77 	bl	8006354 <_Balloc>
 8006466:	4605      	mov	r5, r0
 8006468:	b928      	cbnz	r0, 8006476 <__multadd+0x5e>
 800646a:	4602      	mov	r2, r0
 800646c:	21b5      	movs	r1, #181	; 0xb5
 800646e:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <__multadd+0x8c>)
 8006470:	480d      	ldr	r0, [pc, #52]	; (80064a8 <__multadd+0x90>)
 8006472:	f000 fd11 	bl	8006e98 <__assert_func>
 8006476:	6922      	ldr	r2, [r4, #16]
 8006478:	f104 010c 	add.w	r1, r4, #12
 800647c:	3202      	adds	r2, #2
 800647e:	0092      	lsls	r2, r2, #2
 8006480:	300c      	adds	r0, #12
 8006482:	f7ff ff59 	bl	8006338 <memcpy>
 8006486:	4621      	mov	r1, r4
 8006488:	4638      	mov	r0, r7
 800648a:	f7ff ffa3 	bl	80063d4 <_Bfree>
 800648e:	462c      	mov	r4, r5
 8006490:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006494:	3601      	adds	r6, #1
 8006496:	f8c3 8014 	str.w	r8, [r3, #20]
 800649a:	6126      	str	r6, [r4, #16]
 800649c:	4620      	mov	r0, r4
 800649e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a2:	bf00      	nop
 80064a4:	08007bab 	.word	0x08007bab
 80064a8:	08007bbc 	.word	0x08007bbc

080064ac <__hi0bits>:
 80064ac:	0c02      	lsrs	r2, r0, #16
 80064ae:	0412      	lsls	r2, r2, #16
 80064b0:	4603      	mov	r3, r0
 80064b2:	b9ca      	cbnz	r2, 80064e8 <__hi0bits+0x3c>
 80064b4:	0403      	lsls	r3, r0, #16
 80064b6:	2010      	movs	r0, #16
 80064b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064bc:	bf04      	itt	eq
 80064be:	021b      	lsleq	r3, r3, #8
 80064c0:	3008      	addeq	r0, #8
 80064c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064c6:	bf04      	itt	eq
 80064c8:	011b      	lsleq	r3, r3, #4
 80064ca:	3004      	addeq	r0, #4
 80064cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064d0:	bf04      	itt	eq
 80064d2:	009b      	lsleq	r3, r3, #2
 80064d4:	3002      	addeq	r0, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	db05      	blt.n	80064e6 <__hi0bits+0x3a>
 80064da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80064de:	f100 0001 	add.w	r0, r0, #1
 80064e2:	bf08      	it	eq
 80064e4:	2020      	moveq	r0, #32
 80064e6:	4770      	bx	lr
 80064e8:	2000      	movs	r0, #0
 80064ea:	e7e5      	b.n	80064b8 <__hi0bits+0xc>

080064ec <__lo0bits>:
 80064ec:	6803      	ldr	r3, [r0, #0]
 80064ee:	4602      	mov	r2, r0
 80064f0:	f013 0007 	ands.w	r0, r3, #7
 80064f4:	d00b      	beq.n	800650e <__lo0bits+0x22>
 80064f6:	07d9      	lsls	r1, r3, #31
 80064f8:	d422      	bmi.n	8006540 <__lo0bits+0x54>
 80064fa:	0798      	lsls	r0, r3, #30
 80064fc:	bf49      	itett	mi
 80064fe:	085b      	lsrmi	r3, r3, #1
 8006500:	089b      	lsrpl	r3, r3, #2
 8006502:	2001      	movmi	r0, #1
 8006504:	6013      	strmi	r3, [r2, #0]
 8006506:	bf5c      	itt	pl
 8006508:	2002      	movpl	r0, #2
 800650a:	6013      	strpl	r3, [r2, #0]
 800650c:	4770      	bx	lr
 800650e:	b299      	uxth	r1, r3
 8006510:	b909      	cbnz	r1, 8006516 <__lo0bits+0x2a>
 8006512:	2010      	movs	r0, #16
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	f013 0fff 	tst.w	r3, #255	; 0xff
 800651a:	bf04      	itt	eq
 800651c:	0a1b      	lsreq	r3, r3, #8
 800651e:	3008      	addeq	r0, #8
 8006520:	0719      	lsls	r1, r3, #28
 8006522:	bf04      	itt	eq
 8006524:	091b      	lsreq	r3, r3, #4
 8006526:	3004      	addeq	r0, #4
 8006528:	0799      	lsls	r1, r3, #30
 800652a:	bf04      	itt	eq
 800652c:	089b      	lsreq	r3, r3, #2
 800652e:	3002      	addeq	r0, #2
 8006530:	07d9      	lsls	r1, r3, #31
 8006532:	d403      	bmi.n	800653c <__lo0bits+0x50>
 8006534:	085b      	lsrs	r3, r3, #1
 8006536:	f100 0001 	add.w	r0, r0, #1
 800653a:	d003      	beq.n	8006544 <__lo0bits+0x58>
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	4770      	bx	lr
 8006540:	2000      	movs	r0, #0
 8006542:	4770      	bx	lr
 8006544:	2020      	movs	r0, #32
 8006546:	4770      	bx	lr

08006548 <__i2b>:
 8006548:	b510      	push	{r4, lr}
 800654a:	460c      	mov	r4, r1
 800654c:	2101      	movs	r1, #1
 800654e:	f7ff ff01 	bl	8006354 <_Balloc>
 8006552:	4602      	mov	r2, r0
 8006554:	b928      	cbnz	r0, 8006562 <__i2b+0x1a>
 8006556:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800655a:	4b04      	ldr	r3, [pc, #16]	; (800656c <__i2b+0x24>)
 800655c:	4804      	ldr	r0, [pc, #16]	; (8006570 <__i2b+0x28>)
 800655e:	f000 fc9b 	bl	8006e98 <__assert_func>
 8006562:	2301      	movs	r3, #1
 8006564:	6144      	str	r4, [r0, #20]
 8006566:	6103      	str	r3, [r0, #16]
 8006568:	bd10      	pop	{r4, pc}
 800656a:	bf00      	nop
 800656c:	08007bab 	.word	0x08007bab
 8006570:	08007bbc 	.word	0x08007bbc

08006574 <__multiply>:
 8006574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006578:	4614      	mov	r4, r2
 800657a:	690a      	ldr	r2, [r1, #16]
 800657c:	6923      	ldr	r3, [r4, #16]
 800657e:	460d      	mov	r5, r1
 8006580:	429a      	cmp	r2, r3
 8006582:	bfbe      	ittt	lt
 8006584:	460b      	movlt	r3, r1
 8006586:	4625      	movlt	r5, r4
 8006588:	461c      	movlt	r4, r3
 800658a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800658e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006592:	68ab      	ldr	r3, [r5, #8]
 8006594:	6869      	ldr	r1, [r5, #4]
 8006596:	eb0a 0709 	add.w	r7, sl, r9
 800659a:	42bb      	cmp	r3, r7
 800659c:	b085      	sub	sp, #20
 800659e:	bfb8      	it	lt
 80065a0:	3101      	addlt	r1, #1
 80065a2:	f7ff fed7 	bl	8006354 <_Balloc>
 80065a6:	b930      	cbnz	r0, 80065b6 <__multiply+0x42>
 80065a8:	4602      	mov	r2, r0
 80065aa:	f240 115d 	movw	r1, #349	; 0x15d
 80065ae:	4b41      	ldr	r3, [pc, #260]	; (80066b4 <__multiply+0x140>)
 80065b0:	4841      	ldr	r0, [pc, #260]	; (80066b8 <__multiply+0x144>)
 80065b2:	f000 fc71 	bl	8006e98 <__assert_func>
 80065b6:	f100 0614 	add.w	r6, r0, #20
 80065ba:	4633      	mov	r3, r6
 80065bc:	2200      	movs	r2, #0
 80065be:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80065c2:	4543      	cmp	r3, r8
 80065c4:	d31e      	bcc.n	8006604 <__multiply+0x90>
 80065c6:	f105 0c14 	add.w	ip, r5, #20
 80065ca:	f104 0314 	add.w	r3, r4, #20
 80065ce:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80065d2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80065d6:	9202      	str	r2, [sp, #8]
 80065d8:	ebac 0205 	sub.w	r2, ip, r5
 80065dc:	3a15      	subs	r2, #21
 80065de:	f022 0203 	bic.w	r2, r2, #3
 80065e2:	3204      	adds	r2, #4
 80065e4:	f105 0115 	add.w	r1, r5, #21
 80065e8:	458c      	cmp	ip, r1
 80065ea:	bf38      	it	cc
 80065ec:	2204      	movcc	r2, #4
 80065ee:	9201      	str	r2, [sp, #4]
 80065f0:	9a02      	ldr	r2, [sp, #8]
 80065f2:	9303      	str	r3, [sp, #12]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d808      	bhi.n	800660a <__multiply+0x96>
 80065f8:	2f00      	cmp	r7, #0
 80065fa:	dc55      	bgt.n	80066a8 <__multiply+0x134>
 80065fc:	6107      	str	r7, [r0, #16]
 80065fe:	b005      	add	sp, #20
 8006600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006604:	f843 2b04 	str.w	r2, [r3], #4
 8006608:	e7db      	b.n	80065c2 <__multiply+0x4e>
 800660a:	f8b3 a000 	ldrh.w	sl, [r3]
 800660e:	f1ba 0f00 	cmp.w	sl, #0
 8006612:	d020      	beq.n	8006656 <__multiply+0xe2>
 8006614:	46b1      	mov	r9, r6
 8006616:	2200      	movs	r2, #0
 8006618:	f105 0e14 	add.w	lr, r5, #20
 800661c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006620:	f8d9 b000 	ldr.w	fp, [r9]
 8006624:	b2a1      	uxth	r1, r4
 8006626:	fa1f fb8b 	uxth.w	fp, fp
 800662a:	fb0a b101 	mla	r1, sl, r1, fp
 800662e:	4411      	add	r1, r2
 8006630:	f8d9 2000 	ldr.w	r2, [r9]
 8006634:	0c24      	lsrs	r4, r4, #16
 8006636:	0c12      	lsrs	r2, r2, #16
 8006638:	fb0a 2404 	mla	r4, sl, r4, r2
 800663c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006640:	b289      	uxth	r1, r1
 8006642:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006646:	45f4      	cmp	ip, lr
 8006648:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800664c:	f849 1b04 	str.w	r1, [r9], #4
 8006650:	d8e4      	bhi.n	800661c <__multiply+0xa8>
 8006652:	9901      	ldr	r1, [sp, #4]
 8006654:	5072      	str	r2, [r6, r1]
 8006656:	9a03      	ldr	r2, [sp, #12]
 8006658:	3304      	adds	r3, #4
 800665a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800665e:	f1b9 0f00 	cmp.w	r9, #0
 8006662:	d01f      	beq.n	80066a4 <__multiply+0x130>
 8006664:	46b6      	mov	lr, r6
 8006666:	f04f 0a00 	mov.w	sl, #0
 800666a:	6834      	ldr	r4, [r6, #0]
 800666c:	f105 0114 	add.w	r1, r5, #20
 8006670:	880a      	ldrh	r2, [r1, #0]
 8006672:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006676:	b2a4      	uxth	r4, r4
 8006678:	fb09 b202 	mla	r2, r9, r2, fp
 800667c:	4492      	add	sl, r2
 800667e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006682:	f84e 4b04 	str.w	r4, [lr], #4
 8006686:	f851 4b04 	ldr.w	r4, [r1], #4
 800668a:	f8be 2000 	ldrh.w	r2, [lr]
 800668e:	0c24      	lsrs	r4, r4, #16
 8006690:	fb09 2404 	mla	r4, r9, r4, r2
 8006694:	458c      	cmp	ip, r1
 8006696:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800669a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800669e:	d8e7      	bhi.n	8006670 <__multiply+0xfc>
 80066a0:	9a01      	ldr	r2, [sp, #4]
 80066a2:	50b4      	str	r4, [r6, r2]
 80066a4:	3604      	adds	r6, #4
 80066a6:	e7a3      	b.n	80065f0 <__multiply+0x7c>
 80066a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1a5      	bne.n	80065fc <__multiply+0x88>
 80066b0:	3f01      	subs	r7, #1
 80066b2:	e7a1      	b.n	80065f8 <__multiply+0x84>
 80066b4:	08007bab 	.word	0x08007bab
 80066b8:	08007bbc 	.word	0x08007bbc

080066bc <__pow5mult>:
 80066bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c0:	4615      	mov	r5, r2
 80066c2:	f012 0203 	ands.w	r2, r2, #3
 80066c6:	4606      	mov	r6, r0
 80066c8:	460f      	mov	r7, r1
 80066ca:	d007      	beq.n	80066dc <__pow5mult+0x20>
 80066cc:	4c25      	ldr	r4, [pc, #148]	; (8006764 <__pow5mult+0xa8>)
 80066ce:	3a01      	subs	r2, #1
 80066d0:	2300      	movs	r3, #0
 80066d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066d6:	f7ff fe9f 	bl	8006418 <__multadd>
 80066da:	4607      	mov	r7, r0
 80066dc:	10ad      	asrs	r5, r5, #2
 80066de:	d03d      	beq.n	800675c <__pow5mult+0xa0>
 80066e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066e2:	b97c      	cbnz	r4, 8006704 <__pow5mult+0x48>
 80066e4:	2010      	movs	r0, #16
 80066e6:	f7ff fe11 	bl	800630c <malloc>
 80066ea:	4602      	mov	r2, r0
 80066ec:	6270      	str	r0, [r6, #36]	; 0x24
 80066ee:	b928      	cbnz	r0, 80066fc <__pow5mult+0x40>
 80066f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80066f4:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <__pow5mult+0xac>)
 80066f6:	481d      	ldr	r0, [pc, #116]	; (800676c <__pow5mult+0xb0>)
 80066f8:	f000 fbce 	bl	8006e98 <__assert_func>
 80066fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006700:	6004      	str	r4, [r0, #0]
 8006702:	60c4      	str	r4, [r0, #12]
 8006704:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006708:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800670c:	b94c      	cbnz	r4, 8006722 <__pow5mult+0x66>
 800670e:	f240 2171 	movw	r1, #625	; 0x271
 8006712:	4630      	mov	r0, r6
 8006714:	f7ff ff18 	bl	8006548 <__i2b>
 8006718:	2300      	movs	r3, #0
 800671a:	4604      	mov	r4, r0
 800671c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006720:	6003      	str	r3, [r0, #0]
 8006722:	f04f 0900 	mov.w	r9, #0
 8006726:	07eb      	lsls	r3, r5, #31
 8006728:	d50a      	bpl.n	8006740 <__pow5mult+0x84>
 800672a:	4639      	mov	r1, r7
 800672c:	4622      	mov	r2, r4
 800672e:	4630      	mov	r0, r6
 8006730:	f7ff ff20 	bl	8006574 <__multiply>
 8006734:	4680      	mov	r8, r0
 8006736:	4639      	mov	r1, r7
 8006738:	4630      	mov	r0, r6
 800673a:	f7ff fe4b 	bl	80063d4 <_Bfree>
 800673e:	4647      	mov	r7, r8
 8006740:	106d      	asrs	r5, r5, #1
 8006742:	d00b      	beq.n	800675c <__pow5mult+0xa0>
 8006744:	6820      	ldr	r0, [r4, #0]
 8006746:	b938      	cbnz	r0, 8006758 <__pow5mult+0x9c>
 8006748:	4622      	mov	r2, r4
 800674a:	4621      	mov	r1, r4
 800674c:	4630      	mov	r0, r6
 800674e:	f7ff ff11 	bl	8006574 <__multiply>
 8006752:	6020      	str	r0, [r4, #0]
 8006754:	f8c0 9000 	str.w	r9, [r0]
 8006758:	4604      	mov	r4, r0
 800675a:	e7e4      	b.n	8006726 <__pow5mult+0x6a>
 800675c:	4638      	mov	r0, r7
 800675e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006762:	bf00      	nop
 8006764:	08007d10 	.word	0x08007d10
 8006768:	08007b35 	.word	0x08007b35
 800676c:	08007bbc 	.word	0x08007bbc

08006770 <__lshift>:
 8006770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	460c      	mov	r4, r1
 8006776:	4607      	mov	r7, r0
 8006778:	4691      	mov	r9, r2
 800677a:	6923      	ldr	r3, [r4, #16]
 800677c:	6849      	ldr	r1, [r1, #4]
 800677e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006782:	68a3      	ldr	r3, [r4, #8]
 8006784:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006788:	f108 0601 	add.w	r6, r8, #1
 800678c:	42b3      	cmp	r3, r6
 800678e:	db0b      	blt.n	80067a8 <__lshift+0x38>
 8006790:	4638      	mov	r0, r7
 8006792:	f7ff fddf 	bl	8006354 <_Balloc>
 8006796:	4605      	mov	r5, r0
 8006798:	b948      	cbnz	r0, 80067ae <__lshift+0x3e>
 800679a:	4602      	mov	r2, r0
 800679c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067a0:	4b27      	ldr	r3, [pc, #156]	; (8006840 <__lshift+0xd0>)
 80067a2:	4828      	ldr	r0, [pc, #160]	; (8006844 <__lshift+0xd4>)
 80067a4:	f000 fb78 	bl	8006e98 <__assert_func>
 80067a8:	3101      	adds	r1, #1
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	e7ee      	b.n	800678c <__lshift+0x1c>
 80067ae:	2300      	movs	r3, #0
 80067b0:	f100 0114 	add.w	r1, r0, #20
 80067b4:	f100 0210 	add.w	r2, r0, #16
 80067b8:	4618      	mov	r0, r3
 80067ba:	4553      	cmp	r3, sl
 80067bc:	db33      	blt.n	8006826 <__lshift+0xb6>
 80067be:	6920      	ldr	r0, [r4, #16]
 80067c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067c4:	f104 0314 	add.w	r3, r4, #20
 80067c8:	f019 091f 	ands.w	r9, r9, #31
 80067cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067d4:	d02b      	beq.n	800682e <__lshift+0xbe>
 80067d6:	468a      	mov	sl, r1
 80067d8:	2200      	movs	r2, #0
 80067da:	f1c9 0e20 	rsb	lr, r9, #32
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	fa00 f009 	lsl.w	r0, r0, r9
 80067e4:	4302      	orrs	r2, r0
 80067e6:	f84a 2b04 	str.w	r2, [sl], #4
 80067ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ee:	459c      	cmp	ip, r3
 80067f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80067f4:	d8f3      	bhi.n	80067de <__lshift+0x6e>
 80067f6:	ebac 0304 	sub.w	r3, ip, r4
 80067fa:	3b15      	subs	r3, #21
 80067fc:	f023 0303 	bic.w	r3, r3, #3
 8006800:	3304      	adds	r3, #4
 8006802:	f104 0015 	add.w	r0, r4, #21
 8006806:	4584      	cmp	ip, r0
 8006808:	bf38      	it	cc
 800680a:	2304      	movcc	r3, #4
 800680c:	50ca      	str	r2, [r1, r3]
 800680e:	b10a      	cbz	r2, 8006814 <__lshift+0xa4>
 8006810:	f108 0602 	add.w	r6, r8, #2
 8006814:	3e01      	subs	r6, #1
 8006816:	4638      	mov	r0, r7
 8006818:	4621      	mov	r1, r4
 800681a:	612e      	str	r6, [r5, #16]
 800681c:	f7ff fdda 	bl	80063d4 <_Bfree>
 8006820:	4628      	mov	r0, r5
 8006822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006826:	f842 0f04 	str.w	r0, [r2, #4]!
 800682a:	3301      	adds	r3, #1
 800682c:	e7c5      	b.n	80067ba <__lshift+0x4a>
 800682e:	3904      	subs	r1, #4
 8006830:	f853 2b04 	ldr.w	r2, [r3], #4
 8006834:	459c      	cmp	ip, r3
 8006836:	f841 2f04 	str.w	r2, [r1, #4]!
 800683a:	d8f9      	bhi.n	8006830 <__lshift+0xc0>
 800683c:	e7ea      	b.n	8006814 <__lshift+0xa4>
 800683e:	bf00      	nop
 8006840:	08007bab 	.word	0x08007bab
 8006844:	08007bbc 	.word	0x08007bbc

08006848 <__mcmp>:
 8006848:	4603      	mov	r3, r0
 800684a:	690a      	ldr	r2, [r1, #16]
 800684c:	6900      	ldr	r0, [r0, #16]
 800684e:	b530      	push	{r4, r5, lr}
 8006850:	1a80      	subs	r0, r0, r2
 8006852:	d10d      	bne.n	8006870 <__mcmp+0x28>
 8006854:	3314      	adds	r3, #20
 8006856:	3114      	adds	r1, #20
 8006858:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800685c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006860:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006864:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006868:	4295      	cmp	r5, r2
 800686a:	d002      	beq.n	8006872 <__mcmp+0x2a>
 800686c:	d304      	bcc.n	8006878 <__mcmp+0x30>
 800686e:	2001      	movs	r0, #1
 8006870:	bd30      	pop	{r4, r5, pc}
 8006872:	42a3      	cmp	r3, r4
 8006874:	d3f4      	bcc.n	8006860 <__mcmp+0x18>
 8006876:	e7fb      	b.n	8006870 <__mcmp+0x28>
 8006878:	f04f 30ff 	mov.w	r0, #4294967295
 800687c:	e7f8      	b.n	8006870 <__mcmp+0x28>
	...

08006880 <__mdiff>:
 8006880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	460c      	mov	r4, r1
 8006886:	4606      	mov	r6, r0
 8006888:	4611      	mov	r1, r2
 800688a:	4620      	mov	r0, r4
 800688c:	4692      	mov	sl, r2
 800688e:	f7ff ffdb 	bl	8006848 <__mcmp>
 8006892:	1e05      	subs	r5, r0, #0
 8006894:	d111      	bne.n	80068ba <__mdiff+0x3a>
 8006896:	4629      	mov	r1, r5
 8006898:	4630      	mov	r0, r6
 800689a:	f7ff fd5b 	bl	8006354 <_Balloc>
 800689e:	4602      	mov	r2, r0
 80068a0:	b928      	cbnz	r0, 80068ae <__mdiff+0x2e>
 80068a2:	f240 2132 	movw	r1, #562	; 0x232
 80068a6:	4b3c      	ldr	r3, [pc, #240]	; (8006998 <__mdiff+0x118>)
 80068a8:	483c      	ldr	r0, [pc, #240]	; (800699c <__mdiff+0x11c>)
 80068aa:	f000 faf5 	bl	8006e98 <__assert_func>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068b4:	4610      	mov	r0, r2
 80068b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ba:	bfa4      	itt	ge
 80068bc:	4653      	movge	r3, sl
 80068be:	46a2      	movge	sl, r4
 80068c0:	4630      	mov	r0, r6
 80068c2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80068c6:	bfa6      	itte	ge
 80068c8:	461c      	movge	r4, r3
 80068ca:	2500      	movge	r5, #0
 80068cc:	2501      	movlt	r5, #1
 80068ce:	f7ff fd41 	bl	8006354 <_Balloc>
 80068d2:	4602      	mov	r2, r0
 80068d4:	b918      	cbnz	r0, 80068de <__mdiff+0x5e>
 80068d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068da:	4b2f      	ldr	r3, [pc, #188]	; (8006998 <__mdiff+0x118>)
 80068dc:	e7e4      	b.n	80068a8 <__mdiff+0x28>
 80068de:	f100 0814 	add.w	r8, r0, #20
 80068e2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80068e6:	60c5      	str	r5, [r0, #12]
 80068e8:	f04f 0c00 	mov.w	ip, #0
 80068ec:	f10a 0514 	add.w	r5, sl, #20
 80068f0:	f10a 0010 	add.w	r0, sl, #16
 80068f4:	46c2      	mov	sl, r8
 80068f6:	6926      	ldr	r6, [r4, #16]
 80068f8:	f104 0914 	add.w	r9, r4, #20
 80068fc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006900:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006904:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006908:	f859 3b04 	ldr.w	r3, [r9], #4
 800690c:	fa1f f18b 	uxth.w	r1, fp
 8006910:	4461      	add	r1, ip
 8006912:	fa1f fc83 	uxth.w	ip, r3
 8006916:	0c1b      	lsrs	r3, r3, #16
 8006918:	eba1 010c 	sub.w	r1, r1, ip
 800691c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006920:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006924:	b289      	uxth	r1, r1
 8006926:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800692a:	454e      	cmp	r6, r9
 800692c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006930:	f84a 3b04 	str.w	r3, [sl], #4
 8006934:	d8e6      	bhi.n	8006904 <__mdiff+0x84>
 8006936:	1b33      	subs	r3, r6, r4
 8006938:	3b15      	subs	r3, #21
 800693a:	f023 0303 	bic.w	r3, r3, #3
 800693e:	3415      	adds	r4, #21
 8006940:	3304      	adds	r3, #4
 8006942:	42a6      	cmp	r6, r4
 8006944:	bf38      	it	cc
 8006946:	2304      	movcc	r3, #4
 8006948:	441d      	add	r5, r3
 800694a:	4443      	add	r3, r8
 800694c:	461e      	mov	r6, r3
 800694e:	462c      	mov	r4, r5
 8006950:	4574      	cmp	r4, lr
 8006952:	d30e      	bcc.n	8006972 <__mdiff+0xf2>
 8006954:	f10e 0103 	add.w	r1, lr, #3
 8006958:	1b49      	subs	r1, r1, r5
 800695a:	f021 0103 	bic.w	r1, r1, #3
 800695e:	3d03      	subs	r5, #3
 8006960:	45ae      	cmp	lr, r5
 8006962:	bf38      	it	cc
 8006964:	2100      	movcc	r1, #0
 8006966:	4419      	add	r1, r3
 8006968:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800696c:	b18b      	cbz	r3, 8006992 <__mdiff+0x112>
 800696e:	6117      	str	r7, [r2, #16]
 8006970:	e7a0      	b.n	80068b4 <__mdiff+0x34>
 8006972:	f854 8b04 	ldr.w	r8, [r4], #4
 8006976:	fa1f f188 	uxth.w	r1, r8
 800697a:	4461      	add	r1, ip
 800697c:	1408      	asrs	r0, r1, #16
 800697e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006982:	b289      	uxth	r1, r1
 8006984:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006988:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800698c:	f846 1b04 	str.w	r1, [r6], #4
 8006990:	e7de      	b.n	8006950 <__mdiff+0xd0>
 8006992:	3f01      	subs	r7, #1
 8006994:	e7e8      	b.n	8006968 <__mdiff+0xe8>
 8006996:	bf00      	nop
 8006998:	08007bab 	.word	0x08007bab
 800699c:	08007bbc 	.word	0x08007bbc

080069a0 <__d2b>:
 80069a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80069a4:	2101      	movs	r1, #1
 80069a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80069aa:	4690      	mov	r8, r2
 80069ac:	461d      	mov	r5, r3
 80069ae:	f7ff fcd1 	bl	8006354 <_Balloc>
 80069b2:	4604      	mov	r4, r0
 80069b4:	b930      	cbnz	r0, 80069c4 <__d2b+0x24>
 80069b6:	4602      	mov	r2, r0
 80069b8:	f240 310a 	movw	r1, #778	; 0x30a
 80069bc:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <__d2b+0xb0>)
 80069be:	4825      	ldr	r0, [pc, #148]	; (8006a54 <__d2b+0xb4>)
 80069c0:	f000 fa6a 	bl	8006e98 <__assert_func>
 80069c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80069c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80069cc:	bb2d      	cbnz	r5, 8006a1a <__d2b+0x7a>
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	f1b8 0300 	subs.w	r3, r8, #0
 80069d4:	d026      	beq.n	8006a24 <__d2b+0x84>
 80069d6:	4668      	mov	r0, sp
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	f7ff fd87 	bl	80064ec <__lo0bits>
 80069de:	9900      	ldr	r1, [sp, #0]
 80069e0:	b1f0      	cbz	r0, 8006a20 <__d2b+0x80>
 80069e2:	9a01      	ldr	r2, [sp, #4]
 80069e4:	f1c0 0320 	rsb	r3, r0, #32
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	430b      	orrs	r3, r1
 80069ee:	40c2      	lsrs	r2, r0
 80069f0:	6163      	str	r3, [r4, #20]
 80069f2:	9201      	str	r2, [sp, #4]
 80069f4:	9b01      	ldr	r3, [sp, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bf14      	ite	ne
 80069fa:	2102      	movne	r1, #2
 80069fc:	2101      	moveq	r1, #1
 80069fe:	61a3      	str	r3, [r4, #24]
 8006a00:	6121      	str	r1, [r4, #16]
 8006a02:	b1c5      	cbz	r5, 8006a36 <__d2b+0x96>
 8006a04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a08:	4405      	add	r5, r0
 8006a0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a0e:	603d      	str	r5, [r7, #0]
 8006a10:	6030      	str	r0, [r6, #0]
 8006a12:	4620      	mov	r0, r4
 8006a14:	b002      	add	sp, #8
 8006a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a1e:	e7d6      	b.n	80069ce <__d2b+0x2e>
 8006a20:	6161      	str	r1, [r4, #20]
 8006a22:	e7e7      	b.n	80069f4 <__d2b+0x54>
 8006a24:	a801      	add	r0, sp, #4
 8006a26:	f7ff fd61 	bl	80064ec <__lo0bits>
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	9b01      	ldr	r3, [sp, #4]
 8006a2e:	6121      	str	r1, [r4, #16]
 8006a30:	6163      	str	r3, [r4, #20]
 8006a32:	3020      	adds	r0, #32
 8006a34:	e7e5      	b.n	8006a02 <__d2b+0x62>
 8006a36:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006a3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a3e:	6038      	str	r0, [r7, #0]
 8006a40:	6918      	ldr	r0, [r3, #16]
 8006a42:	f7ff fd33 	bl	80064ac <__hi0bits>
 8006a46:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006a4a:	6031      	str	r1, [r6, #0]
 8006a4c:	e7e1      	b.n	8006a12 <__d2b+0x72>
 8006a4e:	bf00      	nop
 8006a50:	08007bab 	.word	0x08007bab
 8006a54:	08007bbc 	.word	0x08007bbc

08006a58 <_calloc_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	fb02 f501 	mul.w	r5, r2, r1
 8006a5e:	4629      	mov	r1, r5
 8006a60:	f000 f854 	bl	8006b0c <_malloc_r>
 8006a64:	4604      	mov	r4, r0
 8006a66:	b118      	cbz	r0, 8006a70 <_calloc_r+0x18>
 8006a68:	462a      	mov	r2, r5
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	f7fe f946 	bl	8004cfc <memset>
 8006a70:	4620      	mov	r0, r4
 8006a72:	bd38      	pop	{r3, r4, r5, pc}

08006a74 <_free_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4605      	mov	r5, r0
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	d043      	beq.n	8006b04 <_free_r+0x90>
 8006a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a80:	1f0c      	subs	r4, r1, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	bfb8      	it	lt
 8006a86:	18e4      	addlt	r4, r4, r3
 8006a88:	f000 fa62 	bl	8006f50 <__malloc_lock>
 8006a8c:	4a1e      	ldr	r2, [pc, #120]	; (8006b08 <_free_r+0x94>)
 8006a8e:	6813      	ldr	r3, [r2, #0]
 8006a90:	4610      	mov	r0, r2
 8006a92:	b933      	cbnz	r3, 8006aa2 <_free_r+0x2e>
 8006a94:	6063      	str	r3, [r4, #4]
 8006a96:	6014      	str	r4, [r2, #0]
 8006a98:	4628      	mov	r0, r5
 8006a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a9e:	f000 ba5d 	b.w	8006f5c <__malloc_unlock>
 8006aa2:	42a3      	cmp	r3, r4
 8006aa4:	d90a      	bls.n	8006abc <_free_r+0x48>
 8006aa6:	6821      	ldr	r1, [r4, #0]
 8006aa8:	1862      	adds	r2, r4, r1
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	bf01      	itttt	eq
 8006aae:	681a      	ldreq	r2, [r3, #0]
 8006ab0:	685b      	ldreq	r3, [r3, #4]
 8006ab2:	1852      	addeq	r2, r2, r1
 8006ab4:	6022      	streq	r2, [r4, #0]
 8006ab6:	6063      	str	r3, [r4, #4]
 8006ab8:	6004      	str	r4, [r0, #0]
 8006aba:	e7ed      	b.n	8006a98 <_free_r+0x24>
 8006abc:	461a      	mov	r2, r3
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	b10b      	cbz	r3, 8006ac6 <_free_r+0x52>
 8006ac2:	42a3      	cmp	r3, r4
 8006ac4:	d9fa      	bls.n	8006abc <_free_r+0x48>
 8006ac6:	6811      	ldr	r1, [r2, #0]
 8006ac8:	1850      	adds	r0, r2, r1
 8006aca:	42a0      	cmp	r0, r4
 8006acc:	d10b      	bne.n	8006ae6 <_free_r+0x72>
 8006ace:	6820      	ldr	r0, [r4, #0]
 8006ad0:	4401      	add	r1, r0
 8006ad2:	1850      	adds	r0, r2, r1
 8006ad4:	4283      	cmp	r3, r0
 8006ad6:	6011      	str	r1, [r2, #0]
 8006ad8:	d1de      	bne.n	8006a98 <_free_r+0x24>
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4401      	add	r1, r0
 8006ae0:	6011      	str	r1, [r2, #0]
 8006ae2:	6053      	str	r3, [r2, #4]
 8006ae4:	e7d8      	b.n	8006a98 <_free_r+0x24>
 8006ae6:	d902      	bls.n	8006aee <_free_r+0x7a>
 8006ae8:	230c      	movs	r3, #12
 8006aea:	602b      	str	r3, [r5, #0]
 8006aec:	e7d4      	b.n	8006a98 <_free_r+0x24>
 8006aee:	6820      	ldr	r0, [r4, #0]
 8006af0:	1821      	adds	r1, r4, r0
 8006af2:	428b      	cmp	r3, r1
 8006af4:	bf01      	itttt	eq
 8006af6:	6819      	ldreq	r1, [r3, #0]
 8006af8:	685b      	ldreq	r3, [r3, #4]
 8006afa:	1809      	addeq	r1, r1, r0
 8006afc:	6021      	streq	r1, [r4, #0]
 8006afe:	6063      	str	r3, [r4, #4]
 8006b00:	6054      	str	r4, [r2, #4]
 8006b02:	e7c9      	b.n	8006a98 <_free_r+0x24>
 8006b04:	bd38      	pop	{r3, r4, r5, pc}
 8006b06:	bf00      	nop
 8006b08:	20000e2c 	.word	0x20000e2c

08006b0c <_malloc_r>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	1ccd      	adds	r5, r1, #3
 8006b10:	f025 0503 	bic.w	r5, r5, #3
 8006b14:	3508      	adds	r5, #8
 8006b16:	2d0c      	cmp	r5, #12
 8006b18:	bf38      	it	cc
 8006b1a:	250c      	movcc	r5, #12
 8006b1c:	2d00      	cmp	r5, #0
 8006b1e:	4606      	mov	r6, r0
 8006b20:	db01      	blt.n	8006b26 <_malloc_r+0x1a>
 8006b22:	42a9      	cmp	r1, r5
 8006b24:	d903      	bls.n	8006b2e <_malloc_r+0x22>
 8006b26:	230c      	movs	r3, #12
 8006b28:	6033      	str	r3, [r6, #0]
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b2e:	f000 fa0f 	bl	8006f50 <__malloc_lock>
 8006b32:	4921      	ldr	r1, [pc, #132]	; (8006bb8 <_malloc_r+0xac>)
 8006b34:	680a      	ldr	r2, [r1, #0]
 8006b36:	4614      	mov	r4, r2
 8006b38:	b99c      	cbnz	r4, 8006b62 <_malloc_r+0x56>
 8006b3a:	4f20      	ldr	r7, [pc, #128]	; (8006bbc <_malloc_r+0xb0>)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	b923      	cbnz	r3, 8006b4a <_malloc_r+0x3e>
 8006b40:	4621      	mov	r1, r4
 8006b42:	4630      	mov	r0, r6
 8006b44:	f000 f998 	bl	8006e78 <_sbrk_r>
 8006b48:	6038      	str	r0, [r7, #0]
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f000 f993 	bl	8006e78 <_sbrk_r>
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	d123      	bne.n	8006b9e <_malloc_r+0x92>
 8006b56:	230c      	movs	r3, #12
 8006b58:	4630      	mov	r0, r6
 8006b5a:	6033      	str	r3, [r6, #0]
 8006b5c:	f000 f9fe 	bl	8006f5c <__malloc_unlock>
 8006b60:	e7e3      	b.n	8006b2a <_malloc_r+0x1e>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	1b5b      	subs	r3, r3, r5
 8006b66:	d417      	bmi.n	8006b98 <_malloc_r+0x8c>
 8006b68:	2b0b      	cmp	r3, #11
 8006b6a:	d903      	bls.n	8006b74 <_malloc_r+0x68>
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	441c      	add	r4, r3
 8006b70:	6025      	str	r5, [r4, #0]
 8006b72:	e004      	b.n	8006b7e <_malloc_r+0x72>
 8006b74:	6863      	ldr	r3, [r4, #4]
 8006b76:	42a2      	cmp	r2, r4
 8006b78:	bf0c      	ite	eq
 8006b7a:	600b      	streq	r3, [r1, #0]
 8006b7c:	6053      	strne	r3, [r2, #4]
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f000 f9ec 	bl	8006f5c <__malloc_unlock>
 8006b84:	f104 000b 	add.w	r0, r4, #11
 8006b88:	1d23      	adds	r3, r4, #4
 8006b8a:	f020 0007 	bic.w	r0, r0, #7
 8006b8e:	1ac2      	subs	r2, r0, r3
 8006b90:	d0cc      	beq.n	8006b2c <_malloc_r+0x20>
 8006b92:	1a1b      	subs	r3, r3, r0
 8006b94:	50a3      	str	r3, [r4, r2]
 8006b96:	e7c9      	b.n	8006b2c <_malloc_r+0x20>
 8006b98:	4622      	mov	r2, r4
 8006b9a:	6864      	ldr	r4, [r4, #4]
 8006b9c:	e7cc      	b.n	8006b38 <_malloc_r+0x2c>
 8006b9e:	1cc4      	adds	r4, r0, #3
 8006ba0:	f024 0403 	bic.w	r4, r4, #3
 8006ba4:	42a0      	cmp	r0, r4
 8006ba6:	d0e3      	beq.n	8006b70 <_malloc_r+0x64>
 8006ba8:	1a21      	subs	r1, r4, r0
 8006baa:	4630      	mov	r0, r6
 8006bac:	f000 f964 	bl	8006e78 <_sbrk_r>
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d1dd      	bne.n	8006b70 <_malloc_r+0x64>
 8006bb4:	e7cf      	b.n	8006b56 <_malloc_r+0x4a>
 8006bb6:	bf00      	nop
 8006bb8:	20000e2c 	.word	0x20000e2c
 8006bbc:	20000e30 	.word	0x20000e30

08006bc0 <__ssputs_r>:
 8006bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc4:	688e      	ldr	r6, [r1, #8]
 8006bc6:	4682      	mov	sl, r0
 8006bc8:	429e      	cmp	r6, r3
 8006bca:	460c      	mov	r4, r1
 8006bcc:	4690      	mov	r8, r2
 8006bce:	461f      	mov	r7, r3
 8006bd0:	d838      	bhi.n	8006c44 <__ssputs_r+0x84>
 8006bd2:	898a      	ldrh	r2, [r1, #12]
 8006bd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bd8:	d032      	beq.n	8006c40 <__ssputs_r+0x80>
 8006bda:	6825      	ldr	r5, [r4, #0]
 8006bdc:	6909      	ldr	r1, [r1, #16]
 8006bde:	3301      	adds	r3, #1
 8006be0:	eba5 0901 	sub.w	r9, r5, r1
 8006be4:	6965      	ldr	r5, [r4, #20]
 8006be6:	444b      	add	r3, r9
 8006be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bf0:	106d      	asrs	r5, r5, #1
 8006bf2:	429d      	cmp	r5, r3
 8006bf4:	bf38      	it	cc
 8006bf6:	461d      	movcc	r5, r3
 8006bf8:	0553      	lsls	r3, r2, #21
 8006bfa:	d531      	bpl.n	8006c60 <__ssputs_r+0xa0>
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	f7ff ff85 	bl	8006b0c <_malloc_r>
 8006c02:	4606      	mov	r6, r0
 8006c04:	b950      	cbnz	r0, 8006c1c <__ssputs_r+0x5c>
 8006c06:	230c      	movs	r3, #12
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	f8ca 3000 	str.w	r3, [sl]
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1c:	464a      	mov	r2, r9
 8006c1e:	6921      	ldr	r1, [r4, #16]
 8006c20:	f7ff fb8a 	bl	8006338 <memcpy>
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	6126      	str	r6, [r4, #16]
 8006c32:	444e      	add	r6, r9
 8006c34:	6026      	str	r6, [r4, #0]
 8006c36:	463e      	mov	r6, r7
 8006c38:	6165      	str	r5, [r4, #20]
 8006c3a:	eba5 0509 	sub.w	r5, r5, r9
 8006c3e:	60a5      	str	r5, [r4, #8]
 8006c40:	42be      	cmp	r6, r7
 8006c42:	d900      	bls.n	8006c46 <__ssputs_r+0x86>
 8006c44:	463e      	mov	r6, r7
 8006c46:	4632      	mov	r2, r6
 8006c48:	4641      	mov	r1, r8
 8006c4a:	6820      	ldr	r0, [r4, #0]
 8006c4c:	f000 f966 	bl	8006f1c <memmove>
 8006c50:	68a3      	ldr	r3, [r4, #8]
 8006c52:	6822      	ldr	r2, [r4, #0]
 8006c54:	1b9b      	subs	r3, r3, r6
 8006c56:	4432      	add	r2, r6
 8006c58:	2000      	movs	r0, #0
 8006c5a:	60a3      	str	r3, [r4, #8]
 8006c5c:	6022      	str	r2, [r4, #0]
 8006c5e:	e7db      	b.n	8006c18 <__ssputs_r+0x58>
 8006c60:	462a      	mov	r2, r5
 8006c62:	f000 f981 	bl	8006f68 <_realloc_r>
 8006c66:	4606      	mov	r6, r0
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d1e1      	bne.n	8006c30 <__ssputs_r+0x70>
 8006c6c:	4650      	mov	r0, sl
 8006c6e:	6921      	ldr	r1, [r4, #16]
 8006c70:	f7ff ff00 	bl	8006a74 <_free_r>
 8006c74:	e7c7      	b.n	8006c06 <__ssputs_r+0x46>
	...

08006c78 <_svfiprintf_r>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	4698      	mov	r8, r3
 8006c7e:	898b      	ldrh	r3, [r1, #12]
 8006c80:	4607      	mov	r7, r0
 8006c82:	061b      	lsls	r3, r3, #24
 8006c84:	460d      	mov	r5, r1
 8006c86:	4614      	mov	r4, r2
 8006c88:	b09d      	sub	sp, #116	; 0x74
 8006c8a:	d50e      	bpl.n	8006caa <_svfiprintf_r+0x32>
 8006c8c:	690b      	ldr	r3, [r1, #16]
 8006c8e:	b963      	cbnz	r3, 8006caa <_svfiprintf_r+0x32>
 8006c90:	2140      	movs	r1, #64	; 0x40
 8006c92:	f7ff ff3b 	bl	8006b0c <_malloc_r>
 8006c96:	6028      	str	r0, [r5, #0]
 8006c98:	6128      	str	r0, [r5, #16]
 8006c9a:	b920      	cbnz	r0, 8006ca6 <_svfiprintf_r+0x2e>
 8006c9c:	230c      	movs	r3, #12
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	e0d1      	b.n	8006e4a <_svfiprintf_r+0x1d2>
 8006ca6:	2340      	movs	r3, #64	; 0x40
 8006ca8:	616b      	str	r3, [r5, #20]
 8006caa:	2300      	movs	r3, #0
 8006cac:	9309      	str	r3, [sp, #36]	; 0x24
 8006cae:	2320      	movs	r3, #32
 8006cb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cb4:	2330      	movs	r3, #48	; 0x30
 8006cb6:	f04f 0901 	mov.w	r9, #1
 8006cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e64 <_svfiprintf_r+0x1ec>
 8006cc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cc6:	4623      	mov	r3, r4
 8006cc8:	469a      	mov	sl, r3
 8006cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cce:	b10a      	cbz	r2, 8006cd4 <_svfiprintf_r+0x5c>
 8006cd0:	2a25      	cmp	r2, #37	; 0x25
 8006cd2:	d1f9      	bne.n	8006cc8 <_svfiprintf_r+0x50>
 8006cd4:	ebba 0b04 	subs.w	fp, sl, r4
 8006cd8:	d00b      	beq.n	8006cf2 <_svfiprintf_r+0x7a>
 8006cda:	465b      	mov	r3, fp
 8006cdc:	4622      	mov	r2, r4
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	f7ff ff6d 	bl	8006bc0 <__ssputs_r>
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	f000 80aa 	beq.w	8006e40 <_svfiprintf_r+0x1c8>
 8006cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cee:	445a      	add	r2, fp
 8006cf0:	9209      	str	r2, [sp, #36]	; 0x24
 8006cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 80a2 	beq.w	8006e40 <_svfiprintf_r+0x1c8>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006d02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d06:	f10a 0a01 	add.w	sl, sl, #1
 8006d0a:	9304      	str	r3, [sp, #16]
 8006d0c:	9307      	str	r3, [sp, #28]
 8006d0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d12:	931a      	str	r3, [sp, #104]	; 0x68
 8006d14:	4654      	mov	r4, sl
 8006d16:	2205      	movs	r2, #5
 8006d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d1c:	4851      	ldr	r0, [pc, #324]	; (8006e64 <_svfiprintf_r+0x1ec>)
 8006d1e:	f7ff fafd 	bl	800631c <memchr>
 8006d22:	9a04      	ldr	r2, [sp, #16]
 8006d24:	b9d8      	cbnz	r0, 8006d5e <_svfiprintf_r+0xe6>
 8006d26:	06d0      	lsls	r0, r2, #27
 8006d28:	bf44      	itt	mi
 8006d2a:	2320      	movmi	r3, #32
 8006d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d30:	0711      	lsls	r1, r2, #28
 8006d32:	bf44      	itt	mi
 8006d34:	232b      	movmi	r3, #43	; 0x2b
 8006d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d40:	d015      	beq.n	8006d6e <_svfiprintf_r+0xf6>
 8006d42:	4654      	mov	r4, sl
 8006d44:	2000      	movs	r0, #0
 8006d46:	f04f 0c0a 	mov.w	ip, #10
 8006d4a:	9a07      	ldr	r2, [sp, #28]
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d52:	3b30      	subs	r3, #48	; 0x30
 8006d54:	2b09      	cmp	r3, #9
 8006d56:	d94e      	bls.n	8006df6 <_svfiprintf_r+0x17e>
 8006d58:	b1b0      	cbz	r0, 8006d88 <_svfiprintf_r+0x110>
 8006d5a:	9207      	str	r2, [sp, #28]
 8006d5c:	e014      	b.n	8006d88 <_svfiprintf_r+0x110>
 8006d5e:	eba0 0308 	sub.w	r3, r0, r8
 8006d62:	fa09 f303 	lsl.w	r3, r9, r3
 8006d66:	4313      	orrs	r3, r2
 8006d68:	46a2      	mov	sl, r4
 8006d6a:	9304      	str	r3, [sp, #16]
 8006d6c:	e7d2      	b.n	8006d14 <_svfiprintf_r+0x9c>
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	1d19      	adds	r1, r3, #4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	9103      	str	r1, [sp, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bfbb      	ittet	lt
 8006d7a:	425b      	neglt	r3, r3
 8006d7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d80:	9307      	strge	r3, [sp, #28]
 8006d82:	9307      	strlt	r3, [sp, #28]
 8006d84:	bfb8      	it	lt
 8006d86:	9204      	strlt	r2, [sp, #16]
 8006d88:	7823      	ldrb	r3, [r4, #0]
 8006d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d8c:	d10c      	bne.n	8006da8 <_svfiprintf_r+0x130>
 8006d8e:	7863      	ldrb	r3, [r4, #1]
 8006d90:	2b2a      	cmp	r3, #42	; 0x2a
 8006d92:	d135      	bne.n	8006e00 <_svfiprintf_r+0x188>
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	3402      	adds	r4, #2
 8006d98:	1d1a      	adds	r2, r3, #4
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	9203      	str	r2, [sp, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bfb8      	it	lt
 8006da2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006da6:	9305      	str	r3, [sp, #20]
 8006da8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e74 <_svfiprintf_r+0x1fc>
 8006dac:	2203      	movs	r2, #3
 8006dae:	4650      	mov	r0, sl
 8006db0:	7821      	ldrb	r1, [r4, #0]
 8006db2:	f7ff fab3 	bl	800631c <memchr>
 8006db6:	b140      	cbz	r0, 8006dca <_svfiprintf_r+0x152>
 8006db8:	2340      	movs	r3, #64	; 0x40
 8006dba:	eba0 000a 	sub.w	r0, r0, sl
 8006dbe:	fa03 f000 	lsl.w	r0, r3, r0
 8006dc2:	9b04      	ldr	r3, [sp, #16]
 8006dc4:	3401      	adds	r4, #1
 8006dc6:	4303      	orrs	r3, r0
 8006dc8:	9304      	str	r3, [sp, #16]
 8006dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dce:	2206      	movs	r2, #6
 8006dd0:	4825      	ldr	r0, [pc, #148]	; (8006e68 <_svfiprintf_r+0x1f0>)
 8006dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dd6:	f7ff faa1 	bl	800631c <memchr>
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d038      	beq.n	8006e50 <_svfiprintf_r+0x1d8>
 8006dde:	4b23      	ldr	r3, [pc, #140]	; (8006e6c <_svfiprintf_r+0x1f4>)
 8006de0:	bb1b      	cbnz	r3, 8006e2a <_svfiprintf_r+0x1b2>
 8006de2:	9b03      	ldr	r3, [sp, #12]
 8006de4:	3307      	adds	r3, #7
 8006de6:	f023 0307 	bic.w	r3, r3, #7
 8006dea:	3308      	adds	r3, #8
 8006dec:	9303      	str	r3, [sp, #12]
 8006dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df0:	4433      	add	r3, r6
 8006df2:	9309      	str	r3, [sp, #36]	; 0x24
 8006df4:	e767      	b.n	8006cc6 <_svfiprintf_r+0x4e>
 8006df6:	460c      	mov	r4, r1
 8006df8:	2001      	movs	r0, #1
 8006dfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dfe:	e7a5      	b.n	8006d4c <_svfiprintf_r+0xd4>
 8006e00:	2300      	movs	r3, #0
 8006e02:	f04f 0c0a 	mov.w	ip, #10
 8006e06:	4619      	mov	r1, r3
 8006e08:	3401      	adds	r4, #1
 8006e0a:	9305      	str	r3, [sp, #20]
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e12:	3a30      	subs	r2, #48	; 0x30
 8006e14:	2a09      	cmp	r2, #9
 8006e16:	d903      	bls.n	8006e20 <_svfiprintf_r+0x1a8>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0c5      	beq.n	8006da8 <_svfiprintf_r+0x130>
 8006e1c:	9105      	str	r1, [sp, #20]
 8006e1e:	e7c3      	b.n	8006da8 <_svfiprintf_r+0x130>
 8006e20:	4604      	mov	r4, r0
 8006e22:	2301      	movs	r3, #1
 8006e24:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e28:	e7f0      	b.n	8006e0c <_svfiprintf_r+0x194>
 8006e2a:	ab03      	add	r3, sp, #12
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	462a      	mov	r2, r5
 8006e30:	4638      	mov	r0, r7
 8006e32:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <_svfiprintf_r+0x1f8>)
 8006e34:	a904      	add	r1, sp, #16
 8006e36:	f7fe f807 	bl	8004e48 <_printf_float>
 8006e3a:	1c42      	adds	r2, r0, #1
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	d1d6      	bne.n	8006dee <_svfiprintf_r+0x176>
 8006e40:	89ab      	ldrh	r3, [r5, #12]
 8006e42:	065b      	lsls	r3, r3, #25
 8006e44:	f53f af2c 	bmi.w	8006ca0 <_svfiprintf_r+0x28>
 8006e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e4a:	b01d      	add	sp, #116	; 0x74
 8006e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e50:	ab03      	add	r3, sp, #12
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	462a      	mov	r2, r5
 8006e56:	4638      	mov	r0, r7
 8006e58:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <_svfiprintf_r+0x1f8>)
 8006e5a:	a904      	add	r1, sp, #16
 8006e5c:	f7fe fa90 	bl	8005380 <_printf_i>
 8006e60:	e7eb      	b.n	8006e3a <_svfiprintf_r+0x1c2>
 8006e62:	bf00      	nop
 8006e64:	08007d1c 	.word	0x08007d1c
 8006e68:	08007d26 	.word	0x08007d26
 8006e6c:	08004e49 	.word	0x08004e49
 8006e70:	08006bc1 	.word	0x08006bc1
 8006e74:	08007d22 	.word	0x08007d22

08006e78 <_sbrk_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4d05      	ldr	r5, [pc, #20]	; (8006e94 <_sbrk_r+0x1c>)
 8006e7e:	4604      	mov	r4, r0
 8006e80:	4608      	mov	r0, r1
 8006e82:	602b      	str	r3, [r5, #0]
 8006e84:	f7fb fde2 	bl	8002a4c <_sbrk>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d102      	bne.n	8006e92 <_sbrk_r+0x1a>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	b103      	cbz	r3, 8006e92 <_sbrk_r+0x1a>
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	bd38      	pop	{r3, r4, r5, pc}
 8006e94:	20001950 	.word	0x20001950

08006e98 <__assert_func>:
 8006e98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e9a:	4614      	mov	r4, r2
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <__assert_func+0x2c>)
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68d8      	ldr	r0, [r3, #12]
 8006ea6:	b14c      	cbz	r4, 8006ebc <__assert_func+0x24>
 8006ea8:	4b07      	ldr	r3, [pc, #28]	; (8006ec8 <__assert_func+0x30>)
 8006eaa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006eae:	9100      	str	r1, [sp, #0]
 8006eb0:	462b      	mov	r3, r5
 8006eb2:	4906      	ldr	r1, [pc, #24]	; (8006ecc <__assert_func+0x34>)
 8006eb4:	f000 f80e 	bl	8006ed4 <fiprintf>
 8006eb8:	f000 faa2 	bl	8007400 <abort>
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <__assert_func+0x38>)
 8006ebe:	461c      	mov	r4, r3
 8006ec0:	e7f3      	b.n	8006eaa <__assert_func+0x12>
 8006ec2:	bf00      	nop
 8006ec4:	2000000c 	.word	0x2000000c
 8006ec8:	08007d2d 	.word	0x08007d2d
 8006ecc:	08007d3a 	.word	0x08007d3a
 8006ed0:	08007d68 	.word	0x08007d68

08006ed4 <fiprintf>:
 8006ed4:	b40e      	push	{r1, r2, r3}
 8006ed6:	b503      	push	{r0, r1, lr}
 8006ed8:	4601      	mov	r1, r0
 8006eda:	ab03      	add	r3, sp, #12
 8006edc:	4805      	ldr	r0, [pc, #20]	; (8006ef4 <fiprintf+0x20>)
 8006ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee2:	6800      	ldr	r0, [r0, #0]
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	f000 f88d 	bl	8007004 <_vfiprintf_r>
 8006eea:	b002      	add	sp, #8
 8006eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ef0:	b003      	add	sp, #12
 8006ef2:	4770      	bx	lr
 8006ef4:	2000000c 	.word	0x2000000c

08006ef8 <__ascii_mbtowc>:
 8006ef8:	b082      	sub	sp, #8
 8006efa:	b901      	cbnz	r1, 8006efe <__ascii_mbtowc+0x6>
 8006efc:	a901      	add	r1, sp, #4
 8006efe:	b142      	cbz	r2, 8006f12 <__ascii_mbtowc+0x1a>
 8006f00:	b14b      	cbz	r3, 8006f16 <__ascii_mbtowc+0x1e>
 8006f02:	7813      	ldrb	r3, [r2, #0]
 8006f04:	600b      	str	r3, [r1, #0]
 8006f06:	7812      	ldrb	r2, [r2, #0]
 8006f08:	1e10      	subs	r0, r2, #0
 8006f0a:	bf18      	it	ne
 8006f0c:	2001      	movne	r0, #1
 8006f0e:	b002      	add	sp, #8
 8006f10:	4770      	bx	lr
 8006f12:	4610      	mov	r0, r2
 8006f14:	e7fb      	b.n	8006f0e <__ascii_mbtowc+0x16>
 8006f16:	f06f 0001 	mvn.w	r0, #1
 8006f1a:	e7f8      	b.n	8006f0e <__ascii_mbtowc+0x16>

08006f1c <memmove>:
 8006f1c:	4288      	cmp	r0, r1
 8006f1e:	b510      	push	{r4, lr}
 8006f20:	eb01 0402 	add.w	r4, r1, r2
 8006f24:	d902      	bls.n	8006f2c <memmove+0x10>
 8006f26:	4284      	cmp	r4, r0
 8006f28:	4623      	mov	r3, r4
 8006f2a:	d807      	bhi.n	8006f3c <memmove+0x20>
 8006f2c:	1e43      	subs	r3, r0, #1
 8006f2e:	42a1      	cmp	r1, r4
 8006f30:	d008      	beq.n	8006f44 <memmove+0x28>
 8006f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f3a:	e7f8      	b.n	8006f2e <memmove+0x12>
 8006f3c:	4601      	mov	r1, r0
 8006f3e:	4402      	add	r2, r0
 8006f40:	428a      	cmp	r2, r1
 8006f42:	d100      	bne.n	8006f46 <memmove+0x2a>
 8006f44:	bd10      	pop	{r4, pc}
 8006f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f4e:	e7f7      	b.n	8006f40 <memmove+0x24>

08006f50 <__malloc_lock>:
 8006f50:	4801      	ldr	r0, [pc, #4]	; (8006f58 <__malloc_lock+0x8>)
 8006f52:	f000 bc15 	b.w	8007780 <__retarget_lock_acquire_recursive>
 8006f56:	bf00      	nop
 8006f58:	20001958 	.word	0x20001958

08006f5c <__malloc_unlock>:
 8006f5c:	4801      	ldr	r0, [pc, #4]	; (8006f64 <__malloc_unlock+0x8>)
 8006f5e:	f000 bc10 	b.w	8007782 <__retarget_lock_release_recursive>
 8006f62:	bf00      	nop
 8006f64:	20001958 	.word	0x20001958

08006f68 <_realloc_r>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	460e      	mov	r6, r1
 8006f70:	b921      	cbnz	r1, 8006f7c <_realloc_r+0x14>
 8006f72:	4611      	mov	r1, r2
 8006f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f78:	f7ff bdc8 	b.w	8006b0c <_malloc_r>
 8006f7c:	b922      	cbnz	r2, 8006f88 <_realloc_r+0x20>
 8006f7e:	f7ff fd79 	bl	8006a74 <_free_r>
 8006f82:	4625      	mov	r5, r4
 8006f84:	4628      	mov	r0, r5
 8006f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f88:	f000 fc60 	bl	800784c <_malloc_usable_size_r>
 8006f8c:	42a0      	cmp	r0, r4
 8006f8e:	d20f      	bcs.n	8006fb0 <_realloc_r+0x48>
 8006f90:	4621      	mov	r1, r4
 8006f92:	4638      	mov	r0, r7
 8006f94:	f7ff fdba 	bl	8006b0c <_malloc_r>
 8006f98:	4605      	mov	r5, r0
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d0f2      	beq.n	8006f84 <_realloc_r+0x1c>
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4622      	mov	r2, r4
 8006fa2:	f7ff f9c9 	bl	8006338 <memcpy>
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	4638      	mov	r0, r7
 8006faa:	f7ff fd63 	bl	8006a74 <_free_r>
 8006fae:	e7e9      	b.n	8006f84 <_realloc_r+0x1c>
 8006fb0:	4635      	mov	r5, r6
 8006fb2:	e7e7      	b.n	8006f84 <_realloc_r+0x1c>

08006fb4 <__sfputc_r>:
 8006fb4:	6893      	ldr	r3, [r2, #8]
 8006fb6:	b410      	push	{r4}
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	6093      	str	r3, [r2, #8]
 8006fbe:	da07      	bge.n	8006fd0 <__sfputc_r+0x1c>
 8006fc0:	6994      	ldr	r4, [r2, #24]
 8006fc2:	42a3      	cmp	r3, r4
 8006fc4:	db01      	blt.n	8006fca <__sfputc_r+0x16>
 8006fc6:	290a      	cmp	r1, #10
 8006fc8:	d102      	bne.n	8006fd0 <__sfputc_r+0x1c>
 8006fca:	bc10      	pop	{r4}
 8006fcc:	f000 b94a 	b.w	8007264 <__swbuf_r>
 8006fd0:	6813      	ldr	r3, [r2, #0]
 8006fd2:	1c58      	adds	r0, r3, #1
 8006fd4:	6010      	str	r0, [r2, #0]
 8006fd6:	7019      	strb	r1, [r3, #0]
 8006fd8:	4608      	mov	r0, r1
 8006fda:	bc10      	pop	{r4}
 8006fdc:	4770      	bx	lr

08006fde <__sfputs_r>:
 8006fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	460f      	mov	r7, r1
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	18d5      	adds	r5, r2, r3
 8006fe8:	42ac      	cmp	r4, r5
 8006fea:	d101      	bne.n	8006ff0 <__sfputs_r+0x12>
 8006fec:	2000      	movs	r0, #0
 8006fee:	e007      	b.n	8007000 <__sfputs_r+0x22>
 8006ff0:	463a      	mov	r2, r7
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff8:	f7ff ffdc 	bl	8006fb4 <__sfputc_r>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d1f3      	bne.n	8006fe8 <__sfputs_r+0xa>
 8007000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007004 <_vfiprintf_r>:
 8007004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	460d      	mov	r5, r1
 800700a:	4614      	mov	r4, r2
 800700c:	4698      	mov	r8, r3
 800700e:	4606      	mov	r6, r0
 8007010:	b09d      	sub	sp, #116	; 0x74
 8007012:	b118      	cbz	r0, 800701c <_vfiprintf_r+0x18>
 8007014:	6983      	ldr	r3, [r0, #24]
 8007016:	b90b      	cbnz	r3, 800701c <_vfiprintf_r+0x18>
 8007018:	f000 fb14 	bl	8007644 <__sinit>
 800701c:	4b89      	ldr	r3, [pc, #548]	; (8007244 <_vfiprintf_r+0x240>)
 800701e:	429d      	cmp	r5, r3
 8007020:	d11b      	bne.n	800705a <_vfiprintf_r+0x56>
 8007022:	6875      	ldr	r5, [r6, #4]
 8007024:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007026:	07d9      	lsls	r1, r3, #31
 8007028:	d405      	bmi.n	8007036 <_vfiprintf_r+0x32>
 800702a:	89ab      	ldrh	r3, [r5, #12]
 800702c:	059a      	lsls	r2, r3, #22
 800702e:	d402      	bmi.n	8007036 <_vfiprintf_r+0x32>
 8007030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007032:	f000 fba5 	bl	8007780 <__retarget_lock_acquire_recursive>
 8007036:	89ab      	ldrh	r3, [r5, #12]
 8007038:	071b      	lsls	r3, r3, #28
 800703a:	d501      	bpl.n	8007040 <_vfiprintf_r+0x3c>
 800703c:	692b      	ldr	r3, [r5, #16]
 800703e:	b9eb      	cbnz	r3, 800707c <_vfiprintf_r+0x78>
 8007040:	4629      	mov	r1, r5
 8007042:	4630      	mov	r0, r6
 8007044:	f000 f96e 	bl	8007324 <__swsetup_r>
 8007048:	b1c0      	cbz	r0, 800707c <_vfiprintf_r+0x78>
 800704a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800704c:	07dc      	lsls	r4, r3, #31
 800704e:	d50e      	bpl.n	800706e <_vfiprintf_r+0x6a>
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	b01d      	add	sp, #116	; 0x74
 8007056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705a:	4b7b      	ldr	r3, [pc, #492]	; (8007248 <_vfiprintf_r+0x244>)
 800705c:	429d      	cmp	r5, r3
 800705e:	d101      	bne.n	8007064 <_vfiprintf_r+0x60>
 8007060:	68b5      	ldr	r5, [r6, #8]
 8007062:	e7df      	b.n	8007024 <_vfiprintf_r+0x20>
 8007064:	4b79      	ldr	r3, [pc, #484]	; (800724c <_vfiprintf_r+0x248>)
 8007066:	429d      	cmp	r5, r3
 8007068:	bf08      	it	eq
 800706a:	68f5      	ldreq	r5, [r6, #12]
 800706c:	e7da      	b.n	8007024 <_vfiprintf_r+0x20>
 800706e:	89ab      	ldrh	r3, [r5, #12]
 8007070:	0598      	lsls	r0, r3, #22
 8007072:	d4ed      	bmi.n	8007050 <_vfiprintf_r+0x4c>
 8007074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007076:	f000 fb84 	bl	8007782 <__retarget_lock_release_recursive>
 800707a:	e7e9      	b.n	8007050 <_vfiprintf_r+0x4c>
 800707c:	2300      	movs	r3, #0
 800707e:	9309      	str	r3, [sp, #36]	; 0x24
 8007080:	2320      	movs	r3, #32
 8007082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007086:	2330      	movs	r3, #48	; 0x30
 8007088:	f04f 0901 	mov.w	r9, #1
 800708c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007090:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007250 <_vfiprintf_r+0x24c>
 8007094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007098:	4623      	mov	r3, r4
 800709a:	469a      	mov	sl, r3
 800709c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070a0:	b10a      	cbz	r2, 80070a6 <_vfiprintf_r+0xa2>
 80070a2:	2a25      	cmp	r2, #37	; 0x25
 80070a4:	d1f9      	bne.n	800709a <_vfiprintf_r+0x96>
 80070a6:	ebba 0b04 	subs.w	fp, sl, r4
 80070aa:	d00b      	beq.n	80070c4 <_vfiprintf_r+0xc0>
 80070ac:	465b      	mov	r3, fp
 80070ae:	4622      	mov	r2, r4
 80070b0:	4629      	mov	r1, r5
 80070b2:	4630      	mov	r0, r6
 80070b4:	f7ff ff93 	bl	8006fde <__sfputs_r>
 80070b8:	3001      	adds	r0, #1
 80070ba:	f000 80aa 	beq.w	8007212 <_vfiprintf_r+0x20e>
 80070be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070c0:	445a      	add	r2, fp
 80070c2:	9209      	str	r2, [sp, #36]	; 0x24
 80070c4:	f89a 3000 	ldrb.w	r3, [sl]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 80a2 	beq.w	8007212 <_vfiprintf_r+0x20e>
 80070ce:	2300      	movs	r3, #0
 80070d0:	f04f 32ff 	mov.w	r2, #4294967295
 80070d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070d8:	f10a 0a01 	add.w	sl, sl, #1
 80070dc:	9304      	str	r3, [sp, #16]
 80070de:	9307      	str	r3, [sp, #28]
 80070e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070e4:	931a      	str	r3, [sp, #104]	; 0x68
 80070e6:	4654      	mov	r4, sl
 80070e8:	2205      	movs	r2, #5
 80070ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ee:	4858      	ldr	r0, [pc, #352]	; (8007250 <_vfiprintf_r+0x24c>)
 80070f0:	f7ff f914 	bl	800631c <memchr>
 80070f4:	9a04      	ldr	r2, [sp, #16]
 80070f6:	b9d8      	cbnz	r0, 8007130 <_vfiprintf_r+0x12c>
 80070f8:	06d1      	lsls	r1, r2, #27
 80070fa:	bf44      	itt	mi
 80070fc:	2320      	movmi	r3, #32
 80070fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007102:	0713      	lsls	r3, r2, #28
 8007104:	bf44      	itt	mi
 8007106:	232b      	movmi	r3, #43	; 0x2b
 8007108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800710c:	f89a 3000 	ldrb.w	r3, [sl]
 8007110:	2b2a      	cmp	r3, #42	; 0x2a
 8007112:	d015      	beq.n	8007140 <_vfiprintf_r+0x13c>
 8007114:	4654      	mov	r4, sl
 8007116:	2000      	movs	r0, #0
 8007118:	f04f 0c0a 	mov.w	ip, #10
 800711c:	9a07      	ldr	r2, [sp, #28]
 800711e:	4621      	mov	r1, r4
 8007120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007124:	3b30      	subs	r3, #48	; 0x30
 8007126:	2b09      	cmp	r3, #9
 8007128:	d94e      	bls.n	80071c8 <_vfiprintf_r+0x1c4>
 800712a:	b1b0      	cbz	r0, 800715a <_vfiprintf_r+0x156>
 800712c:	9207      	str	r2, [sp, #28]
 800712e:	e014      	b.n	800715a <_vfiprintf_r+0x156>
 8007130:	eba0 0308 	sub.w	r3, r0, r8
 8007134:	fa09 f303 	lsl.w	r3, r9, r3
 8007138:	4313      	orrs	r3, r2
 800713a:	46a2      	mov	sl, r4
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	e7d2      	b.n	80070e6 <_vfiprintf_r+0xe2>
 8007140:	9b03      	ldr	r3, [sp, #12]
 8007142:	1d19      	adds	r1, r3, #4
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	9103      	str	r1, [sp, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	bfbb      	ittet	lt
 800714c:	425b      	neglt	r3, r3
 800714e:	f042 0202 	orrlt.w	r2, r2, #2
 8007152:	9307      	strge	r3, [sp, #28]
 8007154:	9307      	strlt	r3, [sp, #28]
 8007156:	bfb8      	it	lt
 8007158:	9204      	strlt	r2, [sp, #16]
 800715a:	7823      	ldrb	r3, [r4, #0]
 800715c:	2b2e      	cmp	r3, #46	; 0x2e
 800715e:	d10c      	bne.n	800717a <_vfiprintf_r+0x176>
 8007160:	7863      	ldrb	r3, [r4, #1]
 8007162:	2b2a      	cmp	r3, #42	; 0x2a
 8007164:	d135      	bne.n	80071d2 <_vfiprintf_r+0x1ce>
 8007166:	9b03      	ldr	r3, [sp, #12]
 8007168:	3402      	adds	r4, #2
 800716a:	1d1a      	adds	r2, r3, #4
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	9203      	str	r2, [sp, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	bfb8      	it	lt
 8007174:	f04f 33ff 	movlt.w	r3, #4294967295
 8007178:	9305      	str	r3, [sp, #20]
 800717a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007260 <_vfiprintf_r+0x25c>
 800717e:	2203      	movs	r2, #3
 8007180:	4650      	mov	r0, sl
 8007182:	7821      	ldrb	r1, [r4, #0]
 8007184:	f7ff f8ca 	bl	800631c <memchr>
 8007188:	b140      	cbz	r0, 800719c <_vfiprintf_r+0x198>
 800718a:	2340      	movs	r3, #64	; 0x40
 800718c:	eba0 000a 	sub.w	r0, r0, sl
 8007190:	fa03 f000 	lsl.w	r0, r3, r0
 8007194:	9b04      	ldr	r3, [sp, #16]
 8007196:	3401      	adds	r4, #1
 8007198:	4303      	orrs	r3, r0
 800719a:	9304      	str	r3, [sp, #16]
 800719c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a0:	2206      	movs	r2, #6
 80071a2:	482c      	ldr	r0, [pc, #176]	; (8007254 <_vfiprintf_r+0x250>)
 80071a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071a8:	f7ff f8b8 	bl	800631c <memchr>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d03f      	beq.n	8007230 <_vfiprintf_r+0x22c>
 80071b0:	4b29      	ldr	r3, [pc, #164]	; (8007258 <_vfiprintf_r+0x254>)
 80071b2:	bb1b      	cbnz	r3, 80071fc <_vfiprintf_r+0x1f8>
 80071b4:	9b03      	ldr	r3, [sp, #12]
 80071b6:	3307      	adds	r3, #7
 80071b8:	f023 0307 	bic.w	r3, r3, #7
 80071bc:	3308      	adds	r3, #8
 80071be:	9303      	str	r3, [sp, #12]
 80071c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c2:	443b      	add	r3, r7
 80071c4:	9309      	str	r3, [sp, #36]	; 0x24
 80071c6:	e767      	b.n	8007098 <_vfiprintf_r+0x94>
 80071c8:	460c      	mov	r4, r1
 80071ca:	2001      	movs	r0, #1
 80071cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80071d0:	e7a5      	b.n	800711e <_vfiprintf_r+0x11a>
 80071d2:	2300      	movs	r3, #0
 80071d4:	f04f 0c0a 	mov.w	ip, #10
 80071d8:	4619      	mov	r1, r3
 80071da:	3401      	adds	r4, #1
 80071dc:	9305      	str	r3, [sp, #20]
 80071de:	4620      	mov	r0, r4
 80071e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071e4:	3a30      	subs	r2, #48	; 0x30
 80071e6:	2a09      	cmp	r2, #9
 80071e8:	d903      	bls.n	80071f2 <_vfiprintf_r+0x1ee>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0c5      	beq.n	800717a <_vfiprintf_r+0x176>
 80071ee:	9105      	str	r1, [sp, #20]
 80071f0:	e7c3      	b.n	800717a <_vfiprintf_r+0x176>
 80071f2:	4604      	mov	r4, r0
 80071f4:	2301      	movs	r3, #1
 80071f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80071fa:	e7f0      	b.n	80071de <_vfiprintf_r+0x1da>
 80071fc:	ab03      	add	r3, sp, #12
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	462a      	mov	r2, r5
 8007202:	4630      	mov	r0, r6
 8007204:	4b15      	ldr	r3, [pc, #84]	; (800725c <_vfiprintf_r+0x258>)
 8007206:	a904      	add	r1, sp, #16
 8007208:	f7fd fe1e 	bl	8004e48 <_printf_float>
 800720c:	4607      	mov	r7, r0
 800720e:	1c78      	adds	r0, r7, #1
 8007210:	d1d6      	bne.n	80071c0 <_vfiprintf_r+0x1bc>
 8007212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007214:	07d9      	lsls	r1, r3, #31
 8007216:	d405      	bmi.n	8007224 <_vfiprintf_r+0x220>
 8007218:	89ab      	ldrh	r3, [r5, #12]
 800721a:	059a      	lsls	r2, r3, #22
 800721c:	d402      	bmi.n	8007224 <_vfiprintf_r+0x220>
 800721e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007220:	f000 faaf 	bl	8007782 <__retarget_lock_release_recursive>
 8007224:	89ab      	ldrh	r3, [r5, #12]
 8007226:	065b      	lsls	r3, r3, #25
 8007228:	f53f af12 	bmi.w	8007050 <_vfiprintf_r+0x4c>
 800722c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800722e:	e711      	b.n	8007054 <_vfiprintf_r+0x50>
 8007230:	ab03      	add	r3, sp, #12
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	462a      	mov	r2, r5
 8007236:	4630      	mov	r0, r6
 8007238:	4b08      	ldr	r3, [pc, #32]	; (800725c <_vfiprintf_r+0x258>)
 800723a:	a904      	add	r1, sp, #16
 800723c:	f7fe f8a0 	bl	8005380 <_printf_i>
 8007240:	e7e4      	b.n	800720c <_vfiprintf_r+0x208>
 8007242:	bf00      	nop
 8007244:	08007e94 	.word	0x08007e94
 8007248:	08007eb4 	.word	0x08007eb4
 800724c:	08007e74 	.word	0x08007e74
 8007250:	08007d1c 	.word	0x08007d1c
 8007254:	08007d26 	.word	0x08007d26
 8007258:	08004e49 	.word	0x08004e49
 800725c:	08006fdf 	.word	0x08006fdf
 8007260:	08007d22 	.word	0x08007d22

08007264 <__swbuf_r>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	460e      	mov	r6, r1
 8007268:	4614      	mov	r4, r2
 800726a:	4605      	mov	r5, r0
 800726c:	b118      	cbz	r0, 8007276 <__swbuf_r+0x12>
 800726e:	6983      	ldr	r3, [r0, #24]
 8007270:	b90b      	cbnz	r3, 8007276 <__swbuf_r+0x12>
 8007272:	f000 f9e7 	bl	8007644 <__sinit>
 8007276:	4b21      	ldr	r3, [pc, #132]	; (80072fc <__swbuf_r+0x98>)
 8007278:	429c      	cmp	r4, r3
 800727a:	d12b      	bne.n	80072d4 <__swbuf_r+0x70>
 800727c:	686c      	ldr	r4, [r5, #4]
 800727e:	69a3      	ldr	r3, [r4, #24]
 8007280:	60a3      	str	r3, [r4, #8]
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	071a      	lsls	r2, r3, #28
 8007286:	d52f      	bpl.n	80072e8 <__swbuf_r+0x84>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	b36b      	cbz	r3, 80072e8 <__swbuf_r+0x84>
 800728c:	6923      	ldr	r3, [r4, #16]
 800728e:	6820      	ldr	r0, [r4, #0]
 8007290:	b2f6      	uxtb	r6, r6
 8007292:	1ac0      	subs	r0, r0, r3
 8007294:	6963      	ldr	r3, [r4, #20]
 8007296:	4637      	mov	r7, r6
 8007298:	4283      	cmp	r3, r0
 800729a:	dc04      	bgt.n	80072a6 <__swbuf_r+0x42>
 800729c:	4621      	mov	r1, r4
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 f93c 	bl	800751c <_fflush_r>
 80072a4:	bb30      	cbnz	r0, 80072f4 <__swbuf_r+0x90>
 80072a6:	68a3      	ldr	r3, [r4, #8]
 80072a8:	3001      	adds	r0, #1
 80072aa:	3b01      	subs	r3, #1
 80072ac:	60a3      	str	r3, [r4, #8]
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	6022      	str	r2, [r4, #0]
 80072b4:	701e      	strb	r6, [r3, #0]
 80072b6:	6963      	ldr	r3, [r4, #20]
 80072b8:	4283      	cmp	r3, r0
 80072ba:	d004      	beq.n	80072c6 <__swbuf_r+0x62>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	07db      	lsls	r3, r3, #31
 80072c0:	d506      	bpl.n	80072d0 <__swbuf_r+0x6c>
 80072c2:	2e0a      	cmp	r6, #10
 80072c4:	d104      	bne.n	80072d0 <__swbuf_r+0x6c>
 80072c6:	4621      	mov	r1, r4
 80072c8:	4628      	mov	r0, r5
 80072ca:	f000 f927 	bl	800751c <_fflush_r>
 80072ce:	b988      	cbnz	r0, 80072f4 <__swbuf_r+0x90>
 80072d0:	4638      	mov	r0, r7
 80072d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d4:	4b0a      	ldr	r3, [pc, #40]	; (8007300 <__swbuf_r+0x9c>)
 80072d6:	429c      	cmp	r4, r3
 80072d8:	d101      	bne.n	80072de <__swbuf_r+0x7a>
 80072da:	68ac      	ldr	r4, [r5, #8]
 80072dc:	e7cf      	b.n	800727e <__swbuf_r+0x1a>
 80072de:	4b09      	ldr	r3, [pc, #36]	; (8007304 <__swbuf_r+0xa0>)
 80072e0:	429c      	cmp	r4, r3
 80072e2:	bf08      	it	eq
 80072e4:	68ec      	ldreq	r4, [r5, #12]
 80072e6:	e7ca      	b.n	800727e <__swbuf_r+0x1a>
 80072e8:	4621      	mov	r1, r4
 80072ea:	4628      	mov	r0, r5
 80072ec:	f000 f81a 	bl	8007324 <__swsetup_r>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d0cb      	beq.n	800728c <__swbuf_r+0x28>
 80072f4:	f04f 37ff 	mov.w	r7, #4294967295
 80072f8:	e7ea      	b.n	80072d0 <__swbuf_r+0x6c>
 80072fa:	bf00      	nop
 80072fc:	08007e94 	.word	0x08007e94
 8007300:	08007eb4 	.word	0x08007eb4
 8007304:	08007e74 	.word	0x08007e74

08007308 <__ascii_wctomb>:
 8007308:	4603      	mov	r3, r0
 800730a:	4608      	mov	r0, r1
 800730c:	b141      	cbz	r1, 8007320 <__ascii_wctomb+0x18>
 800730e:	2aff      	cmp	r2, #255	; 0xff
 8007310:	d904      	bls.n	800731c <__ascii_wctomb+0x14>
 8007312:	228a      	movs	r2, #138	; 0x8a
 8007314:	f04f 30ff 	mov.w	r0, #4294967295
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	4770      	bx	lr
 800731c:	2001      	movs	r0, #1
 800731e:	700a      	strb	r2, [r1, #0]
 8007320:	4770      	bx	lr
	...

08007324 <__swsetup_r>:
 8007324:	4b32      	ldr	r3, [pc, #200]	; (80073f0 <__swsetup_r+0xcc>)
 8007326:	b570      	push	{r4, r5, r6, lr}
 8007328:	681d      	ldr	r5, [r3, #0]
 800732a:	4606      	mov	r6, r0
 800732c:	460c      	mov	r4, r1
 800732e:	b125      	cbz	r5, 800733a <__swsetup_r+0x16>
 8007330:	69ab      	ldr	r3, [r5, #24]
 8007332:	b913      	cbnz	r3, 800733a <__swsetup_r+0x16>
 8007334:	4628      	mov	r0, r5
 8007336:	f000 f985 	bl	8007644 <__sinit>
 800733a:	4b2e      	ldr	r3, [pc, #184]	; (80073f4 <__swsetup_r+0xd0>)
 800733c:	429c      	cmp	r4, r3
 800733e:	d10f      	bne.n	8007360 <__swsetup_r+0x3c>
 8007340:	686c      	ldr	r4, [r5, #4]
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007348:	0719      	lsls	r1, r3, #28
 800734a:	d42c      	bmi.n	80073a6 <__swsetup_r+0x82>
 800734c:	06dd      	lsls	r5, r3, #27
 800734e:	d411      	bmi.n	8007374 <__swsetup_r+0x50>
 8007350:	2309      	movs	r3, #9
 8007352:	6033      	str	r3, [r6, #0]
 8007354:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007358:	f04f 30ff 	mov.w	r0, #4294967295
 800735c:	81a3      	strh	r3, [r4, #12]
 800735e:	e03e      	b.n	80073de <__swsetup_r+0xba>
 8007360:	4b25      	ldr	r3, [pc, #148]	; (80073f8 <__swsetup_r+0xd4>)
 8007362:	429c      	cmp	r4, r3
 8007364:	d101      	bne.n	800736a <__swsetup_r+0x46>
 8007366:	68ac      	ldr	r4, [r5, #8]
 8007368:	e7eb      	b.n	8007342 <__swsetup_r+0x1e>
 800736a:	4b24      	ldr	r3, [pc, #144]	; (80073fc <__swsetup_r+0xd8>)
 800736c:	429c      	cmp	r4, r3
 800736e:	bf08      	it	eq
 8007370:	68ec      	ldreq	r4, [r5, #12]
 8007372:	e7e6      	b.n	8007342 <__swsetup_r+0x1e>
 8007374:	0758      	lsls	r0, r3, #29
 8007376:	d512      	bpl.n	800739e <__swsetup_r+0x7a>
 8007378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800737a:	b141      	cbz	r1, 800738e <__swsetup_r+0x6a>
 800737c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007380:	4299      	cmp	r1, r3
 8007382:	d002      	beq.n	800738a <__swsetup_r+0x66>
 8007384:	4630      	mov	r0, r6
 8007386:	f7ff fb75 	bl	8006a74 <_free_r>
 800738a:	2300      	movs	r3, #0
 800738c:	6363      	str	r3, [r4, #52]	; 0x34
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	2300      	movs	r3, #0
 8007398:	6063      	str	r3, [r4, #4]
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	f043 0308 	orr.w	r3, r3, #8
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	6923      	ldr	r3, [r4, #16]
 80073a8:	b94b      	cbnz	r3, 80073be <__swsetup_r+0x9a>
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b4:	d003      	beq.n	80073be <__swsetup_r+0x9a>
 80073b6:	4621      	mov	r1, r4
 80073b8:	4630      	mov	r0, r6
 80073ba:	f000 fa07 	bl	80077cc <__smakebuf_r>
 80073be:	89a0      	ldrh	r0, [r4, #12]
 80073c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073c4:	f010 0301 	ands.w	r3, r0, #1
 80073c8:	d00a      	beq.n	80073e0 <__swsetup_r+0xbc>
 80073ca:	2300      	movs	r3, #0
 80073cc:	60a3      	str	r3, [r4, #8]
 80073ce:	6963      	ldr	r3, [r4, #20]
 80073d0:	425b      	negs	r3, r3
 80073d2:	61a3      	str	r3, [r4, #24]
 80073d4:	6923      	ldr	r3, [r4, #16]
 80073d6:	b943      	cbnz	r3, 80073ea <__swsetup_r+0xc6>
 80073d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073dc:	d1ba      	bne.n	8007354 <__swsetup_r+0x30>
 80073de:	bd70      	pop	{r4, r5, r6, pc}
 80073e0:	0781      	lsls	r1, r0, #30
 80073e2:	bf58      	it	pl
 80073e4:	6963      	ldrpl	r3, [r4, #20]
 80073e6:	60a3      	str	r3, [r4, #8]
 80073e8:	e7f4      	b.n	80073d4 <__swsetup_r+0xb0>
 80073ea:	2000      	movs	r0, #0
 80073ec:	e7f7      	b.n	80073de <__swsetup_r+0xba>
 80073ee:	bf00      	nop
 80073f0:	2000000c 	.word	0x2000000c
 80073f4:	08007e94 	.word	0x08007e94
 80073f8:	08007eb4 	.word	0x08007eb4
 80073fc:	08007e74 	.word	0x08007e74

08007400 <abort>:
 8007400:	2006      	movs	r0, #6
 8007402:	b508      	push	{r3, lr}
 8007404:	f000 fa52 	bl	80078ac <raise>
 8007408:	2001      	movs	r0, #1
 800740a:	f7fb faac 	bl	8002966 <_exit>
	...

08007410 <__sflush_r>:
 8007410:	898a      	ldrh	r2, [r1, #12]
 8007412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007416:	4605      	mov	r5, r0
 8007418:	0710      	lsls	r0, r2, #28
 800741a:	460c      	mov	r4, r1
 800741c:	d458      	bmi.n	80074d0 <__sflush_r+0xc0>
 800741e:	684b      	ldr	r3, [r1, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	dc05      	bgt.n	8007430 <__sflush_r+0x20>
 8007424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007426:	2b00      	cmp	r3, #0
 8007428:	dc02      	bgt.n	8007430 <__sflush_r+0x20>
 800742a:	2000      	movs	r0, #0
 800742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007432:	2e00      	cmp	r6, #0
 8007434:	d0f9      	beq.n	800742a <__sflush_r+0x1a>
 8007436:	2300      	movs	r3, #0
 8007438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800743c:	682f      	ldr	r7, [r5, #0]
 800743e:	602b      	str	r3, [r5, #0]
 8007440:	d032      	beq.n	80074a8 <__sflush_r+0x98>
 8007442:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	075a      	lsls	r2, r3, #29
 8007448:	d505      	bpl.n	8007456 <__sflush_r+0x46>
 800744a:	6863      	ldr	r3, [r4, #4]
 800744c:	1ac0      	subs	r0, r0, r3
 800744e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007450:	b10b      	cbz	r3, 8007456 <__sflush_r+0x46>
 8007452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007454:	1ac0      	subs	r0, r0, r3
 8007456:	2300      	movs	r3, #0
 8007458:	4602      	mov	r2, r0
 800745a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800745c:	4628      	mov	r0, r5
 800745e:	6a21      	ldr	r1, [r4, #32]
 8007460:	47b0      	blx	r6
 8007462:	1c43      	adds	r3, r0, #1
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	d106      	bne.n	8007476 <__sflush_r+0x66>
 8007468:	6829      	ldr	r1, [r5, #0]
 800746a:	291d      	cmp	r1, #29
 800746c:	d82c      	bhi.n	80074c8 <__sflush_r+0xb8>
 800746e:	4a2a      	ldr	r2, [pc, #168]	; (8007518 <__sflush_r+0x108>)
 8007470:	40ca      	lsrs	r2, r1
 8007472:	07d6      	lsls	r6, r2, #31
 8007474:	d528      	bpl.n	80074c8 <__sflush_r+0xb8>
 8007476:	2200      	movs	r2, #0
 8007478:	6062      	str	r2, [r4, #4]
 800747a:	6922      	ldr	r2, [r4, #16]
 800747c:	04d9      	lsls	r1, r3, #19
 800747e:	6022      	str	r2, [r4, #0]
 8007480:	d504      	bpl.n	800748c <__sflush_r+0x7c>
 8007482:	1c42      	adds	r2, r0, #1
 8007484:	d101      	bne.n	800748a <__sflush_r+0x7a>
 8007486:	682b      	ldr	r3, [r5, #0]
 8007488:	b903      	cbnz	r3, 800748c <__sflush_r+0x7c>
 800748a:	6560      	str	r0, [r4, #84]	; 0x54
 800748c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800748e:	602f      	str	r7, [r5, #0]
 8007490:	2900      	cmp	r1, #0
 8007492:	d0ca      	beq.n	800742a <__sflush_r+0x1a>
 8007494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007498:	4299      	cmp	r1, r3
 800749a:	d002      	beq.n	80074a2 <__sflush_r+0x92>
 800749c:	4628      	mov	r0, r5
 800749e:	f7ff fae9 	bl	8006a74 <_free_r>
 80074a2:	2000      	movs	r0, #0
 80074a4:	6360      	str	r0, [r4, #52]	; 0x34
 80074a6:	e7c1      	b.n	800742c <__sflush_r+0x1c>
 80074a8:	6a21      	ldr	r1, [r4, #32]
 80074aa:	2301      	movs	r3, #1
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b0      	blx	r6
 80074b0:	1c41      	adds	r1, r0, #1
 80074b2:	d1c7      	bne.n	8007444 <__sflush_r+0x34>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0c4      	beq.n	8007444 <__sflush_r+0x34>
 80074ba:	2b1d      	cmp	r3, #29
 80074bc:	d001      	beq.n	80074c2 <__sflush_r+0xb2>
 80074be:	2b16      	cmp	r3, #22
 80074c0:	d101      	bne.n	80074c6 <__sflush_r+0xb6>
 80074c2:	602f      	str	r7, [r5, #0]
 80074c4:	e7b1      	b.n	800742a <__sflush_r+0x1a>
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	e7ad      	b.n	800742c <__sflush_r+0x1c>
 80074d0:	690f      	ldr	r7, [r1, #16]
 80074d2:	2f00      	cmp	r7, #0
 80074d4:	d0a9      	beq.n	800742a <__sflush_r+0x1a>
 80074d6:	0793      	lsls	r3, r2, #30
 80074d8:	bf18      	it	ne
 80074da:	2300      	movne	r3, #0
 80074dc:	680e      	ldr	r6, [r1, #0]
 80074de:	bf08      	it	eq
 80074e0:	694b      	ldreq	r3, [r1, #20]
 80074e2:	eba6 0807 	sub.w	r8, r6, r7
 80074e6:	600f      	str	r7, [r1, #0]
 80074e8:	608b      	str	r3, [r1, #8]
 80074ea:	f1b8 0f00 	cmp.w	r8, #0
 80074ee:	dd9c      	ble.n	800742a <__sflush_r+0x1a>
 80074f0:	4643      	mov	r3, r8
 80074f2:	463a      	mov	r2, r7
 80074f4:	4628      	mov	r0, r5
 80074f6:	6a21      	ldr	r1, [r4, #32]
 80074f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074fa:	47b0      	blx	r6
 80074fc:	2800      	cmp	r0, #0
 80074fe:	dc06      	bgt.n	800750e <__sflush_r+0xfe>
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	f04f 30ff 	mov.w	r0, #4294967295
 8007506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750a:	81a3      	strh	r3, [r4, #12]
 800750c:	e78e      	b.n	800742c <__sflush_r+0x1c>
 800750e:	4407      	add	r7, r0
 8007510:	eba8 0800 	sub.w	r8, r8, r0
 8007514:	e7e9      	b.n	80074ea <__sflush_r+0xda>
 8007516:	bf00      	nop
 8007518:	20400001 	.word	0x20400001

0800751c <_fflush_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	690b      	ldr	r3, [r1, #16]
 8007520:	4605      	mov	r5, r0
 8007522:	460c      	mov	r4, r1
 8007524:	b913      	cbnz	r3, 800752c <_fflush_r+0x10>
 8007526:	2500      	movs	r5, #0
 8007528:	4628      	mov	r0, r5
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	b118      	cbz	r0, 8007536 <_fflush_r+0x1a>
 800752e:	6983      	ldr	r3, [r0, #24]
 8007530:	b90b      	cbnz	r3, 8007536 <_fflush_r+0x1a>
 8007532:	f000 f887 	bl	8007644 <__sinit>
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <_fflush_r+0x6c>)
 8007538:	429c      	cmp	r4, r3
 800753a:	d11b      	bne.n	8007574 <_fflush_r+0x58>
 800753c:	686c      	ldr	r4, [r5, #4]
 800753e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0ef      	beq.n	8007526 <_fflush_r+0xa>
 8007546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007548:	07d0      	lsls	r0, r2, #31
 800754a:	d404      	bmi.n	8007556 <_fflush_r+0x3a>
 800754c:	0599      	lsls	r1, r3, #22
 800754e:	d402      	bmi.n	8007556 <_fflush_r+0x3a>
 8007550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007552:	f000 f915 	bl	8007780 <__retarget_lock_acquire_recursive>
 8007556:	4628      	mov	r0, r5
 8007558:	4621      	mov	r1, r4
 800755a:	f7ff ff59 	bl	8007410 <__sflush_r>
 800755e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007560:	4605      	mov	r5, r0
 8007562:	07da      	lsls	r2, r3, #31
 8007564:	d4e0      	bmi.n	8007528 <_fflush_r+0xc>
 8007566:	89a3      	ldrh	r3, [r4, #12]
 8007568:	059b      	lsls	r3, r3, #22
 800756a:	d4dd      	bmi.n	8007528 <_fflush_r+0xc>
 800756c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756e:	f000 f908 	bl	8007782 <__retarget_lock_release_recursive>
 8007572:	e7d9      	b.n	8007528 <_fflush_r+0xc>
 8007574:	4b05      	ldr	r3, [pc, #20]	; (800758c <_fflush_r+0x70>)
 8007576:	429c      	cmp	r4, r3
 8007578:	d101      	bne.n	800757e <_fflush_r+0x62>
 800757a:	68ac      	ldr	r4, [r5, #8]
 800757c:	e7df      	b.n	800753e <_fflush_r+0x22>
 800757e:	4b04      	ldr	r3, [pc, #16]	; (8007590 <_fflush_r+0x74>)
 8007580:	429c      	cmp	r4, r3
 8007582:	bf08      	it	eq
 8007584:	68ec      	ldreq	r4, [r5, #12]
 8007586:	e7da      	b.n	800753e <_fflush_r+0x22>
 8007588:	08007e94 	.word	0x08007e94
 800758c:	08007eb4 	.word	0x08007eb4
 8007590:	08007e74 	.word	0x08007e74

08007594 <std>:
 8007594:	2300      	movs	r3, #0
 8007596:	b510      	push	{r4, lr}
 8007598:	4604      	mov	r4, r0
 800759a:	e9c0 3300 	strd	r3, r3, [r0]
 800759e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075a2:	6083      	str	r3, [r0, #8]
 80075a4:	8181      	strh	r1, [r0, #12]
 80075a6:	6643      	str	r3, [r0, #100]	; 0x64
 80075a8:	81c2      	strh	r2, [r0, #14]
 80075aa:	6183      	str	r3, [r0, #24]
 80075ac:	4619      	mov	r1, r3
 80075ae:	2208      	movs	r2, #8
 80075b0:	305c      	adds	r0, #92	; 0x5c
 80075b2:	f7fd fba3 	bl	8004cfc <memset>
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <std+0x38>)
 80075b8:	6224      	str	r4, [r4, #32]
 80075ba:	6263      	str	r3, [r4, #36]	; 0x24
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <std+0x3c>)
 80075be:	62a3      	str	r3, [r4, #40]	; 0x28
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <std+0x40>)
 80075c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075c4:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <std+0x44>)
 80075c6:	6323      	str	r3, [r4, #48]	; 0x30
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	bf00      	nop
 80075cc:	080078e5 	.word	0x080078e5
 80075d0:	08007907 	.word	0x08007907
 80075d4:	0800793f 	.word	0x0800793f
 80075d8:	08007963 	.word	0x08007963

080075dc <_cleanup_r>:
 80075dc:	4901      	ldr	r1, [pc, #4]	; (80075e4 <_cleanup_r+0x8>)
 80075de:	f000 b8af 	b.w	8007740 <_fwalk_reent>
 80075e2:	bf00      	nop
 80075e4:	0800751d 	.word	0x0800751d

080075e8 <__sfmoreglue>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	2568      	movs	r5, #104	; 0x68
 80075ec:	1e4a      	subs	r2, r1, #1
 80075ee:	4355      	muls	r5, r2
 80075f0:	460e      	mov	r6, r1
 80075f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075f6:	f7ff fa89 	bl	8006b0c <_malloc_r>
 80075fa:	4604      	mov	r4, r0
 80075fc:	b140      	cbz	r0, 8007610 <__sfmoreglue+0x28>
 80075fe:	2100      	movs	r1, #0
 8007600:	e9c0 1600 	strd	r1, r6, [r0]
 8007604:	300c      	adds	r0, #12
 8007606:	60a0      	str	r0, [r4, #8]
 8007608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800760c:	f7fd fb76 	bl	8004cfc <memset>
 8007610:	4620      	mov	r0, r4
 8007612:	bd70      	pop	{r4, r5, r6, pc}

08007614 <__sfp_lock_acquire>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__sfp_lock_acquire+0x8>)
 8007616:	f000 b8b3 	b.w	8007780 <__retarget_lock_acquire_recursive>
 800761a:	bf00      	nop
 800761c:	2000195c 	.word	0x2000195c

08007620 <__sfp_lock_release>:
 8007620:	4801      	ldr	r0, [pc, #4]	; (8007628 <__sfp_lock_release+0x8>)
 8007622:	f000 b8ae 	b.w	8007782 <__retarget_lock_release_recursive>
 8007626:	bf00      	nop
 8007628:	2000195c 	.word	0x2000195c

0800762c <__sinit_lock_acquire>:
 800762c:	4801      	ldr	r0, [pc, #4]	; (8007634 <__sinit_lock_acquire+0x8>)
 800762e:	f000 b8a7 	b.w	8007780 <__retarget_lock_acquire_recursive>
 8007632:	bf00      	nop
 8007634:	20001957 	.word	0x20001957

08007638 <__sinit_lock_release>:
 8007638:	4801      	ldr	r0, [pc, #4]	; (8007640 <__sinit_lock_release+0x8>)
 800763a:	f000 b8a2 	b.w	8007782 <__retarget_lock_release_recursive>
 800763e:	bf00      	nop
 8007640:	20001957 	.word	0x20001957

08007644 <__sinit>:
 8007644:	b510      	push	{r4, lr}
 8007646:	4604      	mov	r4, r0
 8007648:	f7ff fff0 	bl	800762c <__sinit_lock_acquire>
 800764c:	69a3      	ldr	r3, [r4, #24]
 800764e:	b11b      	cbz	r3, 8007658 <__sinit+0x14>
 8007650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007654:	f7ff bff0 	b.w	8007638 <__sinit_lock_release>
 8007658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800765c:	6523      	str	r3, [r4, #80]	; 0x50
 800765e:	4b13      	ldr	r3, [pc, #76]	; (80076ac <__sinit+0x68>)
 8007660:	4a13      	ldr	r2, [pc, #76]	; (80076b0 <__sinit+0x6c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	62a2      	str	r2, [r4, #40]	; 0x28
 8007666:	42a3      	cmp	r3, r4
 8007668:	bf08      	it	eq
 800766a:	2301      	moveq	r3, #1
 800766c:	4620      	mov	r0, r4
 800766e:	bf08      	it	eq
 8007670:	61a3      	streq	r3, [r4, #24]
 8007672:	f000 f81f 	bl	80076b4 <__sfp>
 8007676:	6060      	str	r0, [r4, #4]
 8007678:	4620      	mov	r0, r4
 800767a:	f000 f81b 	bl	80076b4 <__sfp>
 800767e:	60a0      	str	r0, [r4, #8]
 8007680:	4620      	mov	r0, r4
 8007682:	f000 f817 	bl	80076b4 <__sfp>
 8007686:	2200      	movs	r2, #0
 8007688:	2104      	movs	r1, #4
 800768a:	60e0      	str	r0, [r4, #12]
 800768c:	6860      	ldr	r0, [r4, #4]
 800768e:	f7ff ff81 	bl	8007594 <std>
 8007692:	2201      	movs	r2, #1
 8007694:	2109      	movs	r1, #9
 8007696:	68a0      	ldr	r0, [r4, #8]
 8007698:	f7ff ff7c 	bl	8007594 <std>
 800769c:	2202      	movs	r2, #2
 800769e:	2112      	movs	r1, #18
 80076a0:	68e0      	ldr	r0, [r4, #12]
 80076a2:	f7ff ff77 	bl	8007594 <std>
 80076a6:	2301      	movs	r3, #1
 80076a8:	61a3      	str	r3, [r4, #24]
 80076aa:	e7d1      	b.n	8007650 <__sinit+0xc>
 80076ac:	08007af0 	.word	0x08007af0
 80076b0:	080075dd 	.word	0x080075dd

080076b4 <__sfp>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	4607      	mov	r7, r0
 80076b8:	f7ff ffac 	bl	8007614 <__sfp_lock_acquire>
 80076bc:	4b1e      	ldr	r3, [pc, #120]	; (8007738 <__sfp+0x84>)
 80076be:	681e      	ldr	r6, [r3, #0]
 80076c0:	69b3      	ldr	r3, [r6, #24]
 80076c2:	b913      	cbnz	r3, 80076ca <__sfp+0x16>
 80076c4:	4630      	mov	r0, r6
 80076c6:	f7ff ffbd 	bl	8007644 <__sinit>
 80076ca:	3648      	adds	r6, #72	; 0x48
 80076cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	d503      	bpl.n	80076dc <__sfp+0x28>
 80076d4:	6833      	ldr	r3, [r6, #0]
 80076d6:	b30b      	cbz	r3, 800771c <__sfp+0x68>
 80076d8:	6836      	ldr	r6, [r6, #0]
 80076da:	e7f7      	b.n	80076cc <__sfp+0x18>
 80076dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076e0:	b9d5      	cbnz	r5, 8007718 <__sfp+0x64>
 80076e2:	4b16      	ldr	r3, [pc, #88]	; (800773c <__sfp+0x88>)
 80076e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076e8:	60e3      	str	r3, [r4, #12]
 80076ea:	6665      	str	r5, [r4, #100]	; 0x64
 80076ec:	f000 f847 	bl	800777e <__retarget_lock_init_recursive>
 80076f0:	f7ff ff96 	bl	8007620 <__sfp_lock_release>
 80076f4:	2208      	movs	r2, #8
 80076f6:	4629      	mov	r1, r5
 80076f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007700:	6025      	str	r5, [r4, #0]
 8007702:	61a5      	str	r5, [r4, #24]
 8007704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007708:	f7fd faf8 	bl	8004cfc <memset>
 800770c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007714:	4620      	mov	r0, r4
 8007716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007718:	3468      	adds	r4, #104	; 0x68
 800771a:	e7d9      	b.n	80076d0 <__sfp+0x1c>
 800771c:	2104      	movs	r1, #4
 800771e:	4638      	mov	r0, r7
 8007720:	f7ff ff62 	bl	80075e8 <__sfmoreglue>
 8007724:	4604      	mov	r4, r0
 8007726:	6030      	str	r0, [r6, #0]
 8007728:	2800      	cmp	r0, #0
 800772a:	d1d5      	bne.n	80076d8 <__sfp+0x24>
 800772c:	f7ff ff78 	bl	8007620 <__sfp_lock_release>
 8007730:	230c      	movs	r3, #12
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	e7ee      	b.n	8007714 <__sfp+0x60>
 8007736:	bf00      	nop
 8007738:	08007af0 	.word	0x08007af0
 800773c:	ffff0001 	.word	0xffff0001

08007740 <_fwalk_reent>:
 8007740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007744:	4606      	mov	r6, r0
 8007746:	4688      	mov	r8, r1
 8007748:	2700      	movs	r7, #0
 800774a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800774e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007752:	f1b9 0901 	subs.w	r9, r9, #1
 8007756:	d505      	bpl.n	8007764 <_fwalk_reent+0x24>
 8007758:	6824      	ldr	r4, [r4, #0]
 800775a:	2c00      	cmp	r4, #0
 800775c:	d1f7      	bne.n	800774e <_fwalk_reent+0xe>
 800775e:	4638      	mov	r0, r7
 8007760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007764:	89ab      	ldrh	r3, [r5, #12]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d907      	bls.n	800777a <_fwalk_reent+0x3a>
 800776a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800776e:	3301      	adds	r3, #1
 8007770:	d003      	beq.n	800777a <_fwalk_reent+0x3a>
 8007772:	4629      	mov	r1, r5
 8007774:	4630      	mov	r0, r6
 8007776:	47c0      	blx	r8
 8007778:	4307      	orrs	r7, r0
 800777a:	3568      	adds	r5, #104	; 0x68
 800777c:	e7e9      	b.n	8007752 <_fwalk_reent+0x12>

0800777e <__retarget_lock_init_recursive>:
 800777e:	4770      	bx	lr

08007780 <__retarget_lock_acquire_recursive>:
 8007780:	4770      	bx	lr

08007782 <__retarget_lock_release_recursive>:
 8007782:	4770      	bx	lr

08007784 <__swhatbuf_r>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	460e      	mov	r6, r1
 8007788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800778c:	4614      	mov	r4, r2
 800778e:	2900      	cmp	r1, #0
 8007790:	461d      	mov	r5, r3
 8007792:	b096      	sub	sp, #88	; 0x58
 8007794:	da07      	bge.n	80077a6 <__swhatbuf_r+0x22>
 8007796:	2300      	movs	r3, #0
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	89b3      	ldrh	r3, [r6, #12]
 800779c:	061a      	lsls	r2, r3, #24
 800779e:	d410      	bmi.n	80077c2 <__swhatbuf_r+0x3e>
 80077a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a4:	e00e      	b.n	80077c4 <__swhatbuf_r+0x40>
 80077a6:	466a      	mov	r2, sp
 80077a8:	f000 f902 	bl	80079b0 <_fstat_r>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	dbf2      	blt.n	8007796 <__swhatbuf_r+0x12>
 80077b0:	9a01      	ldr	r2, [sp, #4]
 80077b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ba:	425a      	negs	r2, r3
 80077bc:	415a      	adcs	r2, r3
 80077be:	602a      	str	r2, [r5, #0]
 80077c0:	e7ee      	b.n	80077a0 <__swhatbuf_r+0x1c>
 80077c2:	2340      	movs	r3, #64	; 0x40
 80077c4:	2000      	movs	r0, #0
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	b016      	add	sp, #88	; 0x58
 80077ca:	bd70      	pop	{r4, r5, r6, pc}

080077cc <__smakebuf_r>:
 80077cc:	898b      	ldrh	r3, [r1, #12]
 80077ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077d0:	079d      	lsls	r5, r3, #30
 80077d2:	4606      	mov	r6, r0
 80077d4:	460c      	mov	r4, r1
 80077d6:	d507      	bpl.n	80077e8 <__smakebuf_r+0x1c>
 80077d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	6123      	str	r3, [r4, #16]
 80077e0:	2301      	movs	r3, #1
 80077e2:	6163      	str	r3, [r4, #20]
 80077e4:	b002      	add	sp, #8
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
 80077e8:	466a      	mov	r2, sp
 80077ea:	ab01      	add	r3, sp, #4
 80077ec:	f7ff ffca 	bl	8007784 <__swhatbuf_r>
 80077f0:	9900      	ldr	r1, [sp, #0]
 80077f2:	4605      	mov	r5, r0
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7ff f989 	bl	8006b0c <_malloc_r>
 80077fa:	b948      	cbnz	r0, 8007810 <__smakebuf_r+0x44>
 80077fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007800:	059a      	lsls	r2, r3, #22
 8007802:	d4ef      	bmi.n	80077e4 <__smakebuf_r+0x18>
 8007804:	f023 0303 	bic.w	r3, r3, #3
 8007808:	f043 0302 	orr.w	r3, r3, #2
 800780c:	81a3      	strh	r3, [r4, #12]
 800780e:	e7e3      	b.n	80077d8 <__smakebuf_r+0xc>
 8007810:	4b0d      	ldr	r3, [pc, #52]	; (8007848 <__smakebuf_r+0x7c>)
 8007812:	62b3      	str	r3, [r6, #40]	; 0x28
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	6020      	str	r0, [r4, #0]
 8007818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781c:	81a3      	strh	r3, [r4, #12]
 800781e:	9b00      	ldr	r3, [sp, #0]
 8007820:	6120      	str	r0, [r4, #16]
 8007822:	6163      	str	r3, [r4, #20]
 8007824:	9b01      	ldr	r3, [sp, #4]
 8007826:	b15b      	cbz	r3, 8007840 <__smakebuf_r+0x74>
 8007828:	4630      	mov	r0, r6
 800782a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800782e:	f000 f8d1 	bl	80079d4 <_isatty_r>
 8007832:	b128      	cbz	r0, 8007840 <__smakebuf_r+0x74>
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	f043 0301 	orr.w	r3, r3, #1
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	89a0      	ldrh	r0, [r4, #12]
 8007842:	4305      	orrs	r5, r0
 8007844:	81a5      	strh	r5, [r4, #12]
 8007846:	e7cd      	b.n	80077e4 <__smakebuf_r+0x18>
 8007848:	080075dd 	.word	0x080075dd

0800784c <_malloc_usable_size_r>:
 800784c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007850:	1f18      	subs	r0, r3, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	bfbc      	itt	lt
 8007856:	580b      	ldrlt	r3, [r1, r0]
 8007858:	18c0      	addlt	r0, r0, r3
 800785a:	4770      	bx	lr

0800785c <_raise_r>:
 800785c:	291f      	cmp	r1, #31
 800785e:	b538      	push	{r3, r4, r5, lr}
 8007860:	4604      	mov	r4, r0
 8007862:	460d      	mov	r5, r1
 8007864:	d904      	bls.n	8007870 <_raise_r+0x14>
 8007866:	2316      	movs	r3, #22
 8007868:	6003      	str	r3, [r0, #0]
 800786a:	f04f 30ff 	mov.w	r0, #4294967295
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007872:	b112      	cbz	r2, 800787a <_raise_r+0x1e>
 8007874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007878:	b94b      	cbnz	r3, 800788e <_raise_r+0x32>
 800787a:	4620      	mov	r0, r4
 800787c:	f000 f830 	bl	80078e0 <_getpid_r>
 8007880:	462a      	mov	r2, r5
 8007882:	4601      	mov	r1, r0
 8007884:	4620      	mov	r0, r4
 8007886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800788a:	f000 b817 	b.w	80078bc <_kill_r>
 800788e:	2b01      	cmp	r3, #1
 8007890:	d00a      	beq.n	80078a8 <_raise_r+0x4c>
 8007892:	1c59      	adds	r1, r3, #1
 8007894:	d103      	bne.n	800789e <_raise_r+0x42>
 8007896:	2316      	movs	r3, #22
 8007898:	6003      	str	r3, [r0, #0]
 800789a:	2001      	movs	r0, #1
 800789c:	e7e7      	b.n	800786e <_raise_r+0x12>
 800789e:	2400      	movs	r4, #0
 80078a0:	4628      	mov	r0, r5
 80078a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078a6:	4798      	blx	r3
 80078a8:	2000      	movs	r0, #0
 80078aa:	e7e0      	b.n	800786e <_raise_r+0x12>

080078ac <raise>:
 80078ac:	4b02      	ldr	r3, [pc, #8]	; (80078b8 <raise+0xc>)
 80078ae:	4601      	mov	r1, r0
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	f7ff bfd3 	b.w	800785c <_raise_r>
 80078b6:	bf00      	nop
 80078b8:	2000000c 	.word	0x2000000c

080078bc <_kill_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	2300      	movs	r3, #0
 80078c0:	4d06      	ldr	r5, [pc, #24]	; (80078dc <_kill_r+0x20>)
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	4611      	mov	r1, r2
 80078c8:	602b      	str	r3, [r5, #0]
 80078ca:	f7fb f83c 	bl	8002946 <_kill>
 80078ce:	1c43      	adds	r3, r0, #1
 80078d0:	d102      	bne.n	80078d8 <_kill_r+0x1c>
 80078d2:	682b      	ldr	r3, [r5, #0]
 80078d4:	b103      	cbz	r3, 80078d8 <_kill_r+0x1c>
 80078d6:	6023      	str	r3, [r4, #0]
 80078d8:	bd38      	pop	{r3, r4, r5, pc}
 80078da:	bf00      	nop
 80078dc:	20001950 	.word	0x20001950

080078e0 <_getpid_r>:
 80078e0:	f7fb b82a 	b.w	8002938 <_getpid>

080078e4 <__sread>:
 80078e4:	b510      	push	{r4, lr}
 80078e6:	460c      	mov	r4, r1
 80078e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ec:	f000 f894 	bl	8007a18 <_read_r>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	bfab      	itete	ge
 80078f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078f6:	89a3      	ldrhlt	r3, [r4, #12]
 80078f8:	181b      	addge	r3, r3, r0
 80078fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078fe:	bfac      	ite	ge
 8007900:	6563      	strge	r3, [r4, #84]	; 0x54
 8007902:	81a3      	strhlt	r3, [r4, #12]
 8007904:	bd10      	pop	{r4, pc}

08007906 <__swrite>:
 8007906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800790a:	461f      	mov	r7, r3
 800790c:	898b      	ldrh	r3, [r1, #12]
 800790e:	4605      	mov	r5, r0
 8007910:	05db      	lsls	r3, r3, #23
 8007912:	460c      	mov	r4, r1
 8007914:	4616      	mov	r6, r2
 8007916:	d505      	bpl.n	8007924 <__swrite+0x1e>
 8007918:	2302      	movs	r3, #2
 800791a:	2200      	movs	r2, #0
 800791c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007920:	f000 f868 	bl	80079f4 <_lseek_r>
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	4632      	mov	r2, r6
 8007928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	4628      	mov	r0, r5
 8007930:	463b      	mov	r3, r7
 8007932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800793a:	f000 b817 	b.w	800796c <_write_r>

0800793e <__sseek>:
 800793e:	b510      	push	{r4, lr}
 8007940:	460c      	mov	r4, r1
 8007942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007946:	f000 f855 	bl	80079f4 <_lseek_r>
 800794a:	1c43      	adds	r3, r0, #1
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	bf15      	itete	ne
 8007950:	6560      	strne	r0, [r4, #84]	; 0x54
 8007952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800795a:	81a3      	strheq	r3, [r4, #12]
 800795c:	bf18      	it	ne
 800795e:	81a3      	strhne	r3, [r4, #12]
 8007960:	bd10      	pop	{r4, pc}

08007962 <__sclose>:
 8007962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007966:	f000 b813 	b.w	8007990 <_close_r>
	...

0800796c <_write_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4604      	mov	r4, r0
 8007970:	4608      	mov	r0, r1
 8007972:	4611      	mov	r1, r2
 8007974:	2200      	movs	r2, #0
 8007976:	4d05      	ldr	r5, [pc, #20]	; (800798c <_write_r+0x20>)
 8007978:	602a      	str	r2, [r5, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	f7fb f81a 	bl	80029b4 <_write>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_write_r+0x1e>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_write_r+0x1e>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	20001950 	.word	0x20001950

08007990 <_close_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	2300      	movs	r3, #0
 8007994:	4d05      	ldr	r5, [pc, #20]	; (80079ac <_close_r+0x1c>)
 8007996:	4604      	mov	r4, r0
 8007998:	4608      	mov	r0, r1
 800799a:	602b      	str	r3, [r5, #0]
 800799c:	f7fb f826 	bl	80029ec <_close>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d102      	bne.n	80079aa <_close_r+0x1a>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	b103      	cbz	r3, 80079aa <_close_r+0x1a>
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	20001950 	.word	0x20001950

080079b0 <_fstat_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	2300      	movs	r3, #0
 80079b4:	4d06      	ldr	r5, [pc, #24]	; (80079d0 <_fstat_r+0x20>)
 80079b6:	4604      	mov	r4, r0
 80079b8:	4608      	mov	r0, r1
 80079ba:	4611      	mov	r1, r2
 80079bc:	602b      	str	r3, [r5, #0]
 80079be:	f7fb f820 	bl	8002a02 <_fstat>
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	d102      	bne.n	80079cc <_fstat_r+0x1c>
 80079c6:	682b      	ldr	r3, [r5, #0]
 80079c8:	b103      	cbz	r3, 80079cc <_fstat_r+0x1c>
 80079ca:	6023      	str	r3, [r4, #0]
 80079cc:	bd38      	pop	{r3, r4, r5, pc}
 80079ce:	bf00      	nop
 80079d0:	20001950 	.word	0x20001950

080079d4 <_isatty_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	2300      	movs	r3, #0
 80079d8:	4d05      	ldr	r5, [pc, #20]	; (80079f0 <_isatty_r+0x1c>)
 80079da:	4604      	mov	r4, r0
 80079dc:	4608      	mov	r0, r1
 80079de:	602b      	str	r3, [r5, #0]
 80079e0:	f7fb f81e 	bl	8002a20 <_isatty>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_isatty_r+0x1a>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_isatty_r+0x1a>
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	20001950 	.word	0x20001950

080079f4 <_lseek_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	2200      	movs	r2, #0
 80079fe:	4d05      	ldr	r5, [pc, #20]	; (8007a14 <_lseek_r+0x20>)
 8007a00:	602a      	str	r2, [r5, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f7fb f816 	bl	8002a34 <_lseek>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_lseek_r+0x1e>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_lseek_r+0x1e>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	20001950 	.word	0x20001950

08007a18 <_read_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	4611      	mov	r1, r2
 8007a20:	2200      	movs	r2, #0
 8007a22:	4d05      	ldr	r5, [pc, #20]	; (8007a38 <_read_r+0x20>)
 8007a24:	602a      	str	r2, [r5, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	f7fa ffa7 	bl	800297a <_read>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_read_r+0x1e>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_read_r+0x1e>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	20001950 	.word	0x20001950

08007a3c <_init>:
 8007a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3e:	bf00      	nop
 8007a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a42:	bc08      	pop	{r3}
 8007a44:	469e      	mov	lr, r3
 8007a46:	4770      	bx	lr

08007a48 <_fini>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr
